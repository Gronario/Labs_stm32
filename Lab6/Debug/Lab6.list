
Lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800394c  0800394c  0001394c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b3c  08003b3c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003b3c  08003b3c  00013b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b44  08003b44  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b44  08003b44  00013b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b48  08003b48  00013b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000000c0  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000d4  200000d4  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c360  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001824  00000000  00000000  0002c3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000920  00000000  00000000  0002dbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008c0  00000000  00000000  0002e4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002104f  00000000  00000000  0002eda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000be60  00000000  00000000  0004fdf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c557d  00000000  00000000  0005bc57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001211d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026bc  00000000  00000000  00121228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003934 	.word	0x08003934

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003934 	.word	0x08003934

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2uiz>:
 8000540:	004a      	lsls	r2, r1, #1
 8000542:	d211      	bcs.n	8000568 <__aeabi_d2uiz+0x28>
 8000544:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000548:	d211      	bcs.n	800056e <__aeabi_d2uiz+0x2e>
 800054a:	d50d      	bpl.n	8000568 <__aeabi_d2uiz+0x28>
 800054c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000550:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000554:	d40e      	bmi.n	8000574 <__aeabi_d2uiz+0x34>
 8000556:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800055a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800055e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000562:	fa23 f002 	lsr.w	r0, r3, r2
 8000566:	4770      	bx	lr
 8000568:	f04f 0000 	mov.w	r0, #0
 800056c:	4770      	bx	lr
 800056e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000572:	d102      	bne.n	800057a <__aeabi_d2uiz+0x3a>
 8000574:	f04f 30ff 	mov.w	r0, #4294967295
 8000578:	4770      	bx	lr
 800057a:	f04f 0000 	mov.w	r0, #0
 800057e:	4770      	bx	lr

08000580 <__aeabi_uldivmod>:
 8000580:	b953      	cbnz	r3, 8000598 <__aeabi_uldivmod+0x18>
 8000582:	b94a      	cbnz	r2, 8000598 <__aeabi_uldivmod+0x18>
 8000584:	2900      	cmp	r1, #0
 8000586:	bf08      	it	eq
 8000588:	2800      	cmpeq	r0, #0
 800058a:	bf1c      	itt	ne
 800058c:	f04f 31ff 	movne.w	r1, #4294967295
 8000590:	f04f 30ff 	movne.w	r0, #4294967295
 8000594:	f000 b96e 	b.w	8000874 <__aeabi_idiv0>
 8000598:	f1ad 0c08 	sub.w	ip, sp, #8
 800059c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005a0:	f000 f806 	bl	80005b0 <__udivmoddi4>
 80005a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005ac:	b004      	add	sp, #16
 80005ae:	4770      	bx	lr

080005b0 <__udivmoddi4>:
 80005b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005b4:	9d08      	ldr	r5, [sp, #32]
 80005b6:	4604      	mov	r4, r0
 80005b8:	468c      	mov	ip, r1
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	f040 8083 	bne.w	80006c6 <__udivmoddi4+0x116>
 80005c0:	428a      	cmp	r2, r1
 80005c2:	4617      	mov	r7, r2
 80005c4:	d947      	bls.n	8000656 <__udivmoddi4+0xa6>
 80005c6:	fab2 f282 	clz	r2, r2
 80005ca:	b142      	cbz	r2, 80005de <__udivmoddi4+0x2e>
 80005cc:	f1c2 0020 	rsb	r0, r2, #32
 80005d0:	fa24 f000 	lsr.w	r0, r4, r0
 80005d4:	4091      	lsls	r1, r2
 80005d6:	4097      	lsls	r7, r2
 80005d8:	ea40 0c01 	orr.w	ip, r0, r1
 80005dc:	4094      	lsls	r4, r2
 80005de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80005e2:	0c23      	lsrs	r3, r4, #16
 80005e4:	fbbc f6f8 	udiv	r6, ip, r8
 80005e8:	fa1f fe87 	uxth.w	lr, r7
 80005ec:	fb08 c116 	mls	r1, r8, r6, ip
 80005f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f4:	fb06 f10e 	mul.w	r1, r6, lr
 80005f8:	4299      	cmp	r1, r3
 80005fa:	d909      	bls.n	8000610 <__udivmoddi4+0x60>
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000602:	f080 8119 	bcs.w	8000838 <__udivmoddi4+0x288>
 8000606:	4299      	cmp	r1, r3
 8000608:	f240 8116 	bls.w	8000838 <__udivmoddi4+0x288>
 800060c:	3e02      	subs	r6, #2
 800060e:	443b      	add	r3, r7
 8000610:	1a5b      	subs	r3, r3, r1
 8000612:	b2a4      	uxth	r4, r4
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3310 	mls	r3, r8, r0, r3
 800061c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000620:	fb00 fe0e 	mul.w	lr, r0, lr
 8000624:	45a6      	cmp	lr, r4
 8000626:	d909      	bls.n	800063c <__udivmoddi4+0x8c>
 8000628:	193c      	adds	r4, r7, r4
 800062a:	f100 33ff 	add.w	r3, r0, #4294967295
 800062e:	f080 8105 	bcs.w	800083c <__udivmoddi4+0x28c>
 8000632:	45a6      	cmp	lr, r4
 8000634:	f240 8102 	bls.w	800083c <__udivmoddi4+0x28c>
 8000638:	3802      	subs	r0, #2
 800063a:	443c      	add	r4, r7
 800063c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000640:	eba4 040e 	sub.w	r4, r4, lr
 8000644:	2600      	movs	r6, #0
 8000646:	b11d      	cbz	r5, 8000650 <__udivmoddi4+0xa0>
 8000648:	40d4      	lsrs	r4, r2
 800064a:	2300      	movs	r3, #0
 800064c:	e9c5 4300 	strd	r4, r3, [r5]
 8000650:	4631      	mov	r1, r6
 8000652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000656:	b902      	cbnz	r2, 800065a <__udivmoddi4+0xaa>
 8000658:	deff      	udf	#255	; 0xff
 800065a:	fab2 f282 	clz	r2, r2
 800065e:	2a00      	cmp	r2, #0
 8000660:	d150      	bne.n	8000704 <__udivmoddi4+0x154>
 8000662:	1bcb      	subs	r3, r1, r7
 8000664:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000668:	fa1f f887 	uxth.w	r8, r7
 800066c:	2601      	movs	r6, #1
 800066e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000672:	0c21      	lsrs	r1, r4, #16
 8000674:	fb0e 331c 	mls	r3, lr, ip, r3
 8000678:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800067c:	fb08 f30c 	mul.w	r3, r8, ip
 8000680:	428b      	cmp	r3, r1
 8000682:	d907      	bls.n	8000694 <__udivmoddi4+0xe4>
 8000684:	1879      	adds	r1, r7, r1
 8000686:	f10c 30ff 	add.w	r0, ip, #4294967295
 800068a:	d202      	bcs.n	8000692 <__udivmoddi4+0xe2>
 800068c:	428b      	cmp	r3, r1
 800068e:	f200 80e9 	bhi.w	8000864 <__udivmoddi4+0x2b4>
 8000692:	4684      	mov	ip, r0
 8000694:	1ac9      	subs	r1, r1, r3
 8000696:	b2a3      	uxth	r3, r4
 8000698:	fbb1 f0fe 	udiv	r0, r1, lr
 800069c:	fb0e 1110 	mls	r1, lr, r0, r1
 80006a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80006a4:	fb08 f800 	mul.w	r8, r8, r0
 80006a8:	45a0      	cmp	r8, r4
 80006aa:	d907      	bls.n	80006bc <__udivmoddi4+0x10c>
 80006ac:	193c      	adds	r4, r7, r4
 80006ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80006b2:	d202      	bcs.n	80006ba <__udivmoddi4+0x10a>
 80006b4:	45a0      	cmp	r8, r4
 80006b6:	f200 80d9 	bhi.w	800086c <__udivmoddi4+0x2bc>
 80006ba:	4618      	mov	r0, r3
 80006bc:	eba4 0408 	sub.w	r4, r4, r8
 80006c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80006c4:	e7bf      	b.n	8000646 <__udivmoddi4+0x96>
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d909      	bls.n	80006de <__udivmoddi4+0x12e>
 80006ca:	2d00      	cmp	r5, #0
 80006cc:	f000 80b1 	beq.w	8000832 <__udivmoddi4+0x282>
 80006d0:	2600      	movs	r6, #0
 80006d2:	e9c5 0100 	strd	r0, r1, [r5]
 80006d6:	4630      	mov	r0, r6
 80006d8:	4631      	mov	r1, r6
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	fab3 f683 	clz	r6, r3
 80006e2:	2e00      	cmp	r6, #0
 80006e4:	d14a      	bne.n	800077c <__udivmoddi4+0x1cc>
 80006e6:	428b      	cmp	r3, r1
 80006e8:	d302      	bcc.n	80006f0 <__udivmoddi4+0x140>
 80006ea:	4282      	cmp	r2, r0
 80006ec:	f200 80b8 	bhi.w	8000860 <__udivmoddi4+0x2b0>
 80006f0:	1a84      	subs	r4, r0, r2
 80006f2:	eb61 0103 	sbc.w	r1, r1, r3
 80006f6:	2001      	movs	r0, #1
 80006f8:	468c      	mov	ip, r1
 80006fa:	2d00      	cmp	r5, #0
 80006fc:	d0a8      	beq.n	8000650 <__udivmoddi4+0xa0>
 80006fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000702:	e7a5      	b.n	8000650 <__udivmoddi4+0xa0>
 8000704:	f1c2 0320 	rsb	r3, r2, #32
 8000708:	fa20 f603 	lsr.w	r6, r0, r3
 800070c:	4097      	lsls	r7, r2
 800070e:	fa01 f002 	lsl.w	r0, r1, r2
 8000712:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000716:	40d9      	lsrs	r1, r3
 8000718:	4330      	orrs	r0, r6
 800071a:	0c03      	lsrs	r3, r0, #16
 800071c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000720:	fa1f f887 	uxth.w	r8, r7
 8000724:	fb0e 1116 	mls	r1, lr, r6, r1
 8000728:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800072c:	fb06 f108 	mul.w	r1, r6, r8
 8000730:	4299      	cmp	r1, r3
 8000732:	fa04 f402 	lsl.w	r4, r4, r2
 8000736:	d909      	bls.n	800074c <__udivmoddi4+0x19c>
 8000738:	18fb      	adds	r3, r7, r3
 800073a:	f106 3cff 	add.w	ip, r6, #4294967295
 800073e:	f080 808d 	bcs.w	800085c <__udivmoddi4+0x2ac>
 8000742:	4299      	cmp	r1, r3
 8000744:	f240 808a 	bls.w	800085c <__udivmoddi4+0x2ac>
 8000748:	3e02      	subs	r6, #2
 800074a:	443b      	add	r3, r7
 800074c:	1a5b      	subs	r3, r3, r1
 800074e:	b281      	uxth	r1, r0
 8000750:	fbb3 f0fe 	udiv	r0, r3, lr
 8000754:	fb0e 3310 	mls	r3, lr, r0, r3
 8000758:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800075c:	fb00 f308 	mul.w	r3, r0, r8
 8000760:	428b      	cmp	r3, r1
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0x1c4>
 8000764:	1879      	adds	r1, r7, r1
 8000766:	f100 3cff 	add.w	ip, r0, #4294967295
 800076a:	d273      	bcs.n	8000854 <__udivmoddi4+0x2a4>
 800076c:	428b      	cmp	r3, r1
 800076e:	d971      	bls.n	8000854 <__udivmoddi4+0x2a4>
 8000770:	3802      	subs	r0, #2
 8000772:	4439      	add	r1, r7
 8000774:	1acb      	subs	r3, r1, r3
 8000776:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800077a:	e778      	b.n	800066e <__udivmoddi4+0xbe>
 800077c:	f1c6 0c20 	rsb	ip, r6, #32
 8000780:	fa03 f406 	lsl.w	r4, r3, r6
 8000784:	fa22 f30c 	lsr.w	r3, r2, ip
 8000788:	431c      	orrs	r4, r3
 800078a:	fa20 f70c 	lsr.w	r7, r0, ip
 800078e:	fa01 f306 	lsl.w	r3, r1, r6
 8000792:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000796:	fa21 f10c 	lsr.w	r1, r1, ip
 800079a:	431f      	orrs	r7, r3
 800079c:	0c3b      	lsrs	r3, r7, #16
 800079e:	fbb1 f9fe 	udiv	r9, r1, lr
 80007a2:	fa1f f884 	uxth.w	r8, r4
 80007a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80007aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80007ae:	fb09 fa08 	mul.w	sl, r9, r8
 80007b2:	458a      	cmp	sl, r1
 80007b4:	fa02 f206 	lsl.w	r2, r2, r6
 80007b8:	fa00 f306 	lsl.w	r3, r0, r6
 80007bc:	d908      	bls.n	80007d0 <__udivmoddi4+0x220>
 80007be:	1861      	adds	r1, r4, r1
 80007c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80007c4:	d248      	bcs.n	8000858 <__udivmoddi4+0x2a8>
 80007c6:	458a      	cmp	sl, r1
 80007c8:	d946      	bls.n	8000858 <__udivmoddi4+0x2a8>
 80007ca:	f1a9 0902 	sub.w	r9, r9, #2
 80007ce:	4421      	add	r1, r4
 80007d0:	eba1 010a 	sub.w	r1, r1, sl
 80007d4:	b2bf      	uxth	r7, r7
 80007d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80007da:	fb0e 1110 	mls	r1, lr, r0, r1
 80007de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80007e2:	fb00 f808 	mul.w	r8, r0, r8
 80007e6:	45b8      	cmp	r8, r7
 80007e8:	d907      	bls.n	80007fa <__udivmoddi4+0x24a>
 80007ea:	19e7      	adds	r7, r4, r7
 80007ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80007f0:	d22e      	bcs.n	8000850 <__udivmoddi4+0x2a0>
 80007f2:	45b8      	cmp	r8, r7
 80007f4:	d92c      	bls.n	8000850 <__udivmoddi4+0x2a0>
 80007f6:	3802      	subs	r0, #2
 80007f8:	4427      	add	r7, r4
 80007fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007fe:	eba7 0708 	sub.w	r7, r7, r8
 8000802:	fba0 8902 	umull	r8, r9, r0, r2
 8000806:	454f      	cmp	r7, r9
 8000808:	46c6      	mov	lr, r8
 800080a:	4649      	mov	r1, r9
 800080c:	d31a      	bcc.n	8000844 <__udivmoddi4+0x294>
 800080e:	d017      	beq.n	8000840 <__udivmoddi4+0x290>
 8000810:	b15d      	cbz	r5, 800082a <__udivmoddi4+0x27a>
 8000812:	ebb3 020e 	subs.w	r2, r3, lr
 8000816:	eb67 0701 	sbc.w	r7, r7, r1
 800081a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800081e:	40f2      	lsrs	r2, r6
 8000820:	ea4c 0202 	orr.w	r2, ip, r2
 8000824:	40f7      	lsrs	r7, r6
 8000826:	e9c5 2700 	strd	r2, r7, [r5]
 800082a:	2600      	movs	r6, #0
 800082c:	4631      	mov	r1, r6
 800082e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000832:	462e      	mov	r6, r5
 8000834:	4628      	mov	r0, r5
 8000836:	e70b      	b.n	8000650 <__udivmoddi4+0xa0>
 8000838:	4606      	mov	r6, r0
 800083a:	e6e9      	b.n	8000610 <__udivmoddi4+0x60>
 800083c:	4618      	mov	r0, r3
 800083e:	e6fd      	b.n	800063c <__udivmoddi4+0x8c>
 8000840:	4543      	cmp	r3, r8
 8000842:	d2e5      	bcs.n	8000810 <__udivmoddi4+0x260>
 8000844:	ebb8 0e02 	subs.w	lr, r8, r2
 8000848:	eb69 0104 	sbc.w	r1, r9, r4
 800084c:	3801      	subs	r0, #1
 800084e:	e7df      	b.n	8000810 <__udivmoddi4+0x260>
 8000850:	4608      	mov	r0, r1
 8000852:	e7d2      	b.n	80007fa <__udivmoddi4+0x24a>
 8000854:	4660      	mov	r0, ip
 8000856:	e78d      	b.n	8000774 <__udivmoddi4+0x1c4>
 8000858:	4681      	mov	r9, r0
 800085a:	e7b9      	b.n	80007d0 <__udivmoddi4+0x220>
 800085c:	4666      	mov	r6, ip
 800085e:	e775      	b.n	800074c <__udivmoddi4+0x19c>
 8000860:	4630      	mov	r0, r6
 8000862:	e74a      	b.n	80006fa <__udivmoddi4+0x14a>
 8000864:	f1ac 0c02 	sub.w	ip, ip, #2
 8000868:	4439      	add	r1, r7
 800086a:	e713      	b.n	8000694 <__udivmoddi4+0xe4>
 800086c:	3802      	subs	r0, #2
 800086e:	443c      	add	r4, r7
 8000870:	e724      	b.n	80006bc <__udivmoddi4+0x10c>
 8000872:	bf00      	nop

08000874 <__aeabi_idiv0>:
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop

08000878 <arr_filler_and_transmit>:
#define SLAVE_ADDRESS 0x80
extern I2C_HandleTypeDef hi2c1;

/*  -------------------------Library code begin--------------------------------------*/

void arr_filler_and_transmit(I2C_HandleTypeDef *hi2c,uint8_t TxBuffer[],uint16_t arr[]){
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af02      	add	r7, sp, #8
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]

	  TxBuffer[0]=0xFA;
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	22fa      	movs	r2, #250	; 0xfa
 8000888:	701a      	strb	r2, [r3, #0]
	  for(uint8_t i=0;i<4;i++){
 800088a:	2300      	movs	r3, #0
 800088c:	75fb      	strb	r3, [r7, #23]
 800088e:	e01a      	b.n	80008c6 <arr_filler_and_transmit+0x4e>
		  TxBuffer[1]=arr[i];
 8000890:	7dfb      	ldrb	r3, [r7, #23]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	881a      	ldrh	r2, [r3, #0]
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	3301      	adds	r3, #1
 800089e:	b2d2      	uxtb	r2, r2
 80008a0:	701a      	strb	r2, [r3, #0]
		  HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDRESS, (uint8_t *)TxBuffer, 2, WAITTIME);
 80008a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	2302      	movs	r3, #2
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f001 f97c 	bl	8001bac <HAL_I2C_Master_Transmit>
		  TxBuffer[0]++;
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	3301      	adds	r3, #1
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	701a      	strb	r2, [r3, #0]
	  for(uint8_t i=0;i<4;i++){
 80008c0:	7dfb      	ldrb	r3, [r7, #23]
 80008c2:	3301      	adds	r3, #1
 80008c4:	75fb      	strb	r3, [r7, #23]
 80008c6:	7dfb      	ldrb	r3, [r7, #23]
 80008c8:	2b03      	cmp	r3, #3
 80008ca:	d9e1      	bls.n	8000890 <arr_filler_and_transmit+0x18>
       }
}
 80008cc:	bf00      	nop
 80008ce:	bf00      	nop
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <all_led_off>:

void all_led_off(I2C_HandleTypeDef *hi2c,uint8_t TxBuffer[]){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]

	  uint16_t arr_led_off[4]={0x00,0x00,0x00,0x10}; //all led off
 80008e2:	2300      	movs	r3, #0
 80008e4:	813b      	strh	r3, [r7, #8]
 80008e6:	2300      	movs	r3, #0
 80008e8:	817b      	strh	r3, [r7, #10]
 80008ea:	2300      	movs	r3, #0
 80008ec:	81bb      	strh	r3, [r7, #12]
 80008ee:	2310      	movs	r3, #16
 80008f0:	81fb      	strh	r3, [r7, #14]
	  arr_filler_and_transmit(&hi2c1,TxBuffer, arr_led_off);
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	461a      	mov	r2, r3
 80008f8:	6839      	ldr	r1, [r7, #0]
 80008fa:	4803      	ldr	r0, [pc, #12]	; (8000908 <all_led_off+0x30>)
 80008fc:	f7ff ffbc 	bl	8000878 <arr_filler_and_transmit>
}
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000078 	.word	0x20000078

0800090c <all_led_on>:


void all_led_on(I2C_HandleTypeDef *hi2c,uint8_t TxBuffer[]){
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]

	  //uint8_t arr_led_on[4]={0x00,0x10,0x00,0x00};//all led on
	  //4096 to bin 0b00010000(ALL_LED_ON_H) 00000000(ALL_LED_ON_L) => {0x00(ALL_LED_ON_L),0x10(ALL_LED_ON_H)} first  two elements
	  //   0 to bin 0b00000000(ALL_LED_ON_H) 00000000(ALL_LED_ON_L) => {0x00(ALL_LED_ON_L),0x00(ALL_LED_ON_H)} second two elements

	  uint16_t arr_led_on[4]={0x00,0x10,0x00,0x00};//all led on
 8000916:	2300      	movs	r3, #0
 8000918:	813b      	strh	r3, [r7, #8]
 800091a:	2310      	movs	r3, #16
 800091c:	817b      	strh	r3, [r7, #10]
 800091e:	2300      	movs	r3, #0
 8000920:	81bb      	strh	r3, [r7, #12]
 8000922:	2300      	movs	r3, #0
 8000924:	81fb      	strh	r3, [r7, #14]
	  arr_filler_and_transmit(&hi2c1,TxBuffer, arr_led_on);
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	461a      	mov	r2, r3
 800092c:	6839      	ldr	r1, [r7, #0]
 800092e:	4803      	ldr	r0, [pc, #12]	; (800093c <all_led_on+0x30>)
 8000930:	f7ff ffa2 	bl	8000878 <arr_filler_and_transmit>
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000078 	.word	0x20000078

08000940 <pwm_on>:

void pwm_on(I2C_HandleTypeDef *hi2c,uint8_t TxBuffer[]){
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]

	  //  1000 to bin 0b 00000011 11101000 => 0xE8 0x3
	  //  2000 to bin 0b 00000111 11010000 => 0xD0,0x7

	  uint16_t arr_pwm_on[4]={0xE8,0x3,0xD0,0x7};   //some kind of PWM signal
 800094a:	4a09      	ldr	r2, [pc, #36]	; (8000970 <pwm_on+0x30>)
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000954:	e883 0003 	stmia.w	r3, {r0, r1}
	  arr_filler_and_transmit(&hi2c1,TxBuffer, arr_pwm_on);
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	461a      	mov	r2, r3
 800095e:	6839      	ldr	r1, [r7, #0]
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <pwm_on+0x34>)
 8000962:	f7ff ff89 	bl	8000878 <arr_filler_and_transmit>
}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	0800394c 	.word	0x0800394c
 8000974:	20000078 	.word	0x20000078

08000978 <change_duty_cycle>:


void change_duty_cycle(uint8_t newDutyCycle,I2C_HandleTypeDef *hi2c,uint8_t TxBuffer[]){
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	73fb      	strb	r3, [r7, #15]

	 uint16_t setOn = newDutyCycle == 100 ? 4096 : 0;
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	2b64      	cmp	r3, #100	; 0x64
 800098a:	d102      	bne.n	8000992 <change_duty_cycle+0x1a>
 800098c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000990:	e000      	b.n	8000994 <change_duty_cycle+0x1c>
 8000992:	2300      	movs	r3, #0
 8000994:	83fb      	strh	r3, [r7, #30]
	 uint16_t setOff = newDutyCycle == 100 ? 0 : round(((float)newDutyCycle / 100) * 4096);
 8000996:	7bfb      	ldrb	r3, [r7, #15]
 8000998:	2b64      	cmp	r3, #100	; 0x64
 800099a:	d01f      	beq.n	80009dc <change_duty_cycle+0x64>
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	ee07 3a90 	vmov	s15, r3
 80009a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009a6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000a10 <change_duty_cycle+0x98>
 80009aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009ae:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000a14 <change_duty_cycle+0x9c>
 80009b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009b6:	ee17 0a90 	vmov	r0, s15
 80009ba:	f7ff fd69 	bl	8000490 <__aeabi_f2d>
 80009be:	4602      	mov	r2, r0
 80009c0:	460b      	mov	r3, r1
 80009c2:	ec43 2b10 	vmov	d0, r2, r3
 80009c6:	f002 ff6f 	bl	80038a8 <round>
 80009ca:	ec53 2b10 	vmov	r2, r3, d0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4619      	mov	r1, r3
 80009d2:	f7ff fdb5 	bl	8000540 <__aeabi_d2uiz>
 80009d6:	4603      	mov	r3, r0
 80009d8:	b29b      	uxth	r3, r3
 80009da:	e000      	b.n	80009de <change_duty_cycle+0x66>
 80009dc:	2300      	movs	r3, #0
 80009de:	83bb      	strh	r3, [r7, #28]
	 uint16_t arr_duty_cycle[4] = {setOn, setOn >> 8u, setOff, setOff >> 8u};
 80009e0:	8bfb      	ldrh	r3, [r7, #30]
 80009e2:	82bb      	strh	r3, [r7, #20]
 80009e4:	8bfb      	ldrh	r3, [r7, #30]
 80009e6:	0a1b      	lsrs	r3, r3, #8
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	82fb      	strh	r3, [r7, #22]
 80009ec:	8bbb      	ldrh	r3, [r7, #28]
 80009ee:	833b      	strh	r3, [r7, #24]
 80009f0:	8bbb      	ldrh	r3, [r7, #28]
 80009f2:	0a1b      	lsrs	r3, r3, #8
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	837b      	strh	r3, [r7, #26]
	 arr_filler_and_transmit(&hi2c1,TxBuffer, arr_duty_cycle);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	461a      	mov	r2, r3
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <change_duty_cycle+0xa0>)
 8000a02:	f7ff ff39 	bl	8000878 <arr_filler_and_transmit>
}
 8000a06:	bf00      	nop
 8000a08:	3720      	adds	r7, #32
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	42c80000 	.word	0x42c80000
 8000a14:	45800000 	.word	0x45800000
 8000a18:	20000078 	.word	0x20000078

08000a1c <bit_filler_and_transmit>:

void bit_filler_and_transmit(I2C_HandleTypeDef *hi2c, uint8_t Reg, uint32_t Data)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	460b      	mov	r3, r1
 8000a26:	607a      	str	r2, [r7, #4]
 8000a28:	72fb      	strb	r3, [r7, #11]
	uint8_t TxBuffer[2];
	TxBuffer[0] = Reg;
 8000a2a:	7afb      	ldrb	r3, [r7, #11]
 8000a2c:	753b      	strb	r3, [r7, #20]
	TxBuffer[1] = Data;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDRESS, (uint8_t*) &TxBuffer, 2, 1000);
 8000a34:	f107 0214 	add.w	r2, r7, #20
 8000a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2302      	movs	r3, #2
 8000a40:	2180      	movs	r1, #128	; 0x80
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f001 f8b2 	bl	8001bac <HAL_I2C_Master_Transmit>
}
 8000a48:	bf00      	nop
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <sleep_mode>:

void sleep_mode(I2C_HandleTypeDef *hi2c, uint8_t flag)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	70fb      	strb	r3, [r7, #3]
	uint8_t MODE0_reg = 0x00;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	73fb      	strb	r3, [r7, #15]
	if (flag == 1)
 8000a60:	78fb      	ldrb	r3, [r7, #3]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d106      	bne.n	8000a74 <sleep_mode+0x24>
	{
		bit_filler_and_transmit(hi2c, MODE0_reg, 0x10);  // enable Sleep mode: set Sleep bit D4 in 1
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	2210      	movs	r2, #16
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff ffd5 	bl	8000a1c <bit_filler_and_transmit>
	else
	{
		HAL_Delay(10);
		bit_filler_and_transmit(hi2c, MODE0_reg, 0x01); //disable Sleep mode: set Sleep bit D4 in 0
	}
}
 8000a72:	e008      	b.n	8000a86 <sleep_mode+0x36>
		HAL_Delay(10);
 8000a74:	200a      	movs	r0, #10
 8000a76:	f000 fc95 	bl	80013a4 <HAL_Delay>
		bit_filler_and_transmit(hi2c, MODE0_reg, 0x01); //disable Sleep mode: set Sleep bit D4 in 0
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4619      	mov	r1, r3
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff ffcb 	bl	8000a1c <bit_filler_and_transmit>
}
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <Round_Int_To>:

uint32_t Round_Int_To(uint32_t arg, uint32_t divider)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	6039      	str	r1, [r7, #0]
	if (arg % divider < (divider / 2))
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000aa0:	6839      	ldr	r1, [r7, #0]
 8000aa2:	fb01 f202 	mul.w	r2, r1, r2
 8000aa6:	1a9a      	subs	r2, r3, r2
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	085b      	lsrs	r3, r3, #1
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d20a      	bcs.n	8000ac6 <Round_Int_To+0x38>
		return arg - arg % divider;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	683a      	ldr	r2, [r7, #0]
 8000ab4:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ab8:	6839      	ldr	r1, [r7, #0]
 8000aba:	fb01 f202 	mul.w	r2, r1, r2
 8000abe:	1a9b      	subs	r3, r3, r2
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	e019      	b.n	8000afa <Round_Int_To+0x6c>
	else if (arg % divider >= (divider / 2))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ace:	6839      	ldr	r1, [r7, #0]
 8000ad0:	fb01 f202 	mul.w	r2, r1, r2
 8000ad4:	1a9a      	subs	r2, r3, r2
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	085b      	lsrs	r3, r3, #1
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d30c      	bcc.n	8000af8 <Round_Int_To+0x6a>
		return arg - arg % divider + divider;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ae6:	6839      	ldr	r1, [r7, #0]
 8000ae8:	fb01 f202 	mul.w	r2, r1, r2
 8000aec:	1a9b      	subs	r3, r3, r2
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	1ad2      	subs	r2, r2, r3
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	4413      	add	r3, r2
 8000af6:	e000      	b.n	8000afa <Round_Int_To+0x6c>
	else
		return arg;
 8000af8:	687b      	ldr	r3, [r7, #4]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <PCA9685_Frequency_Set>:

void PCA9685_Frequency_Set(I2C_HandleTypeDef *hi2c, uint16_t frequency)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b09a      	sub	sp, #104	; 0x68
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	807b      	strh	r3, [r7, #2]

	uint32_t prescale = Round_Int_To((25000000 / (frequency << 12) * 10), 10) / 10 - 1; // = 25MHz /(4096 * frequency) -1, where 2500000 - 25 MHz internal oscillator clock frequency.
 8000b14:	887b      	ldrh	r3, [r7, #2]
 8000b16:	031b      	lsls	r3, r3, #12
 8000b18:	4a46      	ldr	r2, [pc, #280]	; (8000c34 <PCA9685_Frequency_Set+0x12c>)
 8000b1a:	fb92 f2f3 	sdiv	r2, r2, r3
 8000b1e:	4613      	mov	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	210a      	movs	r1, #10
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ffb0 	bl	8000a8e <Round_Int_To>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	4a41      	ldr	r2, [pc, #260]	; (8000c38 <PCA9685_Frequency_Set+0x130>)
 8000b32:	fba2 2303 	umull	r2, r3, r2, r3
 8000b36:	08db      	lsrs	r3, r3, #3
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	65bb      	str	r3, [r7, #88]	; 0x58
	prescale = (frequency == 0) ? 0x1E : prescale; //set default 200Hz if frequency argument is 0
 8000b3c:	887b      	ldrh	r3, [r7, #2]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <PCA9685_Frequency_Set+0x3e>
 8000b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b44:	e000      	b.n	8000b48 <PCA9685_Frequency_Set+0x40>
 8000b46:	231e      	movs	r3, #30
 8000b48:	65bb      	str	r3, [r7, #88]	; 0x58
	prescale = (prescale > 0xFF) ? 0xFF : prescale;
 8000b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b4c:	2bff      	cmp	r3, #255	; 0xff
 8000b4e:	bf28      	it	cs
 8000b50:	23ff      	movcs	r3, #255	; 0xff
 8000b52:	65bb      	str	r3, [r7, #88]	; 0x58
	prescale = (prescale < 0x03) ? 0x03 : prescale;
 8000b54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	bf38      	it	cc
 8000b5a:	2303      	movcc	r3, #3
 8000b5c:	65bb      	str	r3, [r7, #88]	; 0x58

	uint8_t TxBuffer[2];
	TxBuffer[0] = MODE0_reg;
 8000b5e:	4b37      	ldr	r3, [pc, #220]	; (8000c3c <PCA9685_Frequency_Set+0x134>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	TxBuffer[1] = 0x21; // enable AI
 8000b66:	2321      	movs	r3, #33	; 0x21
 8000b68:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDRESS , (uint8_t*) &TxBuffer, 2, 10);
 8000b6c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000b70:	230a      	movs	r3, #10
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	2302      	movs	r3, #2
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f001 f817 	bl	8001bac <HAL_I2C_Master_Transmit>

	uint8_t Buffer[70] ={ 0 };
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	f107 0310 	add.w	r3, r7, #16
 8000b86:	2242      	movs	r2, #66	; 0x42
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 fe84 	bl	8003898 <memset>

	HAL_I2C_Master_Receive(hi2c, SLAVE_ADDRESS , (uint8_t*) &Buffer, 70, 100); //read and store all registers from the device into an array
 8000b90:	f107 020c 	add.w	r2, r7, #12
 8000b94:	2364      	movs	r3, #100	; 0x64
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	2346      	movs	r3, #70	; 0x46
 8000b9a:	2180      	movs	r1, #128	; 0x80
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f001 f903 	bl	8001da8 <HAL_I2C_Master_Receive>
	for (int i = sizeof(Buffer) - 1; i > 0; i--)
 8000ba2:	2345      	movs	r3, #69	; 0x45
 8000ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000ba6:	e00f      	b.n	8000bc8 <PCA9685_Frequency_Set+0xc0>
		Buffer[i] = Buffer[i - 2];
 8000ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000baa:	3b02      	subs	r3, #2
 8000bac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000bb0:	4413      	add	r3, r2
 8000bb2:	f813 1c54 	ldrb.w	r1, [r3, #-84]
 8000bb6:	f107 020c 	add.w	r2, r7, #12
 8000bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bbc:	4413      	add	r3, r2
 8000bbe:	460a      	mov	r2, r1
 8000bc0:	701a      	strb	r2, [r3, #0]
	for (int i = sizeof(Buffer) - 1; i > 0; i--)
 8000bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000bc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	dcec      	bgt.n	8000ba8 <PCA9685_Frequency_Set+0xa0>
	Buffer[0] = MODE0_reg;
 8000bce:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <PCA9685_Frequency_Set+0x134>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	733b      	strb	r3, [r7, #12]
	Buffer[1] = 0x21;
 8000bd4:	2321      	movs	r3, #33	; 0x21
 8000bd6:	737b      	strb	r3, [r7, #13]

	TxBuffer[0] = MODE0_reg;
 8000bd8:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <PCA9685_Frequency_Set+0x134>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	TxBuffer[1] = 0x10; // enable Sleep mode to change PRE_SCAL: set Sleep bit D4 in 1.
 8000be0:	2310      	movs	r3, #16
 8000be2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDRESS , (uint8_t*) &TxBuffer, 2, 10);
 8000be6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000bea:	230a      	movs	r3, #10
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2302      	movs	r3, #2
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f000 ffda 	bl	8001bac <HAL_I2C_Master_Transmit>

	TxBuffer[0] = PRE_SCALE_reg;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <PCA9685_Frequency_Set+0x138>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	TxBuffer[1] = prescale; //set frequency
 8000c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDRESS , (uint8_t*) &TxBuffer, 2, 10); //   load all settings from the array..
 8000c08:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000c0c:	230a      	movs	r3, #10
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	2302      	movs	r3, #2
 8000c12:	2180      	movs	r1, #128	; 0x80
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f000 ffc9 	bl	8001bac <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDRESS , (uint8_t*) &Buffer, 70, 100); // ..into the device registers. Disable sleep mode, start with normal mode.
 8000c1a:	f107 020c 	add.w	r2, r7, #12
 8000c1e:	2364      	movs	r3, #100	; 0x64
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	2346      	movs	r3, #70	; 0x46
 8000c24:	2180      	movs	r1, #128	; 0x80
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 ffc0 	bl	8001bac <HAL_I2C_Master_Transmit>
}
 8000c2c:	bf00      	nop
 8000c2e:	3760      	adds	r7, #96	; 0x60
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	017d7840 	.word	0x017d7840
 8000c38:	cccccccd 	.word	0xcccccccd
 8000c3c:	20000031 	.word	0x20000031
 8000c40:	20000002 	.word	0x20000002

08000c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4a:	f000 fb39 	bl	80012c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4e:	f000 f91b 	bl	8000e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c52:	f000 f9cf 	bl	8000ff4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c56:	f000 f975 	bl	8000f44 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000c5a:	f000 f9a1 	bl	8000fa0 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(10);
 8000c5e:	200a      	movs	r0, #10
 8000c60:	f000 fba0 	bl	80013a4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);   //turn on of the PB7 (output enable signal)
 8000c64:	2200      	movs	r2, #0
 8000c66:	2180      	movs	r1, #128	; 0x80
 8000c68:	4874      	ldr	r0, [pc, #464]	; (8000e3c <main+0x1f8>)
 8000c6a:	f000 fe41 	bl	80018f0 <HAL_GPIO_WritePin>

  while (1)
  {
	   	  uint8_t rcvBuf;
	  	  HAL_StatusTypeDef result;
	  	  result = HAL_UART_Receive(&huart3, &rcvBuf, 1, 1000);
 8000c6e:	1db9      	adds	r1, r7, #6
 8000c70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c74:	2201      	movs	r2, #1
 8000c76:	4872      	ldr	r0, [pc, #456]	; (8000e40 <main+0x1fc>)
 8000c78:	f002 fb11 	bl	800329e <HAL_UART_Receive>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	71fb      	strb	r3, [r7, #7]

	  	  if(counter_for_menu){
 8000c80:	4b70      	ldr	r3, [pc, #448]	; (8000e44 <main+0x200>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d013      	beq.n	8000cb0 <main+0x6c>
	  	  HAL_UART_Transmit(&huart3, (uint8_t *)"\033[2J", strlen("\033[2J"),10);  //Putty screen clear
 8000c88:	230a      	movs	r3, #10
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	496e      	ldr	r1, [pc, #440]	; (8000e48 <main+0x204>)
 8000c8e:	486c      	ldr	r0, [pc, #432]	; (8000e40 <main+0x1fc>)
 8000c90:	f002 fa73 	bl	800317a <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\nMenu:\r\npress 0 for all_led_off\r\npress 1 for all_led_on\r\npress 2 for PWM_on"
 8000c94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c98:	f240 1209 	movw	r2, #265	; 0x109
 8000c9c:	496b      	ldr	r1, [pc, #428]	; (8000e4c <main+0x208>)
 8000c9e:	4868      	ldr	r0, [pc, #416]	; (8000e40 <main+0x1fc>)
 8000ca0:	f002 fa6b 	bl	800317a <HAL_UART_Transmit>
	  			  "\r\npress 3 for duty cycle increase by 10\r\npress 4 for duty cycle decrease by 10\r\npress 5 for sleep mode on/off"
	  			  "\r\npress 6 for frequency increase by 100\r\npress 7 for frequency decrease by 100\r\n",
	  			  strlen("\r\nMenu:\r\npress 0 for all_led_off\r\npress 1 for all_led_on\r\npress 2 for PWM_on"
	  		  			  "\r\npress 3 for duty cycle increase by 10\r\npress 4 for duty cycle decrease by 10\r\npress 5 for sleep mode on/off"
	  		  			  "\r\npress 6 for frequency increase by 100\r\npress 7 for frequency decrease by 100\r\n"),1000);
	  	  counter_for_menu--;
 8000ca4:	4b67      	ldr	r3, [pc, #412]	; (8000e44 <main+0x200>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b65      	ldr	r3, [pc, #404]	; (8000e44 <main+0x200>)
 8000cae:	701a      	strb	r2, [r3, #0]
	  	  }

  	  	  if (result == HAL_OK){
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 80c0 	bne.w	8000e38 <main+0x1f4>

	  		  switch(rcvBuf){
 8000cb8:	79bb      	ldrb	r3, [r7, #6]
 8000cba:	3b30      	subs	r3, #48	; 0x30
 8000cbc:	2b07      	cmp	r3, #7
 8000cbe:	f200 80b4 	bhi.w	8000e2a <main+0x1e6>
 8000cc2:	a201      	add	r2, pc, #4	; (adr r2, 8000cc8 <main+0x84>)
 8000cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc8:	08000ce9 	.word	0x08000ce9
 8000ccc:	08000cff 	.word	0x08000cff
 8000cd0:	08000d15 	.word	0x08000d15
 8000cd4:	08000d2b 	.word	0x08000d2b
 8000cd8:	08000d5f 	.word	0x08000d5f
 8000cdc:	08000d93 	.word	0x08000d93
 8000ce0:	08000dc1 	.word	0x08000dc1
 8000ce4:	08000df9 	.word	0x08000df9

	  			  case '0':
	  				 all_led_off(&hi2c1,TxBuffer);
 8000ce8:	4959      	ldr	r1, [pc, #356]	; (8000e50 <main+0x20c>)
 8000cea:	485a      	ldr	r0, [pc, #360]	; (8000e54 <main+0x210>)
 8000cec:	f7ff fdf4 	bl	80008d8 <all_led_off>
	  				  HAL_UART_Transmit(&huart3, (uint8_t *)"ALL LED OFF\r\n", strlen("ALL LED OFF\r\n"),10);
 8000cf0:	230a      	movs	r3, #10
 8000cf2:	220d      	movs	r2, #13
 8000cf4:	4958      	ldr	r1, [pc, #352]	; (8000e58 <main+0x214>)
 8000cf6:	4852      	ldr	r0, [pc, #328]	; (8000e40 <main+0x1fc>)
 8000cf8:	f002 fa3f 	bl	800317a <HAL_UART_Transmit>
	  				  break;
 8000cfc:	e09d      	b.n	8000e3a <main+0x1f6>

	  			  case '1':
	  				  all_led_on(&hi2c1,TxBuffer);
 8000cfe:	4954      	ldr	r1, [pc, #336]	; (8000e50 <main+0x20c>)
 8000d00:	4854      	ldr	r0, [pc, #336]	; (8000e54 <main+0x210>)
 8000d02:	f7ff fe03 	bl	800090c <all_led_on>
	  				  HAL_UART_Transmit(&huart3, (uint8_t *)"ALL LED ON\r\n", strlen("ALL LED ON\r\n"),10);
 8000d06:	230a      	movs	r3, #10
 8000d08:	220c      	movs	r2, #12
 8000d0a:	4954      	ldr	r1, [pc, #336]	; (8000e5c <main+0x218>)
 8000d0c:	484c      	ldr	r0, [pc, #304]	; (8000e40 <main+0x1fc>)
 8000d0e:	f002 fa34 	bl	800317a <HAL_UART_Transmit>
	  				  break;
 8000d12:	e092      	b.n	8000e3a <main+0x1f6>

	  			  case '2':
	  				  pwm_on(&hi2c1,TxBuffer);
 8000d14:	494e      	ldr	r1, [pc, #312]	; (8000e50 <main+0x20c>)
 8000d16:	484f      	ldr	r0, [pc, #316]	; (8000e54 <main+0x210>)
 8000d18:	f7ff fe12 	bl	8000940 <pwm_on>
	  				  HAL_UART_Transmit(&huart3, (uint8_t *)"PWM ON\r\n", strlen("PWM ON\r\n"),10);
 8000d1c:	230a      	movs	r3, #10
 8000d1e:	2208      	movs	r2, #8
 8000d20:	494f      	ldr	r1, [pc, #316]	; (8000e60 <main+0x21c>)
 8000d22:	4847      	ldr	r0, [pc, #284]	; (8000e40 <main+0x1fc>)
 8000d24:	f002 fa29 	bl	800317a <HAL_UART_Transmit>
	  				  break;
 8000d28:	e087      	b.n	8000e3a <main+0x1f6>

	  			  case '3':
	  				  duty_cycle = (duty_cycle==100) ? 100 : (duty_cycle + 10);
 8000d2a:	4b4e      	ldr	r3, [pc, #312]	; (8000e64 <main+0x220>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b64      	cmp	r3, #100	; 0x64
 8000d30:	d004      	beq.n	8000d3c <main+0xf8>
 8000d32:	4b4c      	ldr	r3, [pc, #304]	; (8000e64 <main+0x220>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	330a      	adds	r3, #10
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	e000      	b.n	8000d3e <main+0xfa>
 8000d3c:	2364      	movs	r3, #100	; 0x64
 8000d3e:	4a49      	ldr	r2, [pc, #292]	; (8000e64 <main+0x220>)
 8000d40:	7013      	strb	r3, [r2, #0]
	  				  change_duty_cycle(duty_cycle,&hi2c1,TxBuffer);
 8000d42:	4b48      	ldr	r3, [pc, #288]	; (8000e64 <main+0x220>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	4a42      	ldr	r2, [pc, #264]	; (8000e50 <main+0x20c>)
 8000d48:	4942      	ldr	r1, [pc, #264]	; (8000e54 <main+0x210>)
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fe14 	bl	8000978 <change_duty_cycle>
					  HAL_UART_Transmit(&huart3, (uint8_t *)"duty cycle increase by 10\r\n", strlen("duty cycle increase by 10\r\n"),10);
 8000d50:	230a      	movs	r3, #10
 8000d52:	221b      	movs	r2, #27
 8000d54:	4944      	ldr	r1, [pc, #272]	; (8000e68 <main+0x224>)
 8000d56:	483a      	ldr	r0, [pc, #232]	; (8000e40 <main+0x1fc>)
 8000d58:	f002 fa0f 	bl	800317a <HAL_UART_Transmit>
					  break;
 8000d5c:	e06d      	b.n	8000e3a <main+0x1f6>

	  			  case '4':
	  				  duty_cycle=(duty_cycle==10) ? 10 : (duty_cycle-10);
 8000d5e:	4b41      	ldr	r3, [pc, #260]	; (8000e64 <main+0x220>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b0a      	cmp	r3, #10
 8000d64:	d004      	beq.n	8000d70 <main+0x12c>
 8000d66:	4b3f      	ldr	r3, [pc, #252]	; (8000e64 <main+0x220>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	3b0a      	subs	r3, #10
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	e000      	b.n	8000d72 <main+0x12e>
 8000d70:	230a      	movs	r3, #10
 8000d72:	4a3c      	ldr	r2, [pc, #240]	; (8000e64 <main+0x220>)
 8000d74:	7013      	strb	r3, [r2, #0]
	  				  change_duty_cycle(duty_cycle,&hi2c1,TxBuffer);
 8000d76:	4b3b      	ldr	r3, [pc, #236]	; (8000e64 <main+0x220>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	4a35      	ldr	r2, [pc, #212]	; (8000e50 <main+0x20c>)
 8000d7c:	4935      	ldr	r1, [pc, #212]	; (8000e54 <main+0x210>)
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fdfa 	bl	8000978 <change_duty_cycle>
					  HAL_UART_Transmit(&huart3, (uint8_t *)"duty cycle decrease by 10\r\n", strlen("duty cycle decrease by 10\r\n"),10);
 8000d84:	230a      	movs	r3, #10
 8000d86:	221b      	movs	r2, #27
 8000d88:	4938      	ldr	r1, [pc, #224]	; (8000e6c <main+0x228>)
 8000d8a:	482d      	ldr	r0, [pc, #180]	; (8000e40 <main+0x1fc>)
 8000d8c:	f002 f9f5 	bl	800317a <HAL_UART_Transmit>
					  break;
 8000d90:	e053      	b.n	8000e3a <main+0x1f6>

	  			  case '5':
	  				  sleep_bit = (sleep_bit == 1) ? 0 : 1;
 8000d92:	4b37      	ldr	r3, [pc, #220]	; (8000e70 <main+0x22c>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	bf14      	ite	ne
 8000d9a:	2301      	movne	r3, #1
 8000d9c:	2300      	moveq	r3, #0
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b33      	ldr	r3, [pc, #204]	; (8000e70 <main+0x22c>)
 8000da4:	701a      	strb	r2, [r3, #0]
	  				  sleep_mode(&hi2c1, sleep_bit);
 8000da6:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <main+0x22c>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	4619      	mov	r1, r3
 8000dac:	4829      	ldr	r0, [pc, #164]	; (8000e54 <main+0x210>)
 8000dae:	f7ff fe4f 	bl	8000a50 <sleep_mode>
	  				  HAL_UART_Transmit(&huart3, (uint8_t *)"Sleep mode\r\n", strlen("Sleep mode\r\n"),10);
 8000db2:	230a      	movs	r3, #10
 8000db4:	220c      	movs	r2, #12
 8000db6:	492f      	ldr	r1, [pc, #188]	; (8000e74 <main+0x230>)
 8000db8:	4821      	ldr	r0, [pc, #132]	; (8000e40 <main+0x1fc>)
 8000dba:	f002 f9de 	bl	800317a <HAL_UART_Transmit>
	  				  break;
 8000dbe:	e03c      	b.n	8000e3a <main+0x1f6>

	  			  case '6':
	  				 frequency=(frequency==1500) ? 1520 : (frequency+100);  //maximum PWM frequency is 1526 Hz
 8000dc0:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <main+0x234>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d004      	beq.n	8000dd6 <main+0x192>
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <main+0x234>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	3364      	adds	r3, #100	; 0x64
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	e001      	b.n	8000dda <main+0x196>
 8000dd6:	f44f 63be 	mov.w	r3, #1520	; 0x5f0
 8000dda:	4a27      	ldr	r2, [pc, #156]	; (8000e78 <main+0x234>)
 8000ddc:	8013      	strh	r3, [r2, #0]
	  				 PCA9685_Frequency_Set(&hi2c1,frequency);
 8000dde:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <main+0x234>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	4619      	mov	r1, r3
 8000de4:	481b      	ldr	r0, [pc, #108]	; (8000e54 <main+0x210>)
 8000de6:	f7ff fe8f 	bl	8000b08 <PCA9685_Frequency_Set>
	  				 HAL_UART_Transmit(&huart3, (uint8_t *)"Frequency increase\r\n", strlen("Frequency increase\r\n"),10);
 8000dea:	230a      	movs	r3, #10
 8000dec:	2214      	movs	r2, #20
 8000dee:	4923      	ldr	r1, [pc, #140]	; (8000e7c <main+0x238>)
 8000df0:	4813      	ldr	r0, [pc, #76]	; (8000e40 <main+0x1fc>)
 8000df2:	f002 f9c2 	bl	800317a <HAL_UART_Transmit>
	  				 break;
 8000df6:	e020      	b.n	8000e3a <main+0x1f6>

	  			  case '7':
	  				 frequency=(frequency==100) ? 100 : (frequency-100);  //minimum PWM frequency is 24 Hz
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <main+0x234>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	2b64      	cmp	r3, #100	; 0x64
 8000dfe:	d004      	beq.n	8000e0a <main+0x1c6>
 8000e00:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <main+0x234>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	3b64      	subs	r3, #100	; 0x64
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	e000      	b.n	8000e0c <main+0x1c8>
 8000e0a:	2364      	movs	r3, #100	; 0x64
 8000e0c:	4a1a      	ldr	r2, [pc, #104]	; (8000e78 <main+0x234>)
 8000e0e:	8013      	strh	r3, [r2, #0]
	  				 PCA9685_Frequency_Set(&hi2c1,frequency);
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <main+0x234>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	480f      	ldr	r0, [pc, #60]	; (8000e54 <main+0x210>)
 8000e18:	f7ff fe76 	bl	8000b08 <PCA9685_Frequency_Set>
	  				 HAL_UART_Transmit(&huart3, (uint8_t *)"Frequency decrease\r\n", strlen("Frequency decrease\r\n"),10);
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	2214      	movs	r2, #20
 8000e20:	4917      	ldr	r1, [pc, #92]	; (8000e80 <main+0x23c>)
 8000e22:	4807      	ldr	r0, [pc, #28]	; (8000e40 <main+0x1fc>)
 8000e24:	f002 f9a9 	bl	800317a <HAL_UART_Transmit>
	  				 break;
 8000e28:	e007      	b.n	8000e3a <main+0x1f6>

	  			  default:
	  				  HAL_UART_Transmit(&huart3, (uint8_t *)"Unexpected_command\r\n", strlen("Unexpected_command\r\n"),10);
 8000e2a:	230a      	movs	r3, #10
 8000e2c:	2214      	movs	r2, #20
 8000e2e:	4915      	ldr	r1, [pc, #84]	; (8000e84 <main+0x240>)
 8000e30:	4803      	ldr	r0, [pc, #12]	; (8000e40 <main+0x1fc>)
 8000e32:	f002 f9a2 	bl	800317a <HAL_UART_Transmit>
	  				  break;
 8000e36:	e000      	b.n	8000e3a <main+0x1f6>
	  		  }
	  	  }
 8000e38:	bf00      	nop
  {
 8000e3a:	e718      	b.n	8000c6e <main+0x2a>
 8000e3c:	40020400 	.word	0x40020400
 8000e40:	20000034 	.word	0x20000034
 8000e44:	20000000 	.word	0x20000000
 8000e48:	08003954 	.word	0x08003954
 8000e4c:	0800395c 	.word	0x0800395c
 8000e50:	200000cc 	.word	0x200000cc
 8000e54:	20000078 	.word	0x20000078
 8000e58:	08003a68 	.word	0x08003a68
 8000e5c:	08003a78 	.word	0x08003a78
 8000e60:	08003a88 	.word	0x08003a88
 8000e64:	20000001 	.word	0x20000001
 8000e68:	08003a94 	.word	0x08003a94
 8000e6c:	08003ab0 	.word	0x08003ab0
 8000e70:	20000030 	.word	0x20000030
 8000e74:	08003acc 	.word	0x08003acc
 8000e78:	20000004 	.word	0x20000004
 8000e7c:	08003adc 	.word	0x08003adc
 8000e80:	08003af4 	.word	0x08003af4
 8000e84:	08003b0c 	.word	0x08003b0c

08000e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b094      	sub	sp, #80	; 0x50
 8000e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8e:	f107 0320 	add.w	r3, r7, #32
 8000e92:	2230      	movs	r2, #48	; 0x30
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 fcfe 	bl	8003898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <SystemClock_Config+0xb4>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	4a21      	ldr	r2, [pc, #132]	; (8000f3c <SystemClock_Config+0xb4>)
 8000eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eba:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <SystemClock_Config+0xb4>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <SystemClock_Config+0xb8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a1b      	ldr	r2, [pc, #108]	; (8000f40 <SystemClock_Config+0xb8>)
 8000ed2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <SystemClock_Config+0xb8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eec:	2310      	movs	r3, #16
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef4:	f107 0320 	add.w	r3, r7, #32
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f001 fca9 	bl	8002850 <HAL_RCC_OscConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000f04:	f000 f8b8 	bl	8001078 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f08:	230f      	movs	r3, #15
 8000f0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 ff0c 	bl	8002d40 <HAL_RCC_ClockConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f2e:	f000 f8a3 	bl	8001078 <Error_Handler>
  }
}
 8000f32:	bf00      	nop
 8000f34:	3750      	adds	r7, #80	; 0x50
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40007000 	.word	0x40007000

08000f44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f4a:	4a13      	ldr	r2, [pc, #76]	; (8000f98 <MX_I2C1_Init+0x54>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f50:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <MX_I2C1_Init+0x58>)
 8000f52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_I2C1_Init+0x50>)
 8000f82:	f000 fccf 	bl	8001924 <HAL_I2C_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f8c:	f000 f874 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000078 	.word	0x20000078
 8000f98:	40005400 	.word	0x40005400
 8000f9c:	000186a0 	.word	0x000186a0

08000fa0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_USART3_UART_Init+0x4c>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <MX_USART3_UART_Init+0x50>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_USART3_UART_Init+0x4c>)
 8000fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_USART3_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_USART3_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_USART3_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_USART3_UART_Init+0x4c>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_USART3_UART_Init+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_USART3_UART_Init+0x4c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_USART3_UART_Init+0x4c>)
 8000fd8:	f002 f882 	bl	80030e0 <HAL_UART_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fe2:	f000 f849 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000034 	.word	0x20000034
 8000ff0:	40004800 	.word	0x40004800

08000ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <MX_GPIO_Init+0x7c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a17      	ldr	r2, [pc, #92]	; (8001070 <MX_GPIO_Init+0x7c>)
 8001014:	f043 0308 	orr.w	r3, r3, #8
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MX_GPIO_Init+0x7c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_GPIO_Init+0x7c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a10      	ldr	r2, [pc, #64]	; (8001070 <MX_GPIO_Init+0x7c>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_GPIO_Init+0x7c>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2180      	movs	r1, #128	; 0x80
 8001046:	480b      	ldr	r0, [pc, #44]	; (8001074 <MX_GPIO_Init+0x80>)
 8001048:	f000 fc52 	bl	80018f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4619      	mov	r1, r3
 8001062:	4804      	ldr	r0, [pc, #16]	; (8001074 <MX_GPIO_Init+0x80>)
 8001064:	f000 faa8 	bl	80015b8 <HAL_GPIO_Init>

}
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40023800 	.word	0x40023800
 8001074:	40020400 	.word	0x40020400

08001078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800107c:	b672      	cpsid	i
}
 800107e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001080:	e7fe      	b.n	8001080 <Error_Handler+0x8>
	...

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <HAL_MspInit+0x4c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a0f      	ldr	r2, [pc, #60]	; (80010d0 <HAL_MspInit+0x4c>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <HAL_MspInit+0x4c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	603b      	str	r3, [r7, #0]
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_MspInit+0x4c>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <HAL_MspInit+0x4c>)
 80010b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_MspInit+0x4c>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800

080010d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a19      	ldr	r2, [pc, #100]	; (8001158 <HAL_I2C_MspInit+0x84>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d12c      	bne.n	8001150 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <HAL_I2C_MspInit+0x88>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a17      	ldr	r2, [pc, #92]	; (800115c <HAL_I2C_MspInit+0x88>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_I2C_MspInit+0x88>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001112:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001118:	2312      	movs	r3, #18
 800111a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001124:	2304      	movs	r3, #4
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4619      	mov	r1, r3
 800112e:	480c      	ldr	r0, [pc, #48]	; (8001160 <HAL_I2C_MspInit+0x8c>)
 8001130:	f000 fa42 	bl	80015b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <HAL_I2C_MspInit+0x88>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	4a07      	ldr	r2, [pc, #28]	; (800115c <HAL_I2C_MspInit+0x88>)
 800113e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001142:	6413      	str	r3, [r2, #64]	; 0x40
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <HAL_I2C_MspInit+0x88>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001150:	bf00      	nop
 8001152:	3728      	adds	r7, #40	; 0x28
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40005400 	.word	0x40005400
 800115c:	40023800 	.word	0x40023800
 8001160:	40020400 	.word	0x40020400

08001164 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <HAL_UART_MspInit+0x84>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d12c      	bne.n	80011e0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <HAL_UART_MspInit+0x88>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a17      	ldr	r2, [pc, #92]	; (80011ec <HAL_UART_MspInit+0x88>)
 8001190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_UART_MspInit+0x88>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <HAL_UART_MspInit+0x88>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a10      	ldr	r2, [pc, #64]	; (80011ec <HAL_UART_MspInit+0x88>)
 80011ac:	f043 0308 	orr.w	r3, r3, #8
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_UART_MspInit+0x88>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011d0:	2307      	movs	r3, #7
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <HAL_UART_MspInit+0x8c>)
 80011dc:	f000 f9ec 	bl	80015b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011e0:	bf00      	nop
 80011e2:	3728      	adds	r7, #40	; 0x28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40004800 	.word	0x40004800
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020c00 	.word	0x40020c00

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler+0x4>

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001240:	f000 f890 	bl	8001364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <SystemInit+0x20>)
 800124e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <SystemInit+0x20>)
 8001254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800126c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001270:	480d      	ldr	r0, [pc, #52]	; (80012a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001272:	490e      	ldr	r1, [pc, #56]	; (80012ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001274:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001278:	e002      	b.n	8001280 <LoopCopyDataInit>

0800127a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800127c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127e:	3304      	adds	r3, #4

08001280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001284:	d3f9      	bcc.n	800127a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001286:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001288:	4c0b      	ldr	r4, [pc, #44]	; (80012b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800128c:	e001      	b.n	8001292 <LoopFillZerobss>

0800128e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001290:	3204      	adds	r2, #4

08001292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001294:	d3fb      	bcc.n	800128e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001296:	f7ff ffd7 	bl	8001248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800129a:	f002 fad9 	bl	8003850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129e:	f7ff fcd1 	bl	8000c44 <main>
  bx  lr    
 80012a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ac:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80012b0:	08003b4c 	.word	0x08003b4c
  ldr r2, =_sbss
 80012b4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80012b8:	200000d4 	.word	0x200000d4

080012bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC_IRQHandler>
	...

080012c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <HAL_Init+0x40>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0d      	ldr	r2, [pc, #52]	; (8001300 <HAL_Init+0x40>)
 80012ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_Init+0x40>)
 80012d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_Init+0x40>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_Init+0x40>)
 80012e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e8:	2003      	movs	r0, #3
 80012ea:	f000 f931 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ee:	200f      	movs	r0, #15
 80012f0:	f000 f808 	bl	8001304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f4:	f7ff fec6 	bl	8001084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023c00 	.word	0x40023c00

08001304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x54>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_InitTick+0x58>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131a:	fbb3 f3f1 	udiv	r3, r3, r1
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f93b 	bl	800159e <HAL_SYSTICK_Config>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e00e      	b.n	8001350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b0f      	cmp	r3, #15
 8001336:	d80a      	bhi.n	800134e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f000 f911 	bl	8001566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001344:	4a06      	ldr	r2, [pc, #24]	; (8001360 <HAL_InitTick+0x5c>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	e000      	b.n	8001350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000008 	.word	0x20000008
 800135c:	20000010 	.word	0x20000010
 8001360:	2000000c 	.word	0x2000000c

08001364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_IncTick+0x20>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_IncTick+0x24>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <HAL_IncTick+0x24>)
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000010 	.word	0x20000010
 8001388:	200000d0 	.word	0x200000d0

0800138c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return uwTick;
 8001390:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <HAL_GetTick+0x14>)
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	200000d0 	.word	0x200000d0

080013a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ac:	f7ff ffee 	bl	800138c <HAL_GetTick>
 80013b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013bc:	d005      	beq.n	80013ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_Delay+0x44>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4413      	add	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ca:	bf00      	nop
 80013cc:	f7ff ffde 	bl	800138c <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d8f7      	bhi.n	80013cc <HAL_Delay+0x28>
  {
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000010 	.word	0x20000010

080013ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001408:	4013      	ands	r3, r2
 800140a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141e:	4a04      	ldr	r2, [pc, #16]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	60d3      	str	r3, [r2, #12]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <__NVIC_GetPriorityGrouping+0x18>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	f003 0307 	and.w	r3, r3, #7
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
         );
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800151c:	d301      	bcc.n	8001522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151e:	2301      	movs	r3, #1
 8001520:	e00f      	b.n	8001542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <SysTick_Config+0x40>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152a:	210f      	movs	r1, #15
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f7ff ff8e 	bl	8001450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <SysTick_Config+0x40>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <SysTick_Config+0x40>)
 800153c:	2207      	movs	r2, #7
 800153e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	e000e010 	.word	0xe000e010

08001550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff47 	bl	80013ec <__NVIC_SetPriorityGrouping>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001578:	f7ff ff5c 	bl	8001434 <__NVIC_GetPriorityGrouping>
 800157c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff ff8e 	bl	80014a4 <NVIC_EncodePriority>
 8001588:	4602      	mov	r2, r0
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff5d 	bl	8001450 <__NVIC_SetPriority>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ffb0 	bl	800150c <SysTick_Config>
 80015ac:	4603      	mov	r3, r0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	e16b      	b.n	80018ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015d4:	2201      	movs	r2, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	f040 815a 	bne.w	80018a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d005      	beq.n	800160a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001606:	2b02      	cmp	r3, #2
 8001608:	d130      	bne.n	800166c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	2203      	movs	r2, #3
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001640:	2201      	movs	r2, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	f003 0201 	and.w	r2, r3, #1
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b03      	cmp	r3, #3
 8001676:	d017      	beq.n	80016a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d123      	bne.n	80016fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	08da      	lsrs	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3208      	adds	r2, #8
 80016bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	220f      	movs	r2, #15
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	08da      	lsrs	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3208      	adds	r2, #8
 80016f6:	69b9      	ldr	r1, [r7, #24]
 80016f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0203 	and.w	r2, r3, #3
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80b4 	beq.w	80018a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b60      	ldr	r3, [pc, #384]	; (80018c4 <HAL_GPIO_Init+0x30c>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	4a5f      	ldr	r2, [pc, #380]	; (80018c4 <HAL_GPIO_Init+0x30c>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174c:	6453      	str	r3, [r2, #68]	; 0x44
 800174e:	4b5d      	ldr	r3, [pc, #372]	; (80018c4 <HAL_GPIO_Init+0x30c>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800175a:	4a5b      	ldr	r2, [pc, #364]	; (80018c8 <HAL_GPIO_Init+0x310>)
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	089b      	lsrs	r3, r3, #2
 8001760:	3302      	adds	r3, #2
 8001762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	220f      	movs	r2, #15
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a52      	ldr	r2, [pc, #328]	; (80018cc <HAL_GPIO_Init+0x314>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d02b      	beq.n	80017de <HAL_GPIO_Init+0x226>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a51      	ldr	r2, [pc, #324]	; (80018d0 <HAL_GPIO_Init+0x318>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d025      	beq.n	80017da <HAL_GPIO_Init+0x222>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a50      	ldr	r2, [pc, #320]	; (80018d4 <HAL_GPIO_Init+0x31c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d01f      	beq.n	80017d6 <HAL_GPIO_Init+0x21e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4f      	ldr	r2, [pc, #316]	; (80018d8 <HAL_GPIO_Init+0x320>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d019      	beq.n	80017d2 <HAL_GPIO_Init+0x21a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4e      	ldr	r2, [pc, #312]	; (80018dc <HAL_GPIO_Init+0x324>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d013      	beq.n	80017ce <HAL_GPIO_Init+0x216>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4d      	ldr	r2, [pc, #308]	; (80018e0 <HAL_GPIO_Init+0x328>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00d      	beq.n	80017ca <HAL_GPIO_Init+0x212>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4c      	ldr	r2, [pc, #304]	; (80018e4 <HAL_GPIO_Init+0x32c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d007      	beq.n	80017c6 <HAL_GPIO_Init+0x20e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4b      	ldr	r2, [pc, #300]	; (80018e8 <HAL_GPIO_Init+0x330>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_GPIO_Init+0x20a>
 80017be:	2307      	movs	r3, #7
 80017c0:	e00e      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017c2:	2308      	movs	r3, #8
 80017c4:	e00c      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017c6:	2306      	movs	r3, #6
 80017c8:	e00a      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017ca:	2305      	movs	r3, #5
 80017cc:	e008      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017ce:	2304      	movs	r3, #4
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017d2:	2303      	movs	r3, #3
 80017d4:	e004      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e002      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017de:	2300      	movs	r3, #0
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	f002 0203 	and.w	r2, r2, #3
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	4093      	lsls	r3, r2
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f0:	4935      	ldr	r1, [pc, #212]	; (80018c8 <HAL_GPIO_Init+0x310>)
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	3302      	adds	r3, #2
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017fe:	4b3b      	ldr	r3, [pc, #236]	; (80018ec <HAL_GPIO_Init+0x334>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001822:	4a32      	ldr	r2, [pc, #200]	; (80018ec <HAL_GPIO_Init+0x334>)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001828:	4b30      	ldr	r3, [pc, #192]	; (80018ec <HAL_GPIO_Init+0x334>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800184c:	4a27      	ldr	r2, [pc, #156]	; (80018ec <HAL_GPIO_Init+0x334>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001852:	4b26      	ldr	r3, [pc, #152]	; (80018ec <HAL_GPIO_Init+0x334>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001876:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <HAL_GPIO_Init+0x334>)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800187c:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <HAL_GPIO_Init+0x334>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018a0:	4a12      	ldr	r2, [pc, #72]	; (80018ec <HAL_GPIO_Init+0x334>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3301      	adds	r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	2b0f      	cmp	r3, #15
 80018b0:	f67f ae90 	bls.w	80015d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40013800 	.word	0x40013800
 80018cc:	40020000 	.word	0x40020000
 80018d0:	40020400 	.word	0x40020400
 80018d4:	40020800 	.word	0x40020800
 80018d8:	40020c00 	.word	0x40020c00
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40021400 	.word	0x40021400
 80018e4:	40021800 	.word	0x40021800
 80018e8:	40021c00 	.word	0x40021c00
 80018ec:	40013c00 	.word	0x40013c00

080018f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	807b      	strh	r3, [r7, #2]
 80018fc:	4613      	mov	r3, r2
 80018fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001900:	787b      	ldrb	r3, [r7, #1]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001906:	887a      	ldrh	r2, [r7, #2]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800190c:	e003      	b.n	8001916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800190e:	887b      	ldrh	r3, [r7, #2]
 8001910:	041a      	lsls	r2, r3, #16
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	619a      	str	r2, [r3, #24]
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e12b      	b.n	8001b8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d106      	bne.n	8001950 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff fbc2 	bl	80010d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2224      	movs	r2, #36	; 0x24
 8001954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001976:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001986:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001988:	f001 fb82 	bl	8003090 <HAL_RCC_GetPCLK1Freq>
 800198c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4a81      	ldr	r2, [pc, #516]	; (8001b98 <HAL_I2C_Init+0x274>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d807      	bhi.n	80019a8 <HAL_I2C_Init+0x84>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4a80      	ldr	r2, [pc, #512]	; (8001b9c <HAL_I2C_Init+0x278>)
 800199c:	4293      	cmp	r3, r2
 800199e:	bf94      	ite	ls
 80019a0:	2301      	movls	r3, #1
 80019a2:	2300      	movhi	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	e006      	b.n	80019b6 <HAL_I2C_Init+0x92>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4a7d      	ldr	r2, [pc, #500]	; (8001ba0 <HAL_I2C_Init+0x27c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	bf94      	ite	ls
 80019b0:	2301      	movls	r3, #1
 80019b2:	2300      	movhi	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e0e7      	b.n	8001b8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4a78      	ldr	r2, [pc, #480]	; (8001ba4 <HAL_I2C_Init+0x280>)
 80019c2:	fba2 2303 	umull	r2, r3, r2, r3
 80019c6:	0c9b      	lsrs	r3, r3, #18
 80019c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	430a      	orrs	r2, r1
 80019dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	4a6a      	ldr	r2, [pc, #424]	; (8001b98 <HAL_I2C_Init+0x274>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d802      	bhi.n	80019f8 <HAL_I2C_Init+0xd4>
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	3301      	adds	r3, #1
 80019f6:	e009      	b.n	8001a0c <HAL_I2C_Init+0xe8>
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019fe:	fb02 f303 	mul.w	r3, r2, r3
 8001a02:	4a69      	ldr	r2, [pc, #420]	; (8001ba8 <HAL_I2C_Init+0x284>)
 8001a04:	fba2 2303 	umull	r2, r3, r2, r3
 8001a08:	099b      	lsrs	r3, r3, #6
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	430b      	orrs	r3, r1
 8001a12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	495c      	ldr	r1, [pc, #368]	; (8001b98 <HAL_I2C_Init+0x274>)
 8001a28:	428b      	cmp	r3, r1
 8001a2a:	d819      	bhi.n	8001a60 <HAL_I2C_Init+0x13c>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1e59      	subs	r1, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a3a:	1c59      	adds	r1, r3, #1
 8001a3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a40:	400b      	ands	r3, r1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00a      	beq.n	8001a5c <HAL_I2C_Init+0x138>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	1e59      	subs	r1, r3, #1
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a54:	3301      	adds	r3, #1
 8001a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a5a:	e051      	b.n	8001b00 <HAL_I2C_Init+0x1dc>
 8001a5c:	2304      	movs	r3, #4
 8001a5e:	e04f      	b.n	8001b00 <HAL_I2C_Init+0x1dc>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d111      	bne.n	8001a8c <HAL_I2C_Init+0x168>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	1e58      	subs	r0, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6859      	ldr	r1, [r3, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	440b      	add	r3, r1
 8001a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf0c      	ite	eq
 8001a84:	2301      	moveq	r3, #1
 8001a86:	2300      	movne	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	e012      	b.n	8001ab2 <HAL_I2C_Init+0x18e>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	1e58      	subs	r0, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6859      	ldr	r1, [r3, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	0099      	lsls	r1, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bf0c      	ite	eq
 8001aac:	2301      	moveq	r3, #1
 8001aae:	2300      	movne	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_I2C_Init+0x196>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e022      	b.n	8001b00 <HAL_I2C_Init+0x1dc>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10e      	bne.n	8001ae0 <HAL_I2C_Init+0x1bc>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	1e58      	subs	r0, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6859      	ldr	r1, [r3, #4]
 8001aca:	460b      	mov	r3, r1
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	440b      	add	r3, r1
 8001ad0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ade:	e00f      	b.n	8001b00 <HAL_I2C_Init+0x1dc>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1e58      	subs	r0, r3, #1
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6859      	ldr	r1, [r3, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	0099      	lsls	r1, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001af6:	3301      	adds	r3, #1
 8001af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001afc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	6809      	ldr	r1, [r1, #0]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69da      	ldr	r2, [r3, #28]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6911      	ldr	r1, [r2, #16]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	68d2      	ldr	r2, [r2, #12]
 8001b3a:	4311      	orrs	r1, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	430b      	orrs	r3, r1
 8001b42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695a      	ldr	r2, [r3, #20]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0201 	orr.w	r2, r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	000186a0 	.word	0x000186a0
 8001b9c:	001e847f 	.word	0x001e847f
 8001ba0:	003d08ff 	.word	0x003d08ff
 8001ba4:	431bde83 	.word	0x431bde83
 8001ba8:	10624dd3 	.word	0x10624dd3

08001bac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af02      	add	r7, sp, #8
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	460b      	mov	r3, r1
 8001bba:	817b      	strh	r3, [r7, #10]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bc0:	f7ff fbe4 	bl	800138c <HAL_GetTick>
 8001bc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b20      	cmp	r3, #32
 8001bd0:	f040 80e0 	bne.w	8001d94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2319      	movs	r3, #25
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4970      	ldr	r1, [pc, #448]	; (8001da0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 fc58 	bl	8002494 <I2C_WaitOnFlagUntilTimeout>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bea:	2302      	movs	r3, #2
 8001bec:	e0d3      	b.n	8001d96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_I2C_Master_Transmit+0x50>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e0cc      	b.n	8001d96 <HAL_I2C_Master_Transmit+0x1ea>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d007      	beq.n	8001c22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0201 	orr.w	r2, r2, #1
 8001c20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2221      	movs	r2, #33	; 0x21
 8001c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	893a      	ldrh	r2, [r7, #8]
 8001c52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4a50      	ldr	r2, [pc, #320]	; (8001da4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c64:	8979      	ldrh	r1, [r7, #10]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	6a3a      	ldr	r2, [r7, #32]
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 fac2 	bl	80021f4 <I2C_MasterRequestWrite>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e08d      	b.n	8001d96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c90:	e066      	b.n	8001d60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	6a39      	ldr	r1, [r7, #32]
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 fcd2 	bl	8002640 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00d      	beq.n	8001cbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d107      	bne.n	8001cba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e06b      	b.n	8001d96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	781a      	ldrb	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d11b      	bne.n	8001d34 <HAL_I2C_Master_Transmit+0x188>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d017      	beq.n	8001d34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	781a      	ldrb	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	6a39      	ldr	r1, [r7, #32]
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 fcc2 	bl	80026c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00d      	beq.n	8001d60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d107      	bne.n	8001d5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e01a      	b.n	8001d96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d194      	bne.n	8001c92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e000      	b.n	8001d96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d94:	2302      	movs	r3, #2
  }
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	00100002 	.word	0x00100002
 8001da4:	ffff0000 	.word	0xffff0000

08001da8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08c      	sub	sp, #48	; 0x30
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	461a      	mov	r2, r3
 8001db4:	460b      	mov	r3, r1
 8001db6:	817b      	strh	r3, [r7, #10]
 8001db8:	4613      	mov	r3, r2
 8001dba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff fae6 	bl	800138c <HAL_GetTick>
 8001dc0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	f040 820b 	bne.w	80021e6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2319      	movs	r3, #25
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	497c      	ldr	r1, [pc, #496]	; (8001fcc <HAL_I2C_Master_Receive+0x224>)
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 fb5a 	bl	8002494 <I2C_WaitOnFlagUntilTimeout>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001de6:	2302      	movs	r3, #2
 8001de8:	e1fe      	b.n	80021e8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_I2C_Master_Receive+0x50>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e1f7      	b.n	80021e8 <HAL_I2C_Master_Receive+0x440>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d007      	beq.n	8001e1e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0201 	orr.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2222      	movs	r2, #34	; 0x22
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2210      	movs	r2, #16
 8001e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	893a      	ldrh	r2, [r7, #8]
 8001e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4a5c      	ldr	r2, [pc, #368]	; (8001fd0 <HAL_I2C_Master_Receive+0x228>)
 8001e5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e60:	8979      	ldrh	r1, [r7, #10]
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 fa46 	bl	80022f8 <I2C_MasterRequestRead>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e1b8      	b.n	80021e8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d113      	bne.n	8001ea6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	623b      	str	r3, [r7, #32]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	623b      	str	r3, [r7, #32]
 8001e92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	e18c      	b.n	80021c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d11b      	bne.n	8001ee6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ebc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	e16c      	b.n	80021c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d11b      	bne.n	8001f26 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001efc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	61bb      	str	r3, [r7, #24]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	61bb      	str	r3, [r7, #24]
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	e14c      	b.n	80021c0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f4c:	e138      	b.n	80021c0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	f200 80f1 	bhi.w	800213a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d123      	bne.n	8001fa8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 fbed 	bl	8002744 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e139      	b.n	80021e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691a      	ldr	r2, [r3, #16]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fa6:	e10b      	b.n	80021c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d14e      	bne.n	800204e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	4906      	ldr	r1, [pc, #24]	; (8001fd4 <HAL_I2C_Master_Receive+0x22c>)
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 fa6a 	bl	8002494 <I2C_WaitOnFlagUntilTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d008      	beq.n	8001fd8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e10e      	b.n	80021e8 <HAL_I2C_Master_Receive+0x440>
 8001fca:	bf00      	nop
 8001fcc:	00100002 	.word	0x00100002
 8001fd0:	ffff0000 	.word	0xffff0000
 8001fd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691a      	ldr	r2, [r3, #16]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002004:	3b01      	subs	r3, #1
 8002006:	b29a      	uxth	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002010:	b29b      	uxth	r3, r3
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002036:	3b01      	subs	r3, #1
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002042:	b29b      	uxth	r3, r3
 8002044:	3b01      	subs	r3, #1
 8002046:	b29a      	uxth	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800204c:	e0b8      	b.n	80021c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002054:	2200      	movs	r2, #0
 8002056:	4966      	ldr	r1, [pc, #408]	; (80021f0 <HAL_I2C_Master_Receive+0x448>)
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 fa1b 	bl	8002494 <I2C_WaitOnFlagUntilTimeout>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0bf      	b.n	80021e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002076:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b0:	2200      	movs	r2, #0
 80020b2:	494f      	ldr	r1, [pc, #316]	; (80021f0 <HAL_I2C_Master_Receive+0x448>)
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 f9ed 	bl	8002494 <I2C_WaitOnFlagUntilTimeout>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e091      	b.n	80021e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002122:	3b01      	subs	r3, #1
 8002124:	b29a      	uxth	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212e:	b29b      	uxth	r3, r3
 8002130:	3b01      	subs	r3, #1
 8002132:	b29a      	uxth	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002138:	e042      	b.n	80021c0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800213a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 fb00 	bl	8002744 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e04c      	b.n	80021e8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002176:	b29b      	uxth	r3, r3
 8002178:	3b01      	subs	r3, #1
 800217a:	b29a      	uxth	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b04      	cmp	r3, #4
 800218c:	d118      	bne.n	80021c0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	3b01      	subs	r3, #1
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f47f aec2 	bne.w	8001f4e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2220      	movs	r2, #32
 80021ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e000      	b.n	80021e8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80021e6:	2302      	movs	r3, #2
  }
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3728      	adds	r7, #40	; 0x28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	00010004 	.word	0x00010004

080021f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	607a      	str	r2, [r7, #4]
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	460b      	mov	r3, r1
 8002202:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2b08      	cmp	r3, #8
 800220e:	d006      	beq.n	800221e <I2C_MasterRequestWrite+0x2a>
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d003      	beq.n	800221e <I2C_MasterRequestWrite+0x2a>
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800221c:	d108      	bne.n	8002230 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	e00b      	b.n	8002248 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002234:	2b12      	cmp	r3, #18
 8002236:	d107      	bne.n	8002248 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002246:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 f91d 	bl	8002494 <I2C_WaitOnFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00d      	beq.n	800227c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800226e:	d103      	bne.n	8002278 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002276:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e035      	b.n	80022e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002284:	d108      	bne.n	8002298 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002286:	897b      	ldrh	r3, [r7, #10]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	461a      	mov	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002294:	611a      	str	r2, [r3, #16]
 8002296:	e01b      	b.n	80022d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002298:	897b      	ldrh	r3, [r7, #10]
 800229a:	11db      	asrs	r3, r3, #7
 800229c:	b2db      	uxtb	r3, r3
 800229e:	f003 0306 	and.w	r3, r3, #6
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	f063 030f 	orn	r3, r3, #15
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	490e      	ldr	r1, [pc, #56]	; (80022f0 <I2C_MasterRequestWrite+0xfc>)
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f943 	bl	8002542 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e010      	b.n	80022e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022c6:	897b      	ldrh	r3, [r7, #10]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	4907      	ldr	r1, [pc, #28]	; (80022f4 <I2C_MasterRequestWrite+0x100>)
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f933 	bl	8002542 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	00010008 	.word	0x00010008
 80022f4:	00010002 	.word	0x00010002

080022f8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	460b      	mov	r3, r1
 8002306:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800231c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b08      	cmp	r3, #8
 8002322:	d006      	beq.n	8002332 <I2C_MasterRequestRead+0x3a>
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d003      	beq.n	8002332 <I2C_MasterRequestRead+0x3a>
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002330:	d108      	bne.n	8002344 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	e00b      	b.n	800235c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	2b11      	cmp	r3, #17
 800234a:	d107      	bne.n	800235c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800235a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 f893 	bl	8002494 <I2C_WaitOnFlagUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00d      	beq.n	8002390 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002382:	d103      	bne.n	800238c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800238a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e079      	b.n	8002484 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002398:	d108      	bne.n	80023ac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800239a:	897b      	ldrh	r3, [r7, #10]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	611a      	str	r2, [r3, #16]
 80023aa:	e05f      	b.n	800246c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023ac:	897b      	ldrh	r3, [r7, #10]
 80023ae:	11db      	asrs	r3, r3, #7
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f003 0306 	and.w	r3, r3, #6
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f063 030f 	orn	r3, r3, #15
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	4930      	ldr	r1, [pc, #192]	; (800248c <I2C_MasterRequestRead+0x194>)
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 f8b9 	bl	8002542 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e054      	b.n	8002484 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023da:	897b      	ldrh	r3, [r7, #10]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	4929      	ldr	r1, [pc, #164]	; (8002490 <I2C_MasterRequestRead+0x198>)
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 f8a9 	bl	8002542 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e044      	b.n	8002484 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800241e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f831 	bl	8002494 <I2C_WaitOnFlagUntilTimeout>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00d      	beq.n	8002454 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002446:	d103      	bne.n	8002450 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800244e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e017      	b.n	8002484 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002454:	897b      	ldrh	r3, [r7, #10]
 8002456:	11db      	asrs	r3, r3, #7
 8002458:	b2db      	uxtb	r3, r3
 800245a:	f003 0306 	and.w	r3, r3, #6
 800245e:	b2db      	uxtb	r3, r3
 8002460:	f063 030e 	orn	r3, r3, #14
 8002464:	b2da      	uxtb	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4907      	ldr	r1, [pc, #28]	; (8002490 <I2C_MasterRequestRead+0x198>)
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f865 	bl	8002542 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	00010008 	.word	0x00010008
 8002490:	00010002 	.word	0x00010002

08002494 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	4613      	mov	r3, r2
 80024a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024a4:	e025      	b.n	80024f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d021      	beq.n	80024f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ae:	f7fe ff6d 	bl	800138c <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d302      	bcc.n	80024c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d116      	bne.n	80024f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2220      	movs	r2, #32
 80024ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f043 0220 	orr.w	r2, r3, #32
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e023      	b.n	800253a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d10d      	bne.n	8002518 <I2C_WaitOnFlagUntilTimeout+0x84>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	43da      	mvns	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	4013      	ands	r3, r2
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	bf0c      	ite	eq
 800250e:	2301      	moveq	r3, #1
 8002510:	2300      	movne	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	e00c      	b.n	8002532 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	43da      	mvns	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4013      	ands	r3, r2
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	bf0c      	ite	eq
 800252a:	2301      	moveq	r3, #1
 800252c:	2300      	movne	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	429a      	cmp	r2, r3
 8002536:	d0b6      	beq.n	80024a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002550:	e051      	b.n	80025f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002560:	d123      	bne.n	80025aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002570:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800257a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f043 0204 	orr.w	r2, r3, #4
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e046      	b.n	8002638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d021      	beq.n	80025f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b2:	f7fe feeb 	bl	800138c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d302      	bcc.n	80025c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d116      	bne.n	80025f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f043 0220 	orr.w	r2, r3, #32
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e020      	b.n	8002638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	0c1b      	lsrs	r3, r3, #16
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d10c      	bne.n	800261a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	43da      	mvns	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	4013      	ands	r3, r2
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	bf14      	ite	ne
 8002612:	2301      	movne	r3, #1
 8002614:	2300      	moveq	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	e00b      	b.n	8002632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	43da      	mvns	r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	4013      	ands	r3, r2
 8002626:	b29b      	uxth	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf14      	ite	ne
 800262c:	2301      	movne	r3, #1
 800262e:	2300      	moveq	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d18d      	bne.n	8002552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800264c:	e02d      	b.n	80026aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 f8ce 	bl	80027f0 <I2C_IsAcknowledgeFailed>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e02d      	b.n	80026ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002664:	d021      	beq.n	80026aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002666:	f7fe fe91 	bl	800138c <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	429a      	cmp	r2, r3
 8002674:	d302      	bcc.n	800267c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d116      	bne.n	80026aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f043 0220 	orr.w	r2, r3, #32
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e007      	b.n	80026ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b4:	2b80      	cmp	r3, #128	; 0x80
 80026b6:	d1ca      	bne.n	800264e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026ce:	e02d      	b.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f88d 	bl	80027f0 <I2C_IsAcknowledgeFailed>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e02d      	b.n	800273c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e6:	d021      	beq.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e8:	f7fe fe50 	bl	800138c <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d302      	bcc.n	80026fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d116      	bne.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	f043 0220 	orr.w	r2, r3, #32
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e007      	b.n	800273c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b04      	cmp	r3, #4
 8002738:	d1ca      	bne.n	80026d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002750:	e042      	b.n	80027d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b10      	cmp	r3, #16
 800275e:	d119      	bne.n	8002794 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0210 	mvn.w	r2, #16
 8002768:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e029      	b.n	80027e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002794:	f7fe fdfa 	bl	800138c <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d302      	bcc.n	80027aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d116      	bne.n	80027d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	f043 0220 	orr.w	r2, r3, #32
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e007      	b.n	80027e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e2:	2b40      	cmp	r3, #64	; 0x40
 80027e4:	d1b5      	bne.n	8002752 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002806:	d11b      	bne.n	8002840 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002810:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	f043 0204 	orr.w	r2, r3, #4
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e264      	b.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d075      	beq.n	800295a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800286e:	4ba3      	ldr	r3, [pc, #652]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b04      	cmp	r3, #4
 8002878:	d00c      	beq.n	8002894 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287a:	4ba0      	ldr	r3, [pc, #640]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002882:	2b08      	cmp	r3, #8
 8002884:	d112      	bne.n	80028ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002886:	4b9d      	ldr	r3, [pc, #628]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002892:	d10b      	bne.n	80028ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	4b99      	ldr	r3, [pc, #612]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d05b      	beq.n	8002958 <HAL_RCC_OscConfig+0x108>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d157      	bne.n	8002958 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e23f      	b.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b4:	d106      	bne.n	80028c4 <HAL_RCC_OscConfig+0x74>
 80028b6:	4b91      	ldr	r3, [pc, #580]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a90      	ldr	r2, [pc, #576]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e01d      	b.n	8002900 <HAL_RCC_OscConfig+0xb0>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCC_OscConfig+0x98>
 80028ce:	4b8b      	ldr	r3, [pc, #556]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a8a      	ldr	r2, [pc, #552]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	4b88      	ldr	r3, [pc, #544]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a87      	ldr	r2, [pc, #540]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e00b      	b.n	8002900 <HAL_RCC_OscConfig+0xb0>
 80028e8:	4b84      	ldr	r3, [pc, #528]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a83      	ldr	r2, [pc, #524]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 80028ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	4b81      	ldr	r3, [pc, #516]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a80      	ldr	r2, [pc, #512]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 80028fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d013      	beq.n	8002930 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002908:	f7fe fd40 	bl	800138c <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002910:	f7fe fd3c 	bl	800138c <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	; 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e204      	b.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002922:	4b76      	ldr	r3, [pc, #472]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0xc0>
 800292e:	e014      	b.n	800295a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7fe fd2c 	bl	800138c <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002938:	f7fe fd28 	bl	800138c <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	; 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e1f0      	b.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294a:	4b6c      	ldr	r3, [pc, #432]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0xe8>
 8002956:	e000      	b.n	800295a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d063      	beq.n	8002a2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002966:	4b65      	ldr	r3, [pc, #404]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00b      	beq.n	800298a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002972:	4b62      	ldr	r3, [pc, #392]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800297a:	2b08      	cmp	r3, #8
 800297c:	d11c      	bne.n	80029b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800297e:	4b5f      	ldr	r3, [pc, #380]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d116      	bne.n	80029b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298a:	4b5c      	ldr	r3, [pc, #368]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <HAL_RCC_OscConfig+0x152>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d001      	beq.n	80029a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e1c4      	b.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a2:	4b56      	ldr	r3, [pc, #344]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4952      	ldr	r1, [pc, #328]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b6:	e03a      	b.n	8002a2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d020      	beq.n	8002a02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c0:	4b4f      	ldr	r3, [pc, #316]	; (8002b00 <HAL_RCC_OscConfig+0x2b0>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c6:	f7fe fce1 	bl	800138c <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ce:	f7fe fcdd 	bl	800138c <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e1a5      	b.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e0:	4b46      	ldr	r3, [pc, #280]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ec:	4b43      	ldr	r3, [pc, #268]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4940      	ldr	r1, [pc, #256]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	600b      	str	r3, [r1, #0]
 8002a00:	e015      	b.n	8002a2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a02:	4b3f      	ldr	r3, [pc, #252]	; (8002b00 <HAL_RCC_OscConfig+0x2b0>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fe fcc0 	bl	800138c <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a10:	f7fe fcbc 	bl	800138c <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e184      	b.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a22:	4b36      	ldr	r3, [pc, #216]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d030      	beq.n	8002a9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d016      	beq.n	8002a70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a42:	4b30      	ldr	r3, [pc, #192]	; (8002b04 <HAL_RCC_OscConfig+0x2b4>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a48:	f7fe fca0 	bl	800138c <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a50:	f7fe fc9c 	bl	800138c <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e164      	b.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a62:	4b26      	ldr	r3, [pc, #152]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 8002a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0x200>
 8002a6e:	e015      	b.n	8002a9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a70:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <HAL_RCC_OscConfig+0x2b4>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a76:	f7fe fc89 	bl	800138c <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a7e:	f7fe fc85 	bl	800138c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e14d      	b.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a90:	4b1a      	ldr	r3, [pc, #104]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 8002a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f0      	bne.n	8002a7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80a0 	beq.w	8002bea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aae:	4b13      	ldr	r3, [pc, #76]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10f      	bne.n	8002ada <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	4a0e      	ldr	r2, [pc, #56]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aca:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <HAL_RCC_OscConfig+0x2ac>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_RCC_OscConfig+0x2b8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d121      	bne.n	8002b2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae6:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <HAL_RCC_OscConfig+0x2b8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <HAL_RCC_OscConfig+0x2b8>)
 8002aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af2:	f7fe fc4b 	bl	800138c <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af8:	e011      	b.n	8002b1e <HAL_RCC_OscConfig+0x2ce>
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800
 8002b00:	42470000 	.word	0x42470000
 8002b04:	42470e80 	.word	0x42470e80
 8002b08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0c:	f7fe fc3e 	bl	800138c <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e106      	b.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1e:	4b85      	ldr	r3, [pc, #532]	; (8002d34 <HAL_RCC_OscConfig+0x4e4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d106      	bne.n	8002b40 <HAL_RCC_OscConfig+0x2f0>
 8002b32:	4b81      	ldr	r3, [pc, #516]	; (8002d38 <HAL_RCC_OscConfig+0x4e8>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	4a80      	ldr	r2, [pc, #512]	; (8002d38 <HAL_RCC_OscConfig+0x4e8>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3e:	e01c      	b.n	8002b7a <HAL_RCC_OscConfig+0x32a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b05      	cmp	r3, #5
 8002b46:	d10c      	bne.n	8002b62 <HAL_RCC_OscConfig+0x312>
 8002b48:	4b7b      	ldr	r3, [pc, #492]	; (8002d38 <HAL_RCC_OscConfig+0x4e8>)
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4c:	4a7a      	ldr	r2, [pc, #488]	; (8002d38 <HAL_RCC_OscConfig+0x4e8>)
 8002b4e:	f043 0304 	orr.w	r3, r3, #4
 8002b52:	6713      	str	r3, [r2, #112]	; 0x70
 8002b54:	4b78      	ldr	r3, [pc, #480]	; (8002d38 <HAL_RCC_OscConfig+0x4e8>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	4a77      	ldr	r2, [pc, #476]	; (8002d38 <HAL_RCC_OscConfig+0x4e8>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b60:	e00b      	b.n	8002b7a <HAL_RCC_OscConfig+0x32a>
 8002b62:	4b75      	ldr	r3, [pc, #468]	; (8002d38 <HAL_RCC_OscConfig+0x4e8>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b66:	4a74      	ldr	r2, [pc, #464]	; (8002d38 <HAL_RCC_OscConfig+0x4e8>)
 8002b68:	f023 0301 	bic.w	r3, r3, #1
 8002b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b6e:	4b72      	ldr	r3, [pc, #456]	; (8002d38 <HAL_RCC_OscConfig+0x4e8>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	4a71      	ldr	r2, [pc, #452]	; (8002d38 <HAL_RCC_OscConfig+0x4e8>)
 8002b74:	f023 0304 	bic.w	r3, r3, #4
 8002b78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d015      	beq.n	8002bae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b82:	f7fe fc03 	bl	800138c <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b8a:	f7fe fbff 	bl	800138c <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e0c5      	b.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba0:	4b65      	ldr	r3, [pc, #404]	; (8002d38 <HAL_RCC_OscConfig+0x4e8>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0ee      	beq.n	8002b8a <HAL_RCC_OscConfig+0x33a>
 8002bac:	e014      	b.n	8002bd8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bae:	f7fe fbed 	bl	800138c <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bb6:	f7fe fbe9 	bl	800138c <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e0af      	b.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bcc:	4b5a      	ldr	r3, [pc, #360]	; (8002d38 <HAL_RCC_OscConfig+0x4e8>)
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1ee      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bd8:	7dfb      	ldrb	r3, [r7, #23]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d105      	bne.n	8002bea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bde:	4b56      	ldr	r3, [pc, #344]	; (8002d38 <HAL_RCC_OscConfig+0x4e8>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	4a55      	ldr	r2, [pc, #340]	; (8002d38 <HAL_RCC_OscConfig+0x4e8>)
 8002be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 809b 	beq.w	8002d2a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bf4:	4b50      	ldr	r3, [pc, #320]	; (8002d38 <HAL_RCC_OscConfig+0x4e8>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d05c      	beq.n	8002cba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d141      	bne.n	8002c8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c08:	4b4c      	ldr	r3, [pc, #304]	; (8002d3c <HAL_RCC_OscConfig+0x4ec>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0e:	f7fe fbbd 	bl	800138c <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c16:	f7fe fbb9 	bl	800138c <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e081      	b.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c28:	4b43      	ldr	r3, [pc, #268]	; (8002d38 <HAL_RCC_OscConfig+0x4e8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1f0      	bne.n	8002c16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69da      	ldr	r2, [r3, #28]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	019b      	lsls	r3, r3, #6
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	085b      	lsrs	r3, r3, #1
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	041b      	lsls	r3, r3, #16
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	061b      	lsls	r3, r3, #24
 8002c58:	4937      	ldr	r1, [pc, #220]	; (8002d38 <HAL_RCC_OscConfig+0x4e8>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c5e:	4b37      	ldr	r3, [pc, #220]	; (8002d3c <HAL_RCC_OscConfig+0x4ec>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7fe fb92 	bl	800138c <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fe fb8e 	bl	800138c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e056      	b.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7e:	4b2e      	ldr	r3, [pc, #184]	; (8002d38 <HAL_RCC_OscConfig+0x4e8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x41c>
 8002c8a:	e04e      	b.n	8002d2a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8c:	4b2b      	ldr	r3, [pc, #172]	; (8002d3c <HAL_RCC_OscConfig+0x4ec>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c92:	f7fe fb7b 	bl	800138c <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9a:	f7fe fb77 	bl	800138c <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e03f      	b.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cac:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <HAL_RCC_OscConfig+0x4e8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f0      	bne.n	8002c9a <HAL_RCC_OscConfig+0x44a>
 8002cb8:	e037      	b.n	8002d2a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e032      	b.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cc6:	4b1c      	ldr	r3, [pc, #112]	; (8002d38 <HAL_RCC_OscConfig+0x4e8>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d028      	beq.n	8002d26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d121      	bne.n	8002d26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d11a      	bne.n	8002d26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cfc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d111      	bne.n	8002d26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	085b      	lsrs	r3, r3, #1
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d107      	bne.n	8002d26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d001      	beq.n	8002d2a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40007000 	.word	0x40007000
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	42470060 	.word	0x42470060

08002d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0cc      	b.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d54:	4b68      	ldr	r3, [pc, #416]	; (8002ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d90c      	bls.n	8002d7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	4b65      	ldr	r3, [pc, #404]	; (8002ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b63      	ldr	r3, [pc, #396]	; (8002ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0b8      	b.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d020      	beq.n	8002dca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d94:	4b59      	ldr	r3, [pc, #356]	; (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	4a58      	ldr	r2, [pc, #352]	; (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dac:	4b53      	ldr	r3, [pc, #332]	; (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	4a52      	ldr	r2, [pc, #328]	; (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002db6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db8:	4b50      	ldr	r3, [pc, #320]	; (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	494d      	ldr	r1, [pc, #308]	; (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d044      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d107      	bne.n	8002dee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dde:	4b47      	ldr	r3, [pc, #284]	; (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d119      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e07f      	b.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d003      	beq.n	8002dfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d107      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfe:	4b3f      	ldr	r3, [pc, #252]	; (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e06f      	b.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e0e:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e067      	b.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e1e:	4b37      	ldr	r3, [pc, #220]	; (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f023 0203 	bic.w	r2, r3, #3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	4934      	ldr	r1, [pc, #208]	; (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e30:	f7fe faac 	bl	800138c <HAL_GetTick>
 8002e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e36:	e00a      	b.n	8002e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e38:	f7fe faa8 	bl	800138c <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e04f      	b.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4e:	4b2b      	ldr	r3, [pc, #172]	; (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 020c 	and.w	r2, r3, #12
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d1eb      	bne.n	8002e38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e60:	4b25      	ldr	r3, [pc, #148]	; (8002ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d20c      	bcs.n	8002e88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6e:	4b22      	ldr	r3, [pc, #136]	; (8002ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e76:	4b20      	ldr	r3, [pc, #128]	; (8002ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e032      	b.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e94:	4b19      	ldr	r3, [pc, #100]	; (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4916      	ldr	r1, [pc, #88]	; (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eb2:	4b12      	ldr	r3, [pc, #72]	; (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	490e      	ldr	r1, [pc, #56]	; (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ec6:	f000 f821 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	490a      	ldr	r1, [pc, #40]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed8:	5ccb      	ldrb	r3, [r1, r3]
 8002eda:	fa22 f303 	lsr.w	r3, r2, r3
 8002ede:	4a09      	ldr	r2, [pc, #36]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe fa0c 	bl	8001304 <HAL_InitTick>

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40023c00 	.word	0x40023c00
 8002efc:	40023800 	.word	0x40023800
 8002f00:	08003b24 	.word	0x08003b24
 8002f04:	20000008 	.word	0x20000008
 8002f08:	2000000c 	.word	0x2000000c

08002f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f0c:	b5b0      	push	{r4, r5, r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f12:	2100      	movs	r1, #0
 8002f14:	6079      	str	r1, [r7, #4]
 8002f16:	2100      	movs	r1, #0
 8002f18:	60f9      	str	r1, [r7, #12]
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f1e:	2100      	movs	r1, #0
 8002f20:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f22:	4952      	ldr	r1, [pc, #328]	; (800306c <HAL_RCC_GetSysClockFreq+0x160>)
 8002f24:	6889      	ldr	r1, [r1, #8]
 8002f26:	f001 010c 	and.w	r1, r1, #12
 8002f2a:	2908      	cmp	r1, #8
 8002f2c:	d00d      	beq.n	8002f4a <HAL_RCC_GetSysClockFreq+0x3e>
 8002f2e:	2908      	cmp	r1, #8
 8002f30:	f200 8094 	bhi.w	800305c <HAL_RCC_GetSysClockFreq+0x150>
 8002f34:	2900      	cmp	r1, #0
 8002f36:	d002      	beq.n	8002f3e <HAL_RCC_GetSysClockFreq+0x32>
 8002f38:	2904      	cmp	r1, #4
 8002f3a:	d003      	beq.n	8002f44 <HAL_RCC_GetSysClockFreq+0x38>
 8002f3c:	e08e      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f3e:	4b4c      	ldr	r3, [pc, #304]	; (8003070 <HAL_RCC_GetSysClockFreq+0x164>)
 8002f40:	60bb      	str	r3, [r7, #8]
       break;
 8002f42:	e08e      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f44:	4b4b      	ldr	r3, [pc, #300]	; (8003074 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f46:	60bb      	str	r3, [r7, #8]
      break;
 8002f48:	e08b      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f4a:	4948      	ldr	r1, [pc, #288]	; (800306c <HAL_RCC_GetSysClockFreq+0x160>)
 8002f4c:	6849      	ldr	r1, [r1, #4]
 8002f4e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002f52:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f54:	4945      	ldr	r1, [pc, #276]	; (800306c <HAL_RCC_GetSysClockFreq+0x160>)
 8002f56:	6849      	ldr	r1, [r1, #4]
 8002f58:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002f5c:	2900      	cmp	r1, #0
 8002f5e:	d024      	beq.n	8002faa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f60:	4942      	ldr	r1, [pc, #264]	; (800306c <HAL_RCC_GetSysClockFreq+0x160>)
 8002f62:	6849      	ldr	r1, [r1, #4]
 8002f64:	0989      	lsrs	r1, r1, #6
 8002f66:	4608      	mov	r0, r1
 8002f68:	f04f 0100 	mov.w	r1, #0
 8002f6c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002f70:	f04f 0500 	mov.w	r5, #0
 8002f74:	ea00 0204 	and.w	r2, r0, r4
 8002f78:	ea01 0305 	and.w	r3, r1, r5
 8002f7c:	493d      	ldr	r1, [pc, #244]	; (8003074 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f7e:	fb01 f003 	mul.w	r0, r1, r3
 8002f82:	2100      	movs	r1, #0
 8002f84:	fb01 f102 	mul.w	r1, r1, r2
 8002f88:	1844      	adds	r4, r0, r1
 8002f8a:	493a      	ldr	r1, [pc, #232]	; (8003074 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f8c:	fba2 0101 	umull	r0, r1, r2, r1
 8002f90:	1863      	adds	r3, r4, r1
 8002f92:	4619      	mov	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	461a      	mov	r2, r3
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	f7fd faf0 	bl	8000580 <__aeabi_uldivmod>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	e04a      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002faa:	4b30      	ldr	r3, [pc, #192]	; (800306c <HAL_RCC_GetSysClockFreq+0x160>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	099b      	lsrs	r3, r3, #6
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fba:	f04f 0100 	mov.w	r1, #0
 8002fbe:	ea02 0400 	and.w	r4, r2, r0
 8002fc2:	ea03 0501 	and.w	r5, r3, r1
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	4629      	mov	r1, r5
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	014b      	lsls	r3, r1, #5
 8002fd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fd8:	0142      	lsls	r2, r0, #5
 8002fda:	4610      	mov	r0, r2
 8002fdc:	4619      	mov	r1, r3
 8002fde:	1b00      	subs	r0, r0, r4
 8002fe0:	eb61 0105 	sbc.w	r1, r1, r5
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	018b      	lsls	r3, r1, #6
 8002fee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ff2:	0182      	lsls	r2, r0, #6
 8002ff4:	1a12      	subs	r2, r2, r0
 8002ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8002ffa:	f04f 0000 	mov.w	r0, #0
 8002ffe:	f04f 0100 	mov.w	r1, #0
 8003002:	00d9      	lsls	r1, r3, #3
 8003004:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003008:	00d0      	lsls	r0, r2, #3
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	1912      	adds	r2, r2, r4
 8003010:	eb45 0303 	adc.w	r3, r5, r3
 8003014:	f04f 0000 	mov.w	r0, #0
 8003018:	f04f 0100 	mov.w	r1, #0
 800301c:	0299      	lsls	r1, r3, #10
 800301e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003022:	0290      	lsls	r0, r2, #10
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4610      	mov	r0, r2
 800302a:	4619      	mov	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	461a      	mov	r2, r3
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	f7fd faa4 	bl	8000580 <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4613      	mov	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003040:	4b0a      	ldr	r3, [pc, #40]	; (800306c <HAL_RCC_GetSysClockFreq+0x160>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	0c1b      	lsrs	r3, r3, #16
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	3301      	adds	r3, #1
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	fbb2 f3f3 	udiv	r3, r2, r3
 8003058:	60bb      	str	r3, [r7, #8]
      break;
 800305a:	e002      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <HAL_RCC_GetSysClockFreq+0x164>)
 800305e:	60bb      	str	r3, [r7, #8]
      break;
 8003060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003062:	68bb      	ldr	r3, [r7, #8]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bdb0      	pop	{r4, r5, r7, pc}
 800306c:	40023800 	.word	0x40023800
 8003070:	00f42400 	.word	0x00f42400
 8003074:	017d7840 	.word	0x017d7840

08003078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800307c:	4b03      	ldr	r3, [pc, #12]	; (800308c <HAL_RCC_GetHCLKFreq+0x14>)
 800307e:	681b      	ldr	r3, [r3, #0]
}
 8003080:	4618      	mov	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	20000008 	.word	0x20000008

08003090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003094:	f7ff fff0 	bl	8003078 <HAL_RCC_GetHCLKFreq>
 8003098:	4602      	mov	r2, r0
 800309a:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	0a9b      	lsrs	r3, r3, #10
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	4903      	ldr	r1, [pc, #12]	; (80030b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030a6:	5ccb      	ldrb	r3, [r1, r3]
 80030a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40023800 	.word	0x40023800
 80030b4:	08003b34 	.word	0x08003b34

080030b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030bc:	f7ff ffdc 	bl	8003078 <HAL_RCC_GetHCLKFreq>
 80030c0:	4602      	mov	r2, r0
 80030c2:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	0b5b      	lsrs	r3, r3, #13
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	4903      	ldr	r1, [pc, #12]	; (80030dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ce:	5ccb      	ldrb	r3, [r1, r3]
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40023800 	.word	0x40023800
 80030dc:	08003b34 	.word	0x08003b34

080030e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e03f      	b.n	8003172 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fe f82c 	bl	8001164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2224      	movs	r2, #36	; 0x24
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003122:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f9cb 	bl	80034c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003138:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695a      	ldr	r2, [r3, #20]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003148:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003158:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b08a      	sub	sp, #40	; 0x28
 800317e:	af02      	add	r7, sp, #8
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	603b      	str	r3, [r7, #0]
 8003186:	4613      	mov	r3, r2
 8003188:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b20      	cmp	r3, #32
 8003198:	d17c      	bne.n	8003294 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <HAL_UART_Transmit+0x2c>
 80031a0:	88fb      	ldrh	r3, [r7, #6]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e075      	b.n	8003296 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_UART_Transmit+0x3e>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e06e      	b.n	8003296 <HAL_UART_Transmit+0x11c>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2221      	movs	r2, #33	; 0x21
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031ce:	f7fe f8dd 	bl	800138c <HAL_GetTick>
 80031d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	88fa      	ldrh	r2, [r7, #6]
 80031d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	88fa      	ldrh	r2, [r7, #6]
 80031de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e8:	d108      	bne.n	80031fc <HAL_UART_Transmit+0x82>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d104      	bne.n	80031fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	61bb      	str	r3, [r7, #24]
 80031fa:	e003      	b.n	8003204 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003200:	2300      	movs	r3, #0
 8003202:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800320c:	e02a      	b.n	8003264 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2200      	movs	r2, #0
 8003216:	2180      	movs	r1, #128	; 0x80
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f8e2 	bl	80033e2 <UART_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e036      	b.n	8003296 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10b      	bne.n	8003246 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800323c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	3302      	adds	r3, #2
 8003242:	61bb      	str	r3, [r7, #24]
 8003244:	e007      	b.n	8003256 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	781a      	ldrb	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	3301      	adds	r3, #1
 8003254:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1cf      	bne.n	800320e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2200      	movs	r2, #0
 8003276:	2140      	movs	r1, #64	; 0x40
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 f8b2 	bl	80033e2 <UART_WaitOnFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e006      	b.n	8003296 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	e000      	b.n	8003296 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003294:	2302      	movs	r3, #2
  }
}
 8003296:	4618      	mov	r0, r3
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b08a      	sub	sp, #40	; 0x28
 80032a2:	af02      	add	r7, sp, #8
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	4613      	mov	r3, r2
 80032ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	f040 808c 	bne.w	80033d8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <HAL_UART_Receive+0x2e>
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e084      	b.n	80033da <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_UART_Receive+0x40>
 80032da:	2302      	movs	r3, #2
 80032dc:	e07d      	b.n	80033da <HAL_UART_Receive+0x13c>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2222      	movs	r2, #34	; 0x22
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032fa:	f7fe f847 	bl	800138c <HAL_GetTick>
 80032fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	88fa      	ldrh	r2, [r7, #6]
 8003304:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	88fa      	ldrh	r2, [r7, #6]
 800330a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003314:	d108      	bne.n	8003328 <HAL_UART_Receive+0x8a>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d104      	bne.n	8003328 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	e003      	b.n	8003330 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800332c:	2300      	movs	r3, #0
 800332e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003338:	e043      	b.n	80033c2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2200      	movs	r2, #0
 8003342:	2120      	movs	r1, #32
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f84c 	bl	80033e2 <UART_WaitOnFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e042      	b.n	80033da <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10c      	bne.n	8003374 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	b29b      	uxth	r3, r3
 8003362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003366:	b29a      	uxth	r2, r3
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	3302      	adds	r3, #2
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	e01f      	b.n	80033b4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337c:	d007      	beq.n	800338e <HAL_UART_Receive+0xf0>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <HAL_UART_Receive+0xfe>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	b2da      	uxtb	r2, r3
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e008      	b.n	80033ae <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3301      	adds	r3, #1
 80033b2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b29a      	uxth	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1b6      	bne.n	800333a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e000      	b.n	80033da <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80033d8:	2302      	movs	r3, #2
  }
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3720      	adds	r7, #32
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b090      	sub	sp, #64	; 0x40
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	603b      	str	r3, [r7, #0]
 80033ee:	4613      	mov	r3, r2
 80033f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033f2:	e050      	b.n	8003496 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fa:	d04c      	beq.n	8003496 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d007      	beq.n	8003412 <UART_WaitOnFlagUntilTimeout+0x30>
 8003402:	f7fd ffc3 	bl	800138c <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800340e:	429a      	cmp	r2, r3
 8003410:	d241      	bcs.n	8003496 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	330c      	adds	r3, #12
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341c:	e853 3f00 	ldrex	r3, [r3]
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	330c      	adds	r3, #12
 8003430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003432:	637a      	str	r2, [r7, #52]	; 0x34
 8003434:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003436:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003438:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800343a:	e841 2300 	strex	r3, r2, [r1]
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1e5      	bne.n	8003412 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	3314      	adds	r3, #20
 800344c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	e853 3f00 	ldrex	r3, [r3]
 8003454:	613b      	str	r3, [r7, #16]
   return(result);
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f023 0301 	bic.w	r3, r3, #1
 800345c:	63bb      	str	r3, [r7, #56]	; 0x38
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3314      	adds	r3, #20
 8003464:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003466:	623a      	str	r2, [r7, #32]
 8003468:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346a:	69f9      	ldr	r1, [r7, #28]
 800346c:	6a3a      	ldr	r2, [r7, #32]
 800346e:	e841 2300 	strex	r3, r2, [r1]
 8003472:	61bb      	str	r3, [r7, #24]
   return(result);
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1e5      	bne.n	8003446 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e00f      	b.n	80034b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4013      	ands	r3, r2
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	bf0c      	ite	eq
 80034a6:	2301      	moveq	r3, #1
 80034a8:	2300      	movne	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d09f      	beq.n	80033f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3740      	adds	r7, #64	; 0x40
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c4:	b09f      	sub	sp, #124	; 0x7c
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d6:	68d9      	ldr	r1, [r3, #12]
 80034d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	ea40 0301 	orr.w	r3, r0, r1
 80034e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	431a      	orrs	r2, r3
 80034f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80034fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003504:	f021 010c 	bic.w	r1, r1, #12
 8003508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800350e:	430b      	orrs	r3, r1
 8003510:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800351c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351e:	6999      	ldr	r1, [r3, #24]
 8003520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	ea40 0301 	orr.w	r3, r0, r1
 8003528:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800352a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	4bc5      	ldr	r3, [pc, #788]	; (8003844 <UART_SetConfig+0x384>)
 8003530:	429a      	cmp	r2, r3
 8003532:	d004      	beq.n	800353e <UART_SetConfig+0x7e>
 8003534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4bc3      	ldr	r3, [pc, #780]	; (8003848 <UART_SetConfig+0x388>)
 800353a:	429a      	cmp	r2, r3
 800353c:	d103      	bne.n	8003546 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800353e:	f7ff fdbb 	bl	80030b8 <HAL_RCC_GetPCLK2Freq>
 8003542:	6778      	str	r0, [r7, #116]	; 0x74
 8003544:	e002      	b.n	800354c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003546:	f7ff fda3 	bl	8003090 <HAL_RCC_GetPCLK1Freq>
 800354a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800354c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003554:	f040 80b6 	bne.w	80036c4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800355a:	461c      	mov	r4, r3
 800355c:	f04f 0500 	mov.w	r5, #0
 8003560:	4622      	mov	r2, r4
 8003562:	462b      	mov	r3, r5
 8003564:	1891      	adds	r1, r2, r2
 8003566:	6439      	str	r1, [r7, #64]	; 0x40
 8003568:	415b      	adcs	r3, r3
 800356a:	647b      	str	r3, [r7, #68]	; 0x44
 800356c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003570:	1912      	adds	r2, r2, r4
 8003572:	eb45 0303 	adc.w	r3, r5, r3
 8003576:	f04f 0000 	mov.w	r0, #0
 800357a:	f04f 0100 	mov.w	r1, #0
 800357e:	00d9      	lsls	r1, r3, #3
 8003580:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003584:	00d0      	lsls	r0, r2, #3
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	1911      	adds	r1, r2, r4
 800358c:	6639      	str	r1, [r7, #96]	; 0x60
 800358e:	416b      	adcs	r3, r5
 8003590:	667b      	str	r3, [r7, #100]	; 0x64
 8003592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	461a      	mov	r2, r3
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	1891      	adds	r1, r2, r2
 800359e:	63b9      	str	r1, [r7, #56]	; 0x38
 80035a0:	415b      	adcs	r3, r3
 80035a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80035ac:	f7fc ffe8 	bl	8000580 <__aeabi_uldivmod>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4ba5      	ldr	r3, [pc, #660]	; (800384c <UART_SetConfig+0x38c>)
 80035b6:	fba3 2302 	umull	r2, r3, r3, r2
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	011e      	lsls	r6, r3, #4
 80035be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035c0:	461c      	mov	r4, r3
 80035c2:	f04f 0500 	mov.w	r5, #0
 80035c6:	4622      	mov	r2, r4
 80035c8:	462b      	mov	r3, r5
 80035ca:	1891      	adds	r1, r2, r2
 80035cc:	6339      	str	r1, [r7, #48]	; 0x30
 80035ce:	415b      	adcs	r3, r3
 80035d0:	637b      	str	r3, [r7, #52]	; 0x34
 80035d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035d6:	1912      	adds	r2, r2, r4
 80035d8:	eb45 0303 	adc.w	r3, r5, r3
 80035dc:	f04f 0000 	mov.w	r0, #0
 80035e0:	f04f 0100 	mov.w	r1, #0
 80035e4:	00d9      	lsls	r1, r3, #3
 80035e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035ea:	00d0      	lsls	r0, r2, #3
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	1911      	adds	r1, r2, r4
 80035f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80035f4:	416b      	adcs	r3, r5
 80035f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	461a      	mov	r2, r3
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	1891      	adds	r1, r2, r2
 8003604:	62b9      	str	r1, [r7, #40]	; 0x28
 8003606:	415b      	adcs	r3, r3
 8003608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800360a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800360e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003612:	f7fc ffb5 	bl	8000580 <__aeabi_uldivmod>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4b8c      	ldr	r3, [pc, #560]	; (800384c <UART_SetConfig+0x38c>)
 800361c:	fba3 1302 	umull	r1, r3, r3, r2
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	2164      	movs	r1, #100	; 0x64
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	3332      	adds	r3, #50	; 0x32
 800362e:	4a87      	ldr	r2, [pc, #540]	; (800384c <UART_SetConfig+0x38c>)
 8003630:	fba2 2303 	umull	r2, r3, r2, r3
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800363c:	441e      	add	r6, r3
 800363e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003640:	4618      	mov	r0, r3
 8003642:	f04f 0100 	mov.w	r1, #0
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	1894      	adds	r4, r2, r2
 800364c:	623c      	str	r4, [r7, #32]
 800364e:	415b      	adcs	r3, r3
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
 8003652:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003656:	1812      	adds	r2, r2, r0
 8003658:	eb41 0303 	adc.w	r3, r1, r3
 800365c:	f04f 0400 	mov.w	r4, #0
 8003660:	f04f 0500 	mov.w	r5, #0
 8003664:	00dd      	lsls	r5, r3, #3
 8003666:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800366a:	00d4      	lsls	r4, r2, #3
 800366c:	4622      	mov	r2, r4
 800366e:	462b      	mov	r3, r5
 8003670:	1814      	adds	r4, r2, r0
 8003672:	653c      	str	r4, [r7, #80]	; 0x50
 8003674:	414b      	adcs	r3, r1
 8003676:	657b      	str	r3, [r7, #84]	; 0x54
 8003678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	461a      	mov	r2, r3
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	1891      	adds	r1, r2, r2
 8003684:	61b9      	str	r1, [r7, #24]
 8003686:	415b      	adcs	r3, r3
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800368e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003692:	f7fc ff75 	bl	8000580 <__aeabi_uldivmod>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4b6c      	ldr	r3, [pc, #432]	; (800384c <UART_SetConfig+0x38c>)
 800369c:	fba3 1302 	umull	r1, r3, r3, r2
 80036a0:	095b      	lsrs	r3, r3, #5
 80036a2:	2164      	movs	r1, #100	; 0x64
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	3332      	adds	r3, #50	; 0x32
 80036ae:	4a67      	ldr	r2, [pc, #412]	; (800384c <UART_SetConfig+0x38c>)
 80036b0:	fba2 2303 	umull	r2, r3, r2, r3
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	f003 0207 	and.w	r2, r3, #7
 80036ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4432      	add	r2, r6
 80036c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036c2:	e0b9      	b.n	8003838 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036c6:	461c      	mov	r4, r3
 80036c8:	f04f 0500 	mov.w	r5, #0
 80036cc:	4622      	mov	r2, r4
 80036ce:	462b      	mov	r3, r5
 80036d0:	1891      	adds	r1, r2, r2
 80036d2:	6139      	str	r1, [r7, #16]
 80036d4:	415b      	adcs	r3, r3
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80036dc:	1912      	adds	r2, r2, r4
 80036de:	eb45 0303 	adc.w	r3, r5, r3
 80036e2:	f04f 0000 	mov.w	r0, #0
 80036e6:	f04f 0100 	mov.w	r1, #0
 80036ea:	00d9      	lsls	r1, r3, #3
 80036ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036f0:	00d0      	lsls	r0, r2, #3
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	eb12 0804 	adds.w	r8, r2, r4
 80036fa:	eb43 0905 	adc.w	r9, r3, r5
 80036fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4618      	mov	r0, r3
 8003704:	f04f 0100 	mov.w	r1, #0
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	008b      	lsls	r3, r1, #2
 8003712:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003716:	0082      	lsls	r2, r0, #2
 8003718:	4640      	mov	r0, r8
 800371a:	4649      	mov	r1, r9
 800371c:	f7fc ff30 	bl	8000580 <__aeabi_uldivmod>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4b49      	ldr	r3, [pc, #292]	; (800384c <UART_SetConfig+0x38c>)
 8003726:	fba3 2302 	umull	r2, r3, r3, r2
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	011e      	lsls	r6, r3, #4
 800372e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003730:	4618      	mov	r0, r3
 8003732:	f04f 0100 	mov.w	r1, #0
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	1894      	adds	r4, r2, r2
 800373c:	60bc      	str	r4, [r7, #8]
 800373e:	415b      	adcs	r3, r3
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003746:	1812      	adds	r2, r2, r0
 8003748:	eb41 0303 	adc.w	r3, r1, r3
 800374c:	f04f 0400 	mov.w	r4, #0
 8003750:	f04f 0500 	mov.w	r5, #0
 8003754:	00dd      	lsls	r5, r3, #3
 8003756:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800375a:	00d4      	lsls	r4, r2, #3
 800375c:	4622      	mov	r2, r4
 800375e:	462b      	mov	r3, r5
 8003760:	1814      	adds	r4, r2, r0
 8003762:	64bc      	str	r4, [r7, #72]	; 0x48
 8003764:	414b      	adcs	r3, r1
 8003766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4618      	mov	r0, r3
 800376e:	f04f 0100 	mov.w	r1, #0
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	008b      	lsls	r3, r1, #2
 800377c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003780:	0082      	lsls	r2, r0, #2
 8003782:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003786:	f7fc fefb 	bl	8000580 <__aeabi_uldivmod>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4b2f      	ldr	r3, [pc, #188]	; (800384c <UART_SetConfig+0x38c>)
 8003790:	fba3 1302 	umull	r1, r3, r3, r2
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	2164      	movs	r1, #100	; 0x64
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	3332      	adds	r3, #50	; 0x32
 80037a2:	4a2a      	ldr	r2, [pc, #168]	; (800384c <UART_SetConfig+0x38c>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ae:	441e      	add	r6, r3
 80037b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037b2:	4618      	mov	r0, r3
 80037b4:	f04f 0100 	mov.w	r1, #0
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	1894      	adds	r4, r2, r2
 80037be:	603c      	str	r4, [r7, #0]
 80037c0:	415b      	adcs	r3, r3
 80037c2:	607b      	str	r3, [r7, #4]
 80037c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037c8:	1812      	adds	r2, r2, r0
 80037ca:	eb41 0303 	adc.w	r3, r1, r3
 80037ce:	f04f 0400 	mov.w	r4, #0
 80037d2:	f04f 0500 	mov.w	r5, #0
 80037d6:	00dd      	lsls	r5, r3, #3
 80037d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037dc:	00d4      	lsls	r4, r2, #3
 80037de:	4622      	mov	r2, r4
 80037e0:	462b      	mov	r3, r5
 80037e2:	eb12 0a00 	adds.w	sl, r2, r0
 80037e6:	eb43 0b01 	adc.w	fp, r3, r1
 80037ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f04f 0100 	mov.w	r1, #0
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	008b      	lsls	r3, r1, #2
 80037fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003802:	0082      	lsls	r2, r0, #2
 8003804:	4650      	mov	r0, sl
 8003806:	4659      	mov	r1, fp
 8003808:	f7fc feba 	bl	8000580 <__aeabi_uldivmod>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4b0e      	ldr	r3, [pc, #56]	; (800384c <UART_SetConfig+0x38c>)
 8003812:	fba3 1302 	umull	r1, r3, r3, r2
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	2164      	movs	r1, #100	; 0x64
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	3332      	adds	r3, #50	; 0x32
 8003824:	4a09      	ldr	r2, [pc, #36]	; (800384c <UART_SetConfig+0x38c>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	f003 020f 	and.w	r2, r3, #15
 8003830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4432      	add	r2, r6
 8003836:	609a      	str	r2, [r3, #8]
}
 8003838:	bf00      	nop
 800383a:	377c      	adds	r7, #124	; 0x7c
 800383c:	46bd      	mov	sp, r7
 800383e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003842:	bf00      	nop
 8003844:	40011000 	.word	0x40011000
 8003848:	40011400 	.word	0x40011400
 800384c:	51eb851f 	.word	0x51eb851f

08003850 <__libc_init_array>:
 8003850:	b570      	push	{r4, r5, r6, lr}
 8003852:	4d0d      	ldr	r5, [pc, #52]	; (8003888 <__libc_init_array+0x38>)
 8003854:	4c0d      	ldr	r4, [pc, #52]	; (800388c <__libc_init_array+0x3c>)
 8003856:	1b64      	subs	r4, r4, r5
 8003858:	10a4      	asrs	r4, r4, #2
 800385a:	2600      	movs	r6, #0
 800385c:	42a6      	cmp	r6, r4
 800385e:	d109      	bne.n	8003874 <__libc_init_array+0x24>
 8003860:	4d0b      	ldr	r5, [pc, #44]	; (8003890 <__libc_init_array+0x40>)
 8003862:	4c0c      	ldr	r4, [pc, #48]	; (8003894 <__libc_init_array+0x44>)
 8003864:	f000 f866 	bl	8003934 <_init>
 8003868:	1b64      	subs	r4, r4, r5
 800386a:	10a4      	asrs	r4, r4, #2
 800386c:	2600      	movs	r6, #0
 800386e:	42a6      	cmp	r6, r4
 8003870:	d105      	bne.n	800387e <__libc_init_array+0x2e>
 8003872:	bd70      	pop	{r4, r5, r6, pc}
 8003874:	f855 3b04 	ldr.w	r3, [r5], #4
 8003878:	4798      	blx	r3
 800387a:	3601      	adds	r6, #1
 800387c:	e7ee      	b.n	800385c <__libc_init_array+0xc>
 800387e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003882:	4798      	blx	r3
 8003884:	3601      	adds	r6, #1
 8003886:	e7f2      	b.n	800386e <__libc_init_array+0x1e>
 8003888:	08003b44 	.word	0x08003b44
 800388c:	08003b44 	.word	0x08003b44
 8003890:	08003b44 	.word	0x08003b44
 8003894:	08003b48 	.word	0x08003b48

08003898 <memset>:
 8003898:	4402      	add	r2, r0
 800389a:	4603      	mov	r3, r0
 800389c:	4293      	cmp	r3, r2
 800389e:	d100      	bne.n	80038a2 <memset+0xa>
 80038a0:	4770      	bx	lr
 80038a2:	f803 1b01 	strb.w	r1, [r3], #1
 80038a6:	e7f9      	b.n	800389c <memset+0x4>

080038a8 <round>:
 80038a8:	ec51 0b10 	vmov	r0, r1, d0
 80038ac:	b570      	push	{r4, r5, r6, lr}
 80038ae:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80038b2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80038b6:	2c13      	cmp	r4, #19
 80038b8:	ee10 2a10 	vmov	r2, s0
 80038bc:	460b      	mov	r3, r1
 80038be:	dc19      	bgt.n	80038f4 <round+0x4c>
 80038c0:	2c00      	cmp	r4, #0
 80038c2:	da09      	bge.n	80038d8 <round+0x30>
 80038c4:	3401      	adds	r4, #1
 80038c6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80038ca:	d103      	bne.n	80038d4 <round+0x2c>
 80038cc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80038d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80038d4:	2100      	movs	r1, #0
 80038d6:	e028      	b.n	800392a <round+0x82>
 80038d8:	4d15      	ldr	r5, [pc, #84]	; (8003930 <round+0x88>)
 80038da:	4125      	asrs	r5, r4
 80038dc:	ea01 0605 	and.w	r6, r1, r5
 80038e0:	4332      	orrs	r2, r6
 80038e2:	d00e      	beq.n	8003902 <round+0x5a>
 80038e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80038e8:	fa42 f404 	asr.w	r4, r2, r4
 80038ec:	4423      	add	r3, r4
 80038ee:	ea23 0305 	bic.w	r3, r3, r5
 80038f2:	e7ef      	b.n	80038d4 <round+0x2c>
 80038f4:	2c33      	cmp	r4, #51	; 0x33
 80038f6:	dd07      	ble.n	8003908 <round+0x60>
 80038f8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80038fc:	d101      	bne.n	8003902 <round+0x5a>
 80038fe:	f7fc fc69 	bl	80001d4 <__adddf3>
 8003902:	ec41 0b10 	vmov	d0, r0, r1
 8003906:	bd70      	pop	{r4, r5, r6, pc}
 8003908:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800390c:	f04f 35ff 	mov.w	r5, #4294967295
 8003910:	40f5      	lsrs	r5, r6
 8003912:	4228      	tst	r0, r5
 8003914:	d0f5      	beq.n	8003902 <round+0x5a>
 8003916:	2101      	movs	r1, #1
 8003918:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800391c:	fa01 f404 	lsl.w	r4, r1, r4
 8003920:	1912      	adds	r2, r2, r4
 8003922:	bf28      	it	cs
 8003924:	185b      	addcs	r3, r3, r1
 8003926:	ea22 0105 	bic.w	r1, r2, r5
 800392a:	4608      	mov	r0, r1
 800392c:	4619      	mov	r1, r3
 800392e:	e7e8      	b.n	8003902 <round+0x5a>
 8003930:	000fffff 	.word	0x000fffff

08003934 <_init>:
 8003934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003936:	bf00      	nop
 8003938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800393a:	bc08      	pop	{r3}
 800393c:	469e      	mov	lr, r3
 800393e:	4770      	bx	lr

08003940 <_fini>:
 8003940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003942:	bf00      	nop
 8003944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003946:	bc08      	pop	{r3}
 8003948:	469e      	mov	lr, r3
 800394a:	4770      	bx	lr
