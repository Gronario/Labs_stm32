
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004540  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047bc  080047bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080047bc  080047bc  000147bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047c4  080047c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047c4  080047c4  000147c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047c8  080047c8  000147c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080047cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000118  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000188  20000188  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f817  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cec  00000000  00000000  0002f8b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  000315a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf0  00000000  00000000  00032240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022411  00000000  00000000  00032e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e59c  00000000  00000000  00055241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7b3e  00000000  00000000  000637dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013b31b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a24  00000000  00000000  0013b370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080046b8 	.word	0x080046b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080046b8 	.word	0x080046b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2f>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000844:	bf24      	itt	cs
 8000846:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800084a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800084e:	d90d      	bls.n	800086c <__aeabi_d2f+0x30>
 8000850:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000854:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000858:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800085c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000860:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000864:	bf08      	it	eq
 8000866:	f020 0001 	biceq.w	r0, r0, #1
 800086a:	4770      	bx	lr
 800086c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000870:	d121      	bne.n	80008b6 <__aeabi_d2f+0x7a>
 8000872:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000876:	bfbc      	itt	lt
 8000878:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800087c:	4770      	bxlt	lr
 800087e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000882:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000886:	f1c2 0218 	rsb	r2, r2, #24
 800088a:	f1c2 0c20 	rsb	ip, r2, #32
 800088e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000892:	fa20 f002 	lsr.w	r0, r0, r2
 8000896:	bf18      	it	ne
 8000898:	f040 0001 	orrne.w	r0, r0, #1
 800089c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008a8:	ea40 000c 	orr.w	r0, r0, ip
 80008ac:	fa23 f302 	lsr.w	r3, r3, r2
 80008b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008b4:	e7cc      	b.n	8000850 <__aeabi_d2f+0x14>
 80008b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ba:	d107      	bne.n	80008cc <__aeabi_d2f+0x90>
 80008bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008c0:	bf1e      	ittt	ne
 80008c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ca:	4770      	bxne	lr
 80008cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295
 80008f0:	f000 b96e 	b.w	8000bd0 <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9d08      	ldr	r5, [sp, #32]
 8000912:	4604      	mov	r4, r0
 8000914:	468c      	mov	ip, r1
 8000916:	2b00      	cmp	r3, #0
 8000918:	f040 8083 	bne.w	8000a22 <__udivmoddi4+0x116>
 800091c:	428a      	cmp	r2, r1
 800091e:	4617      	mov	r7, r2
 8000920:	d947      	bls.n	80009b2 <__udivmoddi4+0xa6>
 8000922:	fab2 f282 	clz	r2, r2
 8000926:	b142      	cbz	r2, 800093a <__udivmoddi4+0x2e>
 8000928:	f1c2 0020 	rsb	r0, r2, #32
 800092c:	fa24 f000 	lsr.w	r0, r4, r0
 8000930:	4091      	lsls	r1, r2
 8000932:	4097      	lsls	r7, r2
 8000934:	ea40 0c01 	orr.w	ip, r0, r1
 8000938:	4094      	lsls	r4, r2
 800093a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800093e:	0c23      	lsrs	r3, r4, #16
 8000940:	fbbc f6f8 	udiv	r6, ip, r8
 8000944:	fa1f fe87 	uxth.w	lr, r7
 8000948:	fb08 c116 	mls	r1, r8, r6, ip
 800094c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000950:	fb06 f10e 	mul.w	r1, r6, lr
 8000954:	4299      	cmp	r1, r3
 8000956:	d909      	bls.n	800096c <__udivmoddi4+0x60>
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	f106 30ff 	add.w	r0, r6, #4294967295
 800095e:	f080 8119 	bcs.w	8000b94 <__udivmoddi4+0x288>
 8000962:	4299      	cmp	r1, r3
 8000964:	f240 8116 	bls.w	8000b94 <__udivmoddi4+0x288>
 8000968:	3e02      	subs	r6, #2
 800096a:	443b      	add	r3, r7
 800096c:	1a5b      	subs	r3, r3, r1
 800096e:	b2a4      	uxth	r4, r4
 8000970:	fbb3 f0f8 	udiv	r0, r3, r8
 8000974:	fb08 3310 	mls	r3, r8, r0, r3
 8000978:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800097c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000980:	45a6      	cmp	lr, r4
 8000982:	d909      	bls.n	8000998 <__udivmoddi4+0x8c>
 8000984:	193c      	adds	r4, r7, r4
 8000986:	f100 33ff 	add.w	r3, r0, #4294967295
 800098a:	f080 8105 	bcs.w	8000b98 <__udivmoddi4+0x28c>
 800098e:	45a6      	cmp	lr, r4
 8000990:	f240 8102 	bls.w	8000b98 <__udivmoddi4+0x28c>
 8000994:	3802      	subs	r0, #2
 8000996:	443c      	add	r4, r7
 8000998:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800099c:	eba4 040e 	sub.w	r4, r4, lr
 80009a0:	2600      	movs	r6, #0
 80009a2:	b11d      	cbz	r5, 80009ac <__udivmoddi4+0xa0>
 80009a4:	40d4      	lsrs	r4, r2
 80009a6:	2300      	movs	r3, #0
 80009a8:	e9c5 4300 	strd	r4, r3, [r5]
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	b902      	cbnz	r2, 80009b6 <__udivmoddi4+0xaa>
 80009b4:	deff      	udf	#255	; 0xff
 80009b6:	fab2 f282 	clz	r2, r2
 80009ba:	2a00      	cmp	r2, #0
 80009bc:	d150      	bne.n	8000a60 <__udivmoddi4+0x154>
 80009be:	1bcb      	subs	r3, r1, r7
 80009c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009c4:	fa1f f887 	uxth.w	r8, r7
 80009c8:	2601      	movs	r6, #1
 80009ca:	fbb3 fcfe 	udiv	ip, r3, lr
 80009ce:	0c21      	lsrs	r1, r4, #16
 80009d0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009d8:	fb08 f30c 	mul.w	r3, r8, ip
 80009dc:	428b      	cmp	r3, r1
 80009de:	d907      	bls.n	80009f0 <__udivmoddi4+0xe4>
 80009e0:	1879      	adds	r1, r7, r1
 80009e2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0xe2>
 80009e8:	428b      	cmp	r3, r1
 80009ea:	f200 80e9 	bhi.w	8000bc0 <__udivmoddi4+0x2b4>
 80009ee:	4684      	mov	ip, r0
 80009f0:	1ac9      	subs	r1, r1, r3
 80009f2:	b2a3      	uxth	r3, r4
 80009f4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009f8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009fc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a00:	fb08 f800 	mul.w	r8, r8, r0
 8000a04:	45a0      	cmp	r8, r4
 8000a06:	d907      	bls.n	8000a18 <__udivmoddi4+0x10c>
 8000a08:	193c      	adds	r4, r7, r4
 8000a0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a0e:	d202      	bcs.n	8000a16 <__udivmoddi4+0x10a>
 8000a10:	45a0      	cmp	r8, r4
 8000a12:	f200 80d9 	bhi.w	8000bc8 <__udivmoddi4+0x2bc>
 8000a16:	4618      	mov	r0, r3
 8000a18:	eba4 0408 	sub.w	r4, r4, r8
 8000a1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a20:	e7bf      	b.n	80009a2 <__udivmoddi4+0x96>
 8000a22:	428b      	cmp	r3, r1
 8000a24:	d909      	bls.n	8000a3a <__udivmoddi4+0x12e>
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	f000 80b1 	beq.w	8000b8e <__udivmoddi4+0x282>
 8000a2c:	2600      	movs	r6, #0
 8000a2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a32:	4630      	mov	r0, r6
 8000a34:	4631      	mov	r1, r6
 8000a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3a:	fab3 f683 	clz	r6, r3
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	d14a      	bne.n	8000ad8 <__udivmoddi4+0x1cc>
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d302      	bcc.n	8000a4c <__udivmoddi4+0x140>
 8000a46:	4282      	cmp	r2, r0
 8000a48:	f200 80b8 	bhi.w	8000bbc <__udivmoddi4+0x2b0>
 8000a4c:	1a84      	subs	r4, r0, r2
 8000a4e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a52:	2001      	movs	r0, #1
 8000a54:	468c      	mov	ip, r1
 8000a56:	2d00      	cmp	r5, #0
 8000a58:	d0a8      	beq.n	80009ac <__udivmoddi4+0xa0>
 8000a5a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a5e:	e7a5      	b.n	80009ac <__udivmoddi4+0xa0>
 8000a60:	f1c2 0320 	rsb	r3, r2, #32
 8000a64:	fa20 f603 	lsr.w	r6, r0, r3
 8000a68:	4097      	lsls	r7, r2
 8000a6a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a6e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a72:	40d9      	lsrs	r1, r3
 8000a74:	4330      	orrs	r0, r6
 8000a76:	0c03      	lsrs	r3, r0, #16
 8000a78:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a7c:	fa1f f887 	uxth.w	r8, r7
 8000a80:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a88:	fb06 f108 	mul.w	r1, r6, r8
 8000a8c:	4299      	cmp	r1, r3
 8000a8e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a92:	d909      	bls.n	8000aa8 <__udivmoddi4+0x19c>
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a9a:	f080 808d 	bcs.w	8000bb8 <__udivmoddi4+0x2ac>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 808a 	bls.w	8000bb8 <__udivmoddi4+0x2ac>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	443b      	add	r3, r7
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b281      	uxth	r1, r0
 8000aac:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ab0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ab4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ab8:	fb00 f308 	mul.w	r3, r0, r8
 8000abc:	428b      	cmp	r3, r1
 8000abe:	d907      	bls.n	8000ad0 <__udivmoddi4+0x1c4>
 8000ac0:	1879      	adds	r1, r7, r1
 8000ac2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ac6:	d273      	bcs.n	8000bb0 <__udivmoddi4+0x2a4>
 8000ac8:	428b      	cmp	r3, r1
 8000aca:	d971      	bls.n	8000bb0 <__udivmoddi4+0x2a4>
 8000acc:	3802      	subs	r0, #2
 8000ace:	4439      	add	r1, r7
 8000ad0:	1acb      	subs	r3, r1, r3
 8000ad2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ad6:	e778      	b.n	80009ca <__udivmoddi4+0xbe>
 8000ad8:	f1c6 0c20 	rsb	ip, r6, #32
 8000adc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ae0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ae4:	431c      	orrs	r4, r3
 8000ae6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aea:	fa01 f306 	lsl.w	r3, r1, r6
 8000aee:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000af2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000af6:	431f      	orrs	r7, r3
 8000af8:	0c3b      	lsrs	r3, r7, #16
 8000afa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000afe:	fa1f f884 	uxth.w	r8, r4
 8000b02:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b06:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b0a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b0e:	458a      	cmp	sl, r1
 8000b10:	fa02 f206 	lsl.w	r2, r2, r6
 8000b14:	fa00 f306 	lsl.w	r3, r0, r6
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x220>
 8000b1a:	1861      	adds	r1, r4, r1
 8000b1c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b20:	d248      	bcs.n	8000bb4 <__udivmoddi4+0x2a8>
 8000b22:	458a      	cmp	sl, r1
 8000b24:	d946      	bls.n	8000bb4 <__udivmoddi4+0x2a8>
 8000b26:	f1a9 0902 	sub.w	r9, r9, #2
 8000b2a:	4421      	add	r1, r4
 8000b2c:	eba1 010a 	sub.w	r1, r1, sl
 8000b30:	b2bf      	uxth	r7, r7
 8000b32:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b36:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b3a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b3e:	fb00 f808 	mul.w	r8, r0, r8
 8000b42:	45b8      	cmp	r8, r7
 8000b44:	d907      	bls.n	8000b56 <__udivmoddi4+0x24a>
 8000b46:	19e7      	adds	r7, r4, r7
 8000b48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4c:	d22e      	bcs.n	8000bac <__udivmoddi4+0x2a0>
 8000b4e:	45b8      	cmp	r8, r7
 8000b50:	d92c      	bls.n	8000bac <__udivmoddi4+0x2a0>
 8000b52:	3802      	subs	r0, #2
 8000b54:	4427      	add	r7, r4
 8000b56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b5a:	eba7 0708 	sub.w	r7, r7, r8
 8000b5e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b62:	454f      	cmp	r7, r9
 8000b64:	46c6      	mov	lr, r8
 8000b66:	4649      	mov	r1, r9
 8000b68:	d31a      	bcc.n	8000ba0 <__udivmoddi4+0x294>
 8000b6a:	d017      	beq.n	8000b9c <__udivmoddi4+0x290>
 8000b6c:	b15d      	cbz	r5, 8000b86 <__udivmoddi4+0x27a>
 8000b6e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b72:	eb67 0701 	sbc.w	r7, r7, r1
 8000b76:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b7a:	40f2      	lsrs	r2, r6
 8000b7c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b80:	40f7      	lsrs	r7, r6
 8000b82:	e9c5 2700 	strd	r2, r7, [r5]
 8000b86:	2600      	movs	r6, #0
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	462e      	mov	r6, r5
 8000b90:	4628      	mov	r0, r5
 8000b92:	e70b      	b.n	80009ac <__udivmoddi4+0xa0>
 8000b94:	4606      	mov	r6, r0
 8000b96:	e6e9      	b.n	800096c <__udivmoddi4+0x60>
 8000b98:	4618      	mov	r0, r3
 8000b9a:	e6fd      	b.n	8000998 <__udivmoddi4+0x8c>
 8000b9c:	4543      	cmp	r3, r8
 8000b9e:	d2e5      	bcs.n	8000b6c <__udivmoddi4+0x260>
 8000ba0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ba4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ba8:	3801      	subs	r0, #1
 8000baa:	e7df      	b.n	8000b6c <__udivmoddi4+0x260>
 8000bac:	4608      	mov	r0, r1
 8000bae:	e7d2      	b.n	8000b56 <__udivmoddi4+0x24a>
 8000bb0:	4660      	mov	r0, ip
 8000bb2:	e78d      	b.n	8000ad0 <__udivmoddi4+0x1c4>
 8000bb4:	4681      	mov	r9, r0
 8000bb6:	e7b9      	b.n	8000b2c <__udivmoddi4+0x220>
 8000bb8:	4666      	mov	r6, ip
 8000bba:	e775      	b.n	8000aa8 <__udivmoddi4+0x19c>
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	e74a      	b.n	8000a56 <__udivmoddi4+0x14a>
 8000bc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bc4:	4439      	add	r1, r7
 8000bc6:	e713      	b.n	80009f0 <__udivmoddi4+0xe4>
 8000bc8:	3802      	subs	r0, #2
 8000bca:	443c      	add	r4, r7
 8000bcc:	e724      	b.n	8000a18 <__udivmoddi4+0x10c>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_idiv0>:
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80fb      	strh	r3, [r7, #6]

	  switch(GPIO_PIN){
 8000bde:	88fb      	ldrh	r3, [r7, #6]
 8000be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000be4:	d029      	beq.n	8000c3a <HAL_GPIO_EXTI_Callback+0x66>
 8000be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bea:	dc77      	bgt.n	8000cdc <HAL_GPIO_EXTI_Callback+0x108>
 8000bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bf0:	d008      	beq.n	8000c04 <HAL_GPIO_EXTI_Callback+0x30>
 8000bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bf6:	dc71      	bgt.n	8000cdc <HAL_GPIO_EXTI_Callback+0x108>
 8000bf8:	2b40      	cmp	r3, #64	; 0x40
 8000bfa:	d054      	beq.n	8000ca6 <HAL_GPIO_EXTI_Callback+0xd2>
 8000bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c00:	d036      	beq.n	8000c70 <HAL_GPIO_EXTI_Callback+0x9c>
 8000c02:	e06b      	b.n	8000cdc <HAL_GPIO_EXTI_Callback+0x108>

		  case But1_Pin:
			  HAL_GPIO_TogglePin(Blue_LED_GPIO_Port,Blue_LED_Pin);
 8000c04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c08:	483a      	ldr	r0, [pc, #232]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x120>)
 8000c0a:	f001 fc36 	bl	800247a <HAL_GPIO_TogglePin>

			  if(HAL_GPIO_ReadPin(Blue_LED_GPIO_Port,Blue_LED_Pin) == GPIO_PIN_SET){
 8000c0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c12:	4838      	ldr	r0, [pc, #224]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x120>)
 8000c14:	f001 fc00 	bl	8002418 <HAL_GPIO_ReadPin>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d106      	bne.n	8000c2c <HAL_GPIO_EXTI_Callback+0x58>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"Blue ON\r\n", 7+2,10);
 8000c1e:	230a      	movs	r3, #10
 8000c20:	2209      	movs	r2, #9
 8000c22:	4935      	ldr	r1, [pc, #212]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x124>)
 8000c24:	4835      	ldr	r0, [pc, #212]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x128>)
 8000c26:	f002 fd7c 	bl	8003722 <HAL_UART_Transmit>
			  }
			  else{
				  HAL_UART_Transmit(&huart3, (uint8_t *)"Blue OFF\r\n", 8+2,10);
			  }

			  break;
 8000c2a:	e05e      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x116>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"Blue OFF\r\n", 8+2,10);
 8000c2c:	230a      	movs	r3, #10
 8000c2e:	220a      	movs	r2, #10
 8000c30:	4933      	ldr	r1, [pc, #204]	; (8000d00 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000c32:	4832      	ldr	r0, [pc, #200]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x128>)
 8000c34:	f002 fd75 	bl	8003722 <HAL_UART_Transmit>
			  break;
 8000c38:	e057      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x116>

		  case But2_Pin:
			  HAL_GPIO_TogglePin(Orange_LED_GPIO_Port,Orange_LED_Pin);
 8000c3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3e:	482d      	ldr	r0, [pc, #180]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x120>)
 8000c40:	f001 fc1b 	bl	800247a <HAL_GPIO_TogglePin>

			  if(HAL_GPIO_ReadPin(Orange_LED_GPIO_Port,Orange_LED_Pin) == GPIO_PIN_SET){
 8000c44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c48:	482a      	ldr	r0, [pc, #168]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x120>)
 8000c4a:	f001 fbe5 	bl	8002418 <HAL_GPIO_ReadPin>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d106      	bne.n	8000c62 <HAL_GPIO_EXTI_Callback+0x8e>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"Orange ON\r\n", 9+2,10);
 8000c54:	230a      	movs	r3, #10
 8000c56:	220b      	movs	r2, #11
 8000c58:	492a      	ldr	r1, [pc, #168]	; (8000d04 <HAL_GPIO_EXTI_Callback+0x130>)
 8000c5a:	4828      	ldr	r0, [pc, #160]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x128>)
 8000c5c:	f002 fd61 	bl	8003722 <HAL_UART_Transmit>
			  }
			  else{
				  HAL_UART_Transmit(&huart3, (uint8_t *)"Orange OFF\r\n", 10+2,10);
			  }
			  break;
 8000c60:	e043      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x116>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"Orange OFF\r\n", 10+2,10);
 8000c62:	230a      	movs	r3, #10
 8000c64:	220c      	movs	r2, #12
 8000c66:	4928      	ldr	r1, [pc, #160]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x134>)
 8000c68:	4824      	ldr	r0, [pc, #144]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x128>)
 8000c6a:	f002 fd5a 	bl	8003722 <HAL_UART_Transmit>
			  break;
 8000c6e:	e03c      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x116>

		  case But3_Pin:
			  HAL_GPIO_TogglePin(Red_LED_GPIO_Port,Red_LED_Pin);
 8000c70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c74:	481f      	ldr	r0, [pc, #124]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x120>)
 8000c76:	f001 fc00 	bl	800247a <HAL_GPIO_TogglePin>
			  if(HAL_GPIO_ReadPin(Red_LED_GPIO_Port,Red_LED_Pin) == GPIO_PIN_SET){
 8000c7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c7e:	481d      	ldr	r0, [pc, #116]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x120>)
 8000c80:	f001 fbca 	bl	8002418 <HAL_GPIO_ReadPin>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d106      	bne.n	8000c98 <HAL_GPIO_EXTI_Callback+0xc4>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"Red ON\r\n", 6+2,10);
 8000c8a:	230a      	movs	r3, #10
 8000c8c:	2208      	movs	r2, #8
 8000c8e:	491f      	ldr	r1, [pc, #124]	; (8000d0c <HAL_GPIO_EXTI_Callback+0x138>)
 8000c90:	481a      	ldr	r0, [pc, #104]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x128>)
 8000c92:	f002 fd46 	bl	8003722 <HAL_UART_Transmit>
			  }
			  else{
				  HAL_UART_Transmit(&huart3, (uint8_t *)"Red OFF\r\n", 7+2,10);
			  }
			  break;
 8000c96:	e028      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x116>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"Red OFF\r\n", 7+2,10);
 8000c98:	230a      	movs	r3, #10
 8000c9a:	2209      	movs	r2, #9
 8000c9c:	491c      	ldr	r1, [pc, #112]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000c9e:	4817      	ldr	r0, [pc, #92]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x128>)
 8000ca0:	f002 fd3f 	bl	8003722 <HAL_UART_Transmit>
			  break;
 8000ca4:	e021      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x116>

		  case But4_Pin:
			  HAL_GPIO_TogglePin(Green_LED_GPIO_Port,Green_LED_Pin);
 8000ca6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000caa:	4812      	ldr	r0, [pc, #72]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x120>)
 8000cac:	f001 fbe5 	bl	800247a <HAL_GPIO_TogglePin>
			  if(HAL_GPIO_ReadPin(Green_LED_GPIO_Port,Green_LED_Pin) == GPIO_PIN_SET){
 8000cb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb4:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x120>)
 8000cb6:	f001 fbaf 	bl	8002418 <HAL_GPIO_ReadPin>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d106      	bne.n	8000cce <HAL_GPIO_EXTI_Callback+0xfa>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"Green ON\r\n", 8+2,10);
 8000cc0:	230a      	movs	r3, #10
 8000cc2:	220a      	movs	r2, #10
 8000cc4:	4913      	ldr	r1, [pc, #76]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x140>)
 8000cc6:	480d      	ldr	r0, [pc, #52]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x128>)
 8000cc8:	f002 fd2b 	bl	8003722 <HAL_UART_Transmit>
			  }
			  else{
				  HAL_UART_Transmit(&huart3, (uint8_t *)"Green OFF\r\n", 9+2,10);
			  }
			  break;
 8000ccc:	e00d      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x116>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"Green OFF\r\n", 9+2,10);
 8000cce:	230a      	movs	r3, #10
 8000cd0:	220b      	movs	r2, #11
 8000cd2:	4911      	ldr	r1, [pc, #68]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x144>)
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x128>)
 8000cd6:	f002 fd24 	bl	8003722 <HAL_UART_Transmit>
			  break;
 8000cda:	e006      	b.n	8000cea <HAL_GPIO_EXTI_Callback+0x116>

		  default:
			  HAL_UART_Transmit(&huart3, (uint8_t *)"UnexpCmd\r\n", 8+2,10);
 8000cdc:	230a      	movs	r3, #10
 8000cde:	220a      	movs	r2, #10
 8000ce0:	490e      	ldr	r1, [pc, #56]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x148>)
 8000ce2:	4806      	ldr	r0, [pc, #24]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x128>)
 8000ce4:	f002 fd1d 	bl	8003722 <HAL_UART_Transmit>
			  break;
 8000ce8:	bf00      	nop
	  }
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40020c00 	.word	0x40020c00
 8000cf8:	080046d0 	.word	0x080046d0
 8000cfc:	200000e0 	.word	0x200000e0
 8000d00:	080046dc 	.word	0x080046dc
 8000d04:	080046e8 	.word	0x080046e8
 8000d08:	080046f4 	.word	0x080046f4
 8000d0c:	08004704 	.word	0x08004704
 8000d10:	08004710 	.word	0x08004710
 8000d14:	0800471c 	.word	0x0800471c
 8000d18:	08004728 	.word	0x08004728
 8000d1c:	08004734 	.word	0x08004734

08000d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d26:	f000 fc8b 	bl	8001640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2a:	f000 f8ff 	bl	8000f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2e:	f000 fa25 	bl	800117c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d32:	f000 f9f9 	bl	8001128 <MX_USART3_UART_Init>
  MX_ADC2_Init();
 8000d36:	f000 f957 	bl	8000fe8 <MX_ADC2_Init>
  MX_TIM4_Init();
 8000d3a:	f000 f9a7 	bl	800108c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim4);
 8000d3e:	486a      	ldr	r0, [pc, #424]	; (8000ee8 <main+0x1c8>)
 8000d40:	f002 f866 	bl	8002e10 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc2);         //ADC for external temperature
 8000d44:	4869      	ldr	r0, [pc, #420]	; (8000eec <main+0x1cc>)
 8000d46:	f000 fd31 	bl	80017ac <HAL_ADC_Start>
  {

	  uint8_t rcvBuf[1];
	  HAL_StatusTypeDef result;

	  result = HAL_UART_Receive(&huart3, rcvBuf, 1, 10);
 8000d4a:	1d39      	adds	r1, r7, #4
 8000d4c:	230a      	movs	r3, #10
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4867      	ldr	r0, [pc, #412]	; (8000ef0 <main+0x1d0>)
 8000d52:	f002 fd78 	bl	8003846 <HAL_UART_Receive>
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]

	  if (result == HAL_OK){
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	f040 8086 	bne.w	8000e6e <main+0x14e>

		  switch(rcvBuf[0]){
 8000d62:	793b      	ldrb	r3, [r7, #4]
 8000d64:	3b31      	subs	r3, #49	; 0x31
 8000d66:	2b07      	cmp	r3, #7
 8000d68:	d87a      	bhi.n	8000e60 <main+0x140>
 8000d6a:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <main+0x50>)
 8000d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d70:	08000d91 	.word	0x08000d91
 8000d74:	08000dab 	.word	0x08000dab
 8000d78:	08000dc5 	.word	0x08000dc5
 8000d7c:	08000ddf 	.word	0x08000ddf
 8000d80:	08000df9 	.word	0x08000df9
 8000d84:	08000e13 	.word	0x08000e13
 8000d88:	08000e2d 	.word	0x08000e2d
 8000d8c:	08000e47 	.word	0x08000e47

			  case '1':
				  HAL_GPIO_WritePin(Blue_LED_GPIO_Port,Blue_LED_Pin,GPIO_PIN_SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d96:	4857      	ldr	r0, [pc, #348]	; (8000ef4 <main+0x1d4>)
 8000d98:	f001 fb56 	bl	8002448 <HAL_GPIO_WritePin>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"Blue ON\r\n", 7+2,10);
 8000d9c:	230a      	movs	r3, #10
 8000d9e:	2209      	movs	r2, #9
 8000da0:	4955      	ldr	r1, [pc, #340]	; (8000ef8 <main+0x1d8>)
 8000da2:	4853      	ldr	r0, [pc, #332]	; (8000ef0 <main+0x1d0>)
 8000da4:	f002 fcbd 	bl	8003722 <HAL_UART_Transmit>
				  break;
 8000da8:	e062      	b.n	8000e70 <main+0x150>

			  case '2':
				  HAL_GPIO_WritePin(Blue_LED_GPIO_Port,Blue_LED_Pin,GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000db0:	4850      	ldr	r0, [pc, #320]	; (8000ef4 <main+0x1d4>)
 8000db2:	f001 fb49 	bl	8002448 <HAL_GPIO_WritePin>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"Blue OFF\r\n", 8+2,10);
 8000db6:	230a      	movs	r3, #10
 8000db8:	220a      	movs	r2, #10
 8000dba:	4950      	ldr	r1, [pc, #320]	; (8000efc <main+0x1dc>)
 8000dbc:	484c      	ldr	r0, [pc, #304]	; (8000ef0 <main+0x1d0>)
 8000dbe:	f002 fcb0 	bl	8003722 <HAL_UART_Transmit>
				  break;
 8000dc2:	e055      	b.n	8000e70 <main+0x150>

			  case '3':
				  HAL_GPIO_WritePin(Orange_LED_GPIO_Port,Orange_LED_Pin,GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dca:	484a      	ldr	r0, [pc, #296]	; (8000ef4 <main+0x1d4>)
 8000dcc:	f001 fb3c 	bl	8002448 <HAL_GPIO_WritePin>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"Orange ON\r\n", 9+2,10);
 8000dd0:	230a      	movs	r3, #10
 8000dd2:	220b      	movs	r2, #11
 8000dd4:	494a      	ldr	r1, [pc, #296]	; (8000f00 <main+0x1e0>)
 8000dd6:	4846      	ldr	r0, [pc, #280]	; (8000ef0 <main+0x1d0>)
 8000dd8:	f002 fca3 	bl	8003722 <HAL_UART_Transmit>
				  break;
 8000ddc:	e048      	b.n	8000e70 <main+0x150>

			  case '4':
				  HAL_GPIO_WritePin(Orange_LED_GPIO_Port,Orange_LED_Pin,GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de4:	4843      	ldr	r0, [pc, #268]	; (8000ef4 <main+0x1d4>)
 8000de6:	f001 fb2f 	bl	8002448 <HAL_GPIO_WritePin>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"Orange OFF\r\n", 10+2,10);
 8000dea:	230a      	movs	r3, #10
 8000dec:	220c      	movs	r2, #12
 8000dee:	4945      	ldr	r1, [pc, #276]	; (8000f04 <main+0x1e4>)
 8000df0:	483f      	ldr	r0, [pc, #252]	; (8000ef0 <main+0x1d0>)
 8000df2:	f002 fc96 	bl	8003722 <HAL_UART_Transmit>
				  break;
 8000df6:	e03b      	b.n	8000e70 <main+0x150>

			  case '5':
				  HAL_GPIO_WritePin(Red_LED_GPIO_Port,Red_LED_Pin,GPIO_PIN_SET);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dfe:	483d      	ldr	r0, [pc, #244]	; (8000ef4 <main+0x1d4>)
 8000e00:	f001 fb22 	bl	8002448 <HAL_GPIO_WritePin>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"Red ON\r\n", 6+2,10);
 8000e04:	230a      	movs	r3, #10
 8000e06:	2208      	movs	r2, #8
 8000e08:	493f      	ldr	r1, [pc, #252]	; (8000f08 <main+0x1e8>)
 8000e0a:	4839      	ldr	r0, [pc, #228]	; (8000ef0 <main+0x1d0>)
 8000e0c:	f002 fc89 	bl	8003722 <HAL_UART_Transmit>
				  break;
 8000e10:	e02e      	b.n	8000e70 <main+0x150>

			  case '6':
				  HAL_GPIO_WritePin(Red_LED_GPIO_Port,Red_LED_Pin,GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e18:	4836      	ldr	r0, [pc, #216]	; (8000ef4 <main+0x1d4>)
 8000e1a:	f001 fb15 	bl	8002448 <HAL_GPIO_WritePin>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"Red OFF\r\n", 7+2,10);
 8000e1e:	230a      	movs	r3, #10
 8000e20:	2209      	movs	r2, #9
 8000e22:	493a      	ldr	r1, [pc, #232]	; (8000f0c <main+0x1ec>)
 8000e24:	4832      	ldr	r0, [pc, #200]	; (8000ef0 <main+0x1d0>)
 8000e26:	f002 fc7c 	bl	8003722 <HAL_UART_Transmit>
				  break;
 8000e2a:	e021      	b.n	8000e70 <main+0x150>

			  case '7':
				  HAL_GPIO_WritePin(Green_LED_GPIO_Port,Green_LED_Pin,GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e32:	4830      	ldr	r0, [pc, #192]	; (8000ef4 <main+0x1d4>)
 8000e34:	f001 fb08 	bl	8002448 <HAL_GPIO_WritePin>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"Green ON\r\n", 8+2,10);
 8000e38:	230a      	movs	r3, #10
 8000e3a:	220a      	movs	r2, #10
 8000e3c:	4934      	ldr	r1, [pc, #208]	; (8000f10 <main+0x1f0>)
 8000e3e:	482c      	ldr	r0, [pc, #176]	; (8000ef0 <main+0x1d0>)
 8000e40:	f002 fc6f 	bl	8003722 <HAL_UART_Transmit>
				  break;
 8000e44:	e014      	b.n	8000e70 <main+0x150>

			  case '8':
				  HAL_GPIO_WritePin(Green_LED_GPIO_Port,Green_LED_Pin,GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e4c:	4829      	ldr	r0, [pc, #164]	; (8000ef4 <main+0x1d4>)
 8000e4e:	f001 fafb 	bl	8002448 <HAL_GPIO_WritePin>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"Green OFF\r\n", 9+2,10);
 8000e52:	230a      	movs	r3, #10
 8000e54:	220b      	movs	r2, #11
 8000e56:	492f      	ldr	r1, [pc, #188]	; (8000f14 <main+0x1f4>)
 8000e58:	4825      	ldr	r0, [pc, #148]	; (8000ef0 <main+0x1d0>)
 8000e5a:	f002 fc62 	bl	8003722 <HAL_UART_Transmit>
				  break;
 8000e5e:	e007      	b.n	8000e70 <main+0x150>

			  default:
				  HAL_UART_Transmit(&huart3, (uint8_t *)"UnexpCmd\r\n", 8+2,10);
 8000e60:	230a      	movs	r3, #10
 8000e62:	220a      	movs	r2, #10
 8000e64:	492c      	ldr	r1, [pc, #176]	; (8000f18 <main+0x1f8>)
 8000e66:	4822      	ldr	r0, [pc, #136]	; (8000ef0 <main+0x1d0>)
 8000e68:	f002 fc5b 	bl	8003722 <HAL_UART_Transmit>
				  break;
 8000e6c:	e000      	b.n	8000e70 <main+0x150>
		  }
	  }
 8000e6e:	bf00      	nop


	  //--------------------ADC for external temperature------------------

	  adcPoolResultext = HAL_ADC_PollForConversion(&hadc2, 1);
 8000e70:	2101      	movs	r1, #1
 8000e72:	481e      	ldr	r0, [pc, #120]	; (8000eec <main+0x1cc>)
 8000e74:	f000 fd6c 	bl	8001950 <HAL_ADC_PollForConversion>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71bb      	strb	r3, [r7, #6]

	  if(adcPoolResultext == HAL_OK){
 8000e7c:	79bb      	ldrb	r3, [r7, #6]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d106      	bne.n	8000e92 <main+0x172>
		  external_temp_value = HAL_ADC_GetValue(&hadc2);
 8000e84:	4819      	ldr	r0, [pc, #100]	; (8000eec <main+0x1cc>)
 8000e86:	f000 fdee 	bl	8001a66 <HAL_ADC_GetValue>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <main+0x1fc>)
 8000e90:	801a      	strh	r2, [r3, #0]
	  }

	  tCelsius_ext = (3/4095.0 * external_temp_value *-50) +100.0; //convert value to temperature in the range from -24 to 100°C.
 8000e92:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <main+0x1fc>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fc66 	bl	8000768 <__aeabi_i2d>
 8000e9c:	a310      	add	r3, pc, #64	; (adr r3, 8000ee0 <main+0x1c0>)
 8000e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea2:	f7ff f9e5 	bl	8000270 <__aeabi_dmul>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	4610      	mov	r0, r2
 8000eac:	4619      	mov	r1, r3
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <main+0x200>)
 8000eb4:	f7ff f9dc 	bl	8000270 <__aeabi_dmul>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <main+0x204>)
 8000ec6:	f7ff fb03 	bl	80004d0 <__adddf3>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4610      	mov	r0, r2
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f7ff fcb3 	bl	800083c <__aeabi_d2f>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <main+0x208>)
 8000eda:	6013      	str	r3, [r2, #0]
  {
 8000edc:	e735      	b.n	8000d4a <main+0x2a>
 8000ede:	bf00      	nop
 8000ee0:	18018018 	.word	0x18018018
 8000ee4:	3f480180 	.word	0x3f480180
 8000ee8:	20000098 	.word	0x20000098
 8000eec:	20000124 	.word	0x20000124
 8000ef0:	200000e0 	.word	0x200000e0
 8000ef4:	40020c00 	.word	0x40020c00
 8000ef8:	080046d0 	.word	0x080046d0
 8000efc:	080046dc 	.word	0x080046dc
 8000f00:	080046e8 	.word	0x080046e8
 8000f04:	080046f4 	.word	0x080046f4
 8000f08:	08004704 	.word	0x08004704
 8000f0c:	08004710 	.word	0x08004710
 8000f10:	0800471c 	.word	0x0800471c
 8000f14:	08004728 	.word	0x08004728
 8000f18:	08004734 	.word	0x08004734
 8000f1c:	2000016c 	.word	0x2000016c
 8000f20:	c0490000 	.word	0xc0490000
 8000f24:	40590000 	.word	0x40590000
 8000f28:	20000170 	.word	0x20000170

08000f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b094      	sub	sp, #80	; 0x50
 8000f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f32:	f107 0320 	add.w	r3, r7, #32
 8000f36:	2230      	movs	r2, #48	; 0x30
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f002 ff86 	bl	8003e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <SystemClock_Config+0xb4>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	4a21      	ldr	r2, [pc, #132]	; (8000fe0 <SystemClock_Config+0xb4>)
 8000f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <SystemClock_Config+0xb4>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <SystemClock_Config+0xb8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a1b      	ldr	r2, [pc, #108]	; (8000fe4 <SystemClock_Config+0xb8>)
 8000f76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <SystemClock_Config+0xb8>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f90:	2310      	movs	r3, #16
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f98:	f107 0320 	add.w	r3, r7, #32
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f001 fa9f 	bl	80024e0 <HAL_RCC_OscConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000fa8:	f000 f978 	bl	800129c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fac:	230f      	movs	r3, #15
 8000fae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f001 fd02 	bl	80029d0 <HAL_RCC_ClockConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000fd2:	f000 f963 	bl	800129c <Error_Handler>
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3750      	adds	r7, #80	; 0x50
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40007000 	.word	0x40007000

08000fe8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fee:	463b      	mov	r3, r7
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <MX_ADC2_Init+0x98>)
 8000ffc:	4a21      	ldr	r2, [pc, #132]	; (8001084 <MX_ADC2_Init+0x9c>)
 8000ffe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_ADC2_Init+0x98>)
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001006:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <MX_ADC2_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_ADC2_Init+0x98>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <MX_ADC2_Init+0x98>)
 8001014:	2201      	movs	r2, #1
 8001016:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_ADC2_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <MX_ADC2_Init+0x98>)
 8001022:	2200      	movs	r2, #0
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <MX_ADC2_Init+0x98>)
 8001028:	4a17      	ldr	r2, [pc, #92]	; (8001088 <MX_ADC2_Init+0xa0>)
 800102a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_ADC2_Init+0x98>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <MX_ADC2_Init+0x98>)
 8001034:	2201      	movs	r2, #1
 8001036:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_ADC2_Init+0x98>)
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_ADC2_Init+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001046:	480e      	ldr	r0, [pc, #56]	; (8001080 <MX_ADC2_Init+0x98>)
 8001048:	f000 fb6c 	bl	8001724 <HAL_ADC_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001052:	f000 f923 	bl	800129c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001056:	2309      	movs	r3, #9
 8001058:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800105a:	2301      	movs	r3, #1
 800105c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800105e:	2307      	movs	r3, #7
 8001060:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001062:	463b      	mov	r3, r7
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_ADC2_Init+0x98>)
 8001068:	f000 fd0a 	bl	8001a80 <HAL_ADC_ConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001072:	f000 f913 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000124 	.word	0x20000124
 8001084:	40012100 	.word	0x40012100
 8001088:	0f000001 	.word	0x0f000001

0800108c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001092:	f107 0308 	add.w	r3, r7, #8
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a0:	463b      	mov	r3, r7
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <MX_TIM4_Init+0x94>)
 80010aa:	4a1e      	ldr	r2, [pc, #120]	; (8001124 <MX_TIM4_Init+0x98>)
 80010ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15999;
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <MX_TIM4_Init+0x94>)
 80010b0:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80010b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_TIM4_Init+0x94>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <MX_TIM4_Init+0x94>)
 80010be:	f241 3287 	movw	r2, #4999	; 0x1387
 80010c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <MX_TIM4_Init+0x94>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <MX_TIM4_Init+0x94>)
 80010cc:	2280      	movs	r2, #128	; 0x80
 80010ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010d0:	4813      	ldr	r0, [pc, #76]	; (8001120 <MX_TIM4_Init+0x94>)
 80010d2:	f001 fe4d 	bl	8002d70 <HAL_TIM_Base_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80010dc:	f000 f8de 	bl	800129c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4619      	mov	r1, r3
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <MX_TIM4_Init+0x94>)
 80010ee:	f002 f807 	bl	8003100 <HAL_TIM_ConfigClockSource>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80010f8:	f000 f8d0 	bl	800129c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fc:	2300      	movs	r3, #0
 80010fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001104:	463b      	mov	r3, r7
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_TIM4_Init+0x94>)
 800110a:	f002 fa2d 	bl	8003568 <HAL_TIMEx_MasterConfigSynchronization>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001114:	f000 f8c2 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000098 	.word	0x20000098
 8001124:	40000800 	.word	0x40000800

08001128 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_USART3_UART_Init+0x4c>)
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <MX_USART3_UART_Init+0x50>)
 8001130:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <MX_USART3_UART_Init+0x4c>)
 8001134:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001138:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_USART3_UART_Init+0x4c>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_USART3_UART_Init+0x4c>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <MX_USART3_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_USART3_UART_Init+0x4c>)
 800114e:	220c      	movs	r2, #12
 8001150:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <MX_USART3_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_USART3_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_USART3_UART_Init+0x4c>)
 8001160:	f002 fa92 	bl	8003688 <HAL_UART_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800116a:	f000 f897 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200000e0 	.word	0x200000e0
 8001178:	40004800 	.word	0x40004800

0800117c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b3d      	ldr	r3, [pc, #244]	; (800128c <MX_GPIO_Init+0x110>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a3c      	ldr	r2, [pc, #240]	; (800128c <MX_GPIO_Init+0x110>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b3a      	ldr	r3, [pc, #232]	; (800128c <MX_GPIO_Init+0x110>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b36      	ldr	r3, [pc, #216]	; (800128c <MX_GPIO_Init+0x110>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a35      	ldr	r2, [pc, #212]	; (800128c <MX_GPIO_Init+0x110>)
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b33      	ldr	r3, [pc, #204]	; (800128c <MX_GPIO_Init+0x110>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	4b2f      	ldr	r3, [pc, #188]	; (800128c <MX_GPIO_Init+0x110>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a2e      	ldr	r2, [pc, #184]	; (800128c <MX_GPIO_Init+0x110>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b2c      	ldr	r3, [pc, #176]	; (800128c <MX_GPIO_Init+0x110>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b28      	ldr	r3, [pc, #160]	; (800128c <MX_GPIO_Init+0x110>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a27      	ldr	r2, [pc, #156]	; (800128c <MX_GPIO_Init+0x110>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b25      	ldr	r3, [pc, #148]	; (800128c <MX_GPIO_Init+0x110>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001208:	4821      	ldr	r0, [pc, #132]	; (8001290 <MX_GPIO_Init+0x114>)
 800120a:	f001 f91d 	bl	8002448 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Green_LED_Pin Orange_LED_Pin Red_LED_Pin Blue_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin;
 800120e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001214:	2301      	movs	r3, #1
 8001216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	481a      	ldr	r0, [pc, #104]	; (8001290 <MX_GPIO_Init+0x114>)
 8001228:	f000 ff5a 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : But4_Pin But5_Pin But3_Pin But1_Pin */
  GPIO_InitStruct.Pin = But4_Pin|But5_Pin|But3_Pin|But1_Pin;
 800122c:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 8001230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001232:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4814      	ldr	r0, [pc, #80]	; (8001294 <MX_GPIO_Init+0x118>)
 8001244:	f000 ff4c 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : But2_Pin */
  GPIO_InitStruct.Pin = But2_Pin;
 8001248:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800124c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800124e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(But2_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	480e      	ldr	r0, [pc, #56]	; (8001298 <MX_GPIO_Init+0x11c>)
 8001260:	f000 ff3e 	bl	80020e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	2017      	movs	r0, #23
 800126a:	f000 ff02 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800126e:	2017      	movs	r0, #23
 8001270:	f000 ff1b 	bl	80020aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	2028      	movs	r0, #40	; 0x28
 800127a:	f000 fefa 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800127e:	2028      	movs	r0, #40	; 0x28
 8001280:	f000 ff13 	bl	80020aa <HAL_NVIC_EnableIRQ>

}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800
 8001290:	40020c00 	.word	0x40020c00
 8001294:	40020800 	.word	0x40020800
 8001298:	40020000 	.word	0x40020000

0800129c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
}
 80012a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <Error_Handler+0x8>
	...

080012a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <HAL_MspInit+0x4c>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <HAL_MspInit+0x4c>)
 80012b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012bc:	6453      	str	r3, [r2, #68]	; 0x44
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <HAL_MspInit+0x4c>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <HAL_MspInit+0x4c>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <HAL_MspInit+0x4c>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_MspInit+0x4c>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800

080012f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a17      	ldr	r2, [pc, #92]	; (8001374 <HAL_ADC_MspInit+0x7c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d127      	bne.n	800136a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <HAL_ADC_MspInit+0x80>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a15      	ldr	r2, [pc, #84]	; (8001378 <HAL_ADC_MspInit+0x80>)
 8001324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <HAL_ADC_MspInit+0x80>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_ADC_MspInit+0x80>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <HAL_ADC_MspInit+0x80>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_ADC_MspInit+0x80>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001352:	2302      	movs	r3, #2
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001356:	2303      	movs	r3, #3
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	4805      	ldr	r0, [pc, #20]	; (800137c <HAL_ADC_MspInit+0x84>)
 8001366:	f000 febb 	bl	80020e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	; 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40012100 	.word	0x40012100
 8001378:	40023800 	.word	0x40023800
 800137c:	40020400 	.word	0x40020400

08001380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <HAL_TIM_Base_MspInit+0x48>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d115      	bne.n	80013be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_TIM_Base_MspInit+0x4c>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <HAL_TIM_Base_MspInit+0x4c>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6413      	str	r3, [r2, #64]	; 0x40
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_TIM_Base_MspInit+0x4c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	201e      	movs	r0, #30
 80013b4:	f000 fe5d 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013b8:	201e      	movs	r0, #30
 80013ba:	f000 fe76 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40000800 	.word	0x40000800
 80013cc:	40023800 	.word	0x40023800

080013d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a19      	ldr	r2, [pc, #100]	; (8001454 <HAL_UART_MspInit+0x84>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d12c      	bne.n	800144c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_UART_MspInit+0x88>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a17      	ldr	r2, [pc, #92]	; (8001458 <HAL_UART_MspInit+0x88>)
 80013fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_UART_MspInit+0x88>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_UART_MspInit+0x88>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a10      	ldr	r2, [pc, #64]	; (8001458 <HAL_UART_MspInit+0x88>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <HAL_UART_MspInit+0x88>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800142a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800142e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800143c:	2307      	movs	r3, #7
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4619      	mov	r1, r3
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <HAL_UART_MspInit+0x8c>)
 8001448:	f000 fe4a 	bl	80020e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800144c:	bf00      	nop
 800144e:	3728      	adds	r7, #40	; 0x28
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40004800 	.word	0x40004800
 8001458:	40023800 	.word	0x40023800
 800145c:	40020c00 	.word	0x40020c00

08001460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <NMI_Handler+0x4>

08001466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <MemManage_Handler+0x4>

08001472 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <UsageFault_Handler+0x4>

0800147e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ac:	f000 f91a 	bl	80016e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80014b8:	2040      	movs	r0, #64	; 0x40
 80014ba:	f000 fff9 	bl	80024b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80014be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014c2:	f000 fff5 	bl	80024b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80014c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014ca:	f000 fff1 	bl	80024b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80014da:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(Red_LED_GPIO_Port, Red_LED_Pin);

	uint8_t msg[512];
	extern float tCelsius_ext;
	extern UART_HandleTypeDef huart3;
	uint8_t tx_buffer[]="Hello world\n\r";
 80014dc:	f107 0308 	add.w	r3, r7, #8
 80014e0:	4a13      	ldr	r2, [pc, #76]	; (8001530 <TIM4_IRQHandler+0x5c>)
 80014e2:	461c      	mov	r4, r3
 80014e4:	4613      	mov	r3, r2
 80014e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014e8:	c407      	stmia	r4!, {r0, r1, r2}
 80014ea:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, msg,sprintf((char *)msg,"\n\rExternal temperature is = %d",(uint8_t)tCelsius_ext),0XFFFF);
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <TIM4_IRQHandler+0x60>)
 80014ee:	edd3 7a00 	vldr	s15, [r3]
 80014f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014f6:	edc7 7a01 	vstr	s15, [r7, #4]
 80014fa:	793b      	ldrb	r3, [r7, #4]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	f107 0318 	add.w	r3, r7, #24
 8001504:	490c      	ldr	r1, [pc, #48]	; (8001538 <TIM4_IRQHandler+0x64>)
 8001506:	4618      	mov	r0, r3
 8001508:	f002 fca8 	bl	8003e5c <siprintf>
 800150c:	4603      	mov	r3, r0
 800150e:	b29a      	uxth	r2, r3
 8001510:	f107 0118 	add.w	r1, r7, #24
 8001514:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001518:	4808      	ldr	r0, [pc, #32]	; (800153c <TIM4_IRQHandler+0x68>)
 800151a:	f002 f902 	bl	8003722 <HAL_UART_Transmit>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800151e:	4808      	ldr	r0, [pc, #32]	; (8001540 <TIM4_IRQHandler+0x6c>)
 8001520:	f001 fce6 	bl	8002ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 800152a:	46bd      	mov	sp, r7
 800152c:	bd90      	pop	{r4, r7, pc}
 800152e:	bf00      	nop
 8001530:	08004760 	.word	0x08004760
 8001534:	20000170 	.word	0x20000170
 8001538:	08004740 	.word	0x08004740
 800153c:	200000e0 	.word	0x200000e0
 8001540:	20000098 	.word	0x20000098

08001544 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001548:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800154c:	f000 ffb0 	bl	80024b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001550:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001554:	f000 ffac 	bl	80024b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}

0800155c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001564:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <_sbrk+0x5c>)
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <_sbrk+0x60>)
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <_sbrk+0x64>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <_sbrk+0x64>)
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <_sbrk+0x68>)
 800157c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <_sbrk+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	429a      	cmp	r2, r3
 800158a:	d207      	bcs.n	800159c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800158c:	f002 fc34 	bl	8003df8 <__errno>
 8001590:	4603      	mov	r3, r0
 8001592:	220c      	movs	r2, #12
 8001594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	e009      	b.n	80015b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <_sbrk+0x64>)
 80015ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20020000 	.word	0x20020000
 80015bc:	00000400 	.word	0x00000400
 80015c0:	2000008c 	.word	0x2000008c
 80015c4:	20000188 	.word	0x20000188

080015c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <SystemInit+0x20>)
 80015ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <SystemInit+0x20>)
 80015d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001624 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f0:	480d      	ldr	r0, [pc, #52]	; (8001628 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015f2:	490e      	ldr	r1, [pc, #56]	; (800162c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015f4:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f8:	e002      	b.n	8001600 <LoopCopyDataInit>

080015fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fe:	3304      	adds	r3, #4

08001600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001604:	d3f9      	bcc.n	80015fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001606:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001608:	4c0b      	ldr	r4, [pc, #44]	; (8001638 <LoopFillZerobss+0x26>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800160c:	e001      	b.n	8001612 <LoopFillZerobss>

0800160e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001610:	3204      	adds	r2, #4

08001612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001614:	d3fb      	bcc.n	800160e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001616:	f7ff ffd7 	bl	80015c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161a:	f002 fbf3 	bl	8003e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800161e:	f7ff fb7f 	bl	8000d20 <main>
  bx  lr    
 8001622:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001624:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800162c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001630:	080047cc 	.word	0x080047cc
  ldr r2, =_sbss
 8001634:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001638:	20000188 	.word	0x20000188

0800163c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800163c:	e7fe      	b.n	800163c <ADC_IRQHandler>
	...

08001640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001644:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_Init+0x40>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <HAL_Init+0x40>)
 800164a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800164e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_Init+0x40>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_Init+0x40>)
 8001656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800165a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_Init+0x40>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a07      	ldr	r2, [pc, #28]	; (8001680 <HAL_Init+0x40>)
 8001662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001666:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001668:	2003      	movs	r0, #3
 800166a:	f000 fcf7 	bl	800205c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800166e:	200f      	movs	r0, #15
 8001670:	f000 f808 	bl	8001684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001674:	f7ff fe18 	bl	80012a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023c00 	.word	0x40023c00

08001684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_InitTick+0x54>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_InitTick+0x58>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169a:	fbb3 f3f1 	udiv	r3, r3, r1
 800169e:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 fd0f 	bl	80020c6 <HAL_SYSTICK_Config>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00e      	b.n	80016d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b0f      	cmp	r3, #15
 80016b6:	d80a      	bhi.n	80016ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b8:	2200      	movs	r2, #0
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f000 fcd7 	bl	8002072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c4:	4a06      	ldr	r2, [pc, #24]	; (80016e0 <HAL_InitTick+0x5c>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e000      	b.n	80016d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000008 	.word	0x20000008
 80016e0:	20000004 	.word	0x20000004

080016e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_IncTick+0x20>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_IncTick+0x24>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4413      	add	r3, r2
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <HAL_IncTick+0x24>)
 80016f6:	6013      	str	r3, [r2, #0]
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000008 	.word	0x20000008
 8001708:	20000174 	.word	0x20000174

0800170c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_GetTick+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000174 	.word	0x20000174

08001724 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e033      	b.n	80017a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	2b00      	cmp	r3, #0
 8001740:	d109      	bne.n	8001756 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fdd8 	bl	80012f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	2b00      	cmp	r3, #0
 8001760:	d118      	bne.n	8001794 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800176a:	f023 0302 	bic.w	r3, r3, #2
 800176e:	f043 0202 	orr.w	r2, r3, #2
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 faa4 	bl	8001cc4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f023 0303 	bic.w	r3, r3, #3
 800178a:	f043 0201 	orr.w	r2, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	641a      	str	r2, [r3, #64]	; 0x40
 8001792:	e001      	b.n	8001798 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_ADC_Start+0x1a>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e0b2      	b.n	800192c <HAL_ADC_Start+0x180>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d018      	beq.n	800180e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0201 	orr.w	r2, r2, #1
 80017ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017ec:	4b52      	ldr	r3, [pc, #328]	; (8001938 <HAL_ADC_Start+0x18c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a52      	ldr	r2, [pc, #328]	; (800193c <HAL_ADC_Start+0x190>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	0c9a      	lsrs	r2, r3, #18
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001800:	e002      	b.n	8001808 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3b01      	subs	r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f9      	bne.n	8001802 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b01      	cmp	r3, #1
 800181a:	d17a      	bne.n	8001912 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800183a:	2b00      	cmp	r3, #0
 800183c:	d007      	beq.n	800184e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001846:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800185a:	d106      	bne.n	800186a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001860:	f023 0206 	bic.w	r2, r3, #6
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	645a      	str	r2, [r3, #68]	; 0x44
 8001868:	e002      	b.n	8001870 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001878:	4b31      	ldr	r3, [pc, #196]	; (8001940 <HAL_ADC_Start+0x194>)
 800187a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001884:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	2b00      	cmp	r3, #0
 8001890:	d12a      	bne.n	80018e8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a2b      	ldr	r2, [pc, #172]	; (8001944 <HAL_ADC_Start+0x198>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d015      	beq.n	80018c8 <HAL_ADC_Start+0x11c>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a29      	ldr	r2, [pc, #164]	; (8001948 <HAL_ADC_Start+0x19c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d105      	bne.n	80018b2 <HAL_ADC_Start+0x106>
 80018a6:	4b26      	ldr	r3, [pc, #152]	; (8001940 <HAL_ADC_Start+0x194>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00a      	beq.n	80018c8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a25      	ldr	r2, [pc, #148]	; (800194c <HAL_ADC_Start+0x1a0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d136      	bne.n	800192a <HAL_ADC_Start+0x17e>
 80018bc:	4b20      	ldr	r3, [pc, #128]	; (8001940 <HAL_ADC_Start+0x194>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0310 	and.w	r3, r3, #16
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d130      	bne.n	800192a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d129      	bne.n	800192a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	e020      	b.n	800192a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a15      	ldr	r2, [pc, #84]	; (8001944 <HAL_ADC_Start+0x198>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d11b      	bne.n	800192a <HAL_ADC_Start+0x17e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d114      	bne.n	800192a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	e00b      	b.n	800192a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f043 0210 	orr.w	r2, r3, #16
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f043 0201 	orr.w	r2, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	20000000 	.word	0x20000000
 800193c:	431bde83 	.word	0x431bde83
 8001940:	40012300 	.word	0x40012300
 8001944:	40012000 	.word	0x40012000
 8001948:	40012100 	.word	0x40012100
 800194c:	40012200 	.word	0x40012200

08001950 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196c:	d113      	bne.n	8001996 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800197c:	d10b      	bne.n	8001996 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f043 0220 	orr.w	r2, r3, #32
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e063      	b.n	8001a5e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001996:	f7ff feb9 	bl	800170c <HAL_GetTick>
 800199a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800199c:	e021      	b.n	80019e2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a4:	d01d      	beq.n	80019e2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d007      	beq.n	80019bc <HAL_ADC_PollForConversion+0x6c>
 80019ac:	f7ff feae 	bl	800170c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d212      	bcs.n	80019e2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d00b      	beq.n	80019e2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f043 0204 	orr.w	r2, r3, #4
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e03d      	b.n	8001a5e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d1d6      	bne.n	800199e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f06f 0212 	mvn.w	r2, #18
 80019f8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d123      	bne.n	8001a5c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d11f      	bne.n	8001a5c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d006      	beq.n	8001a38 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d111      	bne.n	8001a5c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d105      	bne.n	8001a5c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f043 0201 	orr.w	r2, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x1c>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e105      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x228>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b09      	cmp	r3, #9
 8001aaa:	d925      	bls.n	8001af8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68d9      	ldr	r1, [r3, #12]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b1e      	subs	r3, #30
 8001ac2:	2207      	movs	r2, #7
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43da      	mvns	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	400a      	ands	r2, r1
 8001ad0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68d9      	ldr	r1, [r3, #12]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4403      	add	r3, r0
 8001aea:	3b1e      	subs	r3, #30
 8001aec:	409a      	lsls	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	e022      	b.n	8001b3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6919      	ldr	r1, [r3, #16]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	400a      	ands	r2, r1
 8001b1a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6919      	ldr	r1, [r3, #16]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	4603      	mov	r3, r0
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4403      	add	r3, r0
 8001b34:	409a      	lsls	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d824      	bhi.n	8001b90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	3b05      	subs	r3, #5
 8001b58:	221f      	movs	r2, #31
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	400a      	ands	r2, r1
 8001b66:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4618      	mov	r0, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	3b05      	subs	r3, #5
 8001b82:	fa00 f203 	lsl.w	r2, r0, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b8e:	e04c      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b0c      	cmp	r3, #12
 8001b96:	d824      	bhi.n	8001be2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3b23      	subs	r3, #35	; 0x23
 8001baa:	221f      	movs	r2, #31
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43da      	mvns	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	400a      	ands	r2, r1
 8001bb8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3b23      	subs	r3, #35	; 0x23
 8001bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	631a      	str	r2, [r3, #48]	; 0x30
 8001be0:	e023      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3b41      	subs	r3, #65	; 0x41
 8001bf4:	221f      	movs	r2, #31
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	400a      	ands	r2, r1
 8001c02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4618      	mov	r0, r3
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3b41      	subs	r3, #65	; 0x41
 8001c1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c2a:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <HAL_ADC_ConfigChannel+0x234>)
 8001c2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a21      	ldr	r2, [pc, #132]	; (8001cb8 <HAL_ADC_ConfigChannel+0x238>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d109      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x1cc>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b12      	cmp	r3, #18
 8001c3e:	d105      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <HAL_ADC_ConfigChannel+0x238>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d123      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x21e>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d003      	beq.n	8001c66 <HAL_ADC_ConfigChannel+0x1e6>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b11      	cmp	r3, #17
 8001c64:	d11b      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b10      	cmp	r3, #16
 8001c78:	d111      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_ADC_ConfigChannel+0x23c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a10      	ldr	r2, [pc, #64]	; (8001cc0 <HAL_ADC_ConfigChannel+0x240>)
 8001c80:	fba2 2303 	umull	r2, r3, r2, r3
 8001c84:	0c9a      	lsrs	r2, r3, #18
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c90:	e002      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f9      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	40012300 	.word	0x40012300
 8001cb8:	40012000 	.word	0x40012000
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	431bde83 	.word	0x431bde83

08001cc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ccc:	4b79      	ldr	r3, [pc, #484]	; (8001eb4 <ADC_Init+0x1f0>)
 8001cce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6859      	ldr	r1, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	021a      	lsls	r2, r3, #8
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6859      	ldr	r1, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6899      	ldr	r1, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	4a58      	ldr	r2, [pc, #352]	; (8001eb8 <ADC_Init+0x1f4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d022      	beq.n	8001da2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6899      	ldr	r1, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6899      	ldr	r1, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	e00f      	b.n	8001dc2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001db0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0202 	bic.w	r2, r2, #2
 8001dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6899      	ldr	r1, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7e1b      	ldrb	r3, [r3, #24]
 8001ddc:	005a      	lsls	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d01b      	beq.n	8001e28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dfe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6859      	ldr	r1, [r3, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	035a      	lsls	r2, r3, #13
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	e007      	b.n	8001e38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	051a      	lsls	r2, r3, #20
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6899      	ldr	r1, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e7a:	025a      	lsls	r2, r3, #9
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6899      	ldr	r1, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	029a      	lsls	r2, r3, #10
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	609a      	str	r2, [r3, #8]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40012300 	.word	0x40012300
 8001eb8:	0f000001 	.word	0x0f000001

08001ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eee:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	60d3      	str	r3, [r2, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <__NVIC_GetPriorityGrouping+0x18>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	f003 0307 	and.w	r3, r3, #7
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db0b      	blt.n	8001f4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	f003 021f 	and.w	r2, r3, #31
 8001f38:	4907      	ldr	r1, [pc, #28]	; (8001f58 <__NVIC_EnableIRQ+0x38>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2001      	movs	r0, #1
 8001f42:	fa00 f202 	lsl.w	r2, r0, r2
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000e100 	.word	0xe000e100

08001f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db0a      	blt.n	8001f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	490c      	ldr	r1, [pc, #48]	; (8001fa8 <__NVIC_SetPriority+0x4c>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f84:	e00a      	b.n	8001f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4908      	ldr	r1, [pc, #32]	; (8001fac <__NVIC_SetPriority+0x50>)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3b04      	subs	r3, #4
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	440b      	add	r3, r1
 8001f9a:	761a      	strb	r2, [r3, #24]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000e100 	.word	0xe000e100
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f1c3 0307 	rsb	r3, r3, #7
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	bf28      	it	cs
 8001fce:	2304      	movcs	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d902      	bls.n	8001fe0 <NVIC_EncodePriority+0x30>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3b03      	subs	r3, #3
 8001fde:	e000      	b.n	8001fe2 <NVIC_EncodePriority+0x32>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43d9      	mvns	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	4313      	orrs	r3, r2
         );
}
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002028:	d301      	bcc.n	800202e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202a:	2301      	movs	r3, #1
 800202c:	e00f      	b.n	800204e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <SysTick_Config+0x40>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002036:	210f      	movs	r1, #15
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f7ff ff8e 	bl	8001f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <SysTick_Config+0x40>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <SysTick_Config+0x40>)
 8002048:	2207      	movs	r2, #7
 800204a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	e000e010 	.word	0xe000e010

0800205c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff29 	bl	8001ebc <__NVIC_SetPriorityGrouping>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002084:	f7ff ff3e 	bl	8001f04 <__NVIC_GetPriorityGrouping>
 8002088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	f7ff ff8e 	bl	8001fb0 <NVIC_EncodePriority>
 8002094:	4602      	mov	r2, r0
 8002096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff5d 	bl	8001f5c <__NVIC_SetPriority>
}
 80020a2:	bf00      	nop
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff31 	bl	8001f20 <__NVIC_EnableIRQ>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ffa2 	bl	8002018 <SysTick_Config>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	e16b      	b.n	80023d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020fc:	2201      	movs	r2, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	429a      	cmp	r2, r3
 8002116:	f040 815a 	bne.w	80023ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b01      	cmp	r3, #1
 8002124:	d005      	beq.n	8002132 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800212e:	2b02      	cmp	r3, #2
 8002130:	d130      	bne.n	8002194 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	2203      	movs	r2, #3
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002168:	2201      	movs	r2, #1
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	f003 0201 	and.w	r2, r3, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b03      	cmp	r3, #3
 800219e:	d017      	beq.n	80021d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	2203      	movs	r2, #3
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d123      	bne.n	8002224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	08da      	lsrs	r2, r3, #3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3208      	adds	r2, #8
 80021e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	220f      	movs	r2, #15
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	08da      	lsrs	r2, r3, #3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3208      	adds	r2, #8
 800221e:	69b9      	ldr	r1, [r7, #24]
 8002220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0203 	and.w	r2, r3, #3
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80b4 	beq.w	80023ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	4b60      	ldr	r3, [pc, #384]	; (80023ec <HAL_GPIO_Init+0x30c>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	4a5f      	ldr	r2, [pc, #380]	; (80023ec <HAL_GPIO_Init+0x30c>)
 8002270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002274:	6453      	str	r3, [r2, #68]	; 0x44
 8002276:	4b5d      	ldr	r3, [pc, #372]	; (80023ec <HAL_GPIO_Init+0x30c>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002282:	4a5b      	ldr	r2, [pc, #364]	; (80023f0 <HAL_GPIO_Init+0x310>)
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	3302      	adds	r3, #2
 800228a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	220f      	movs	r2, #15
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a52      	ldr	r2, [pc, #328]	; (80023f4 <HAL_GPIO_Init+0x314>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d02b      	beq.n	8002306 <HAL_GPIO_Init+0x226>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a51      	ldr	r2, [pc, #324]	; (80023f8 <HAL_GPIO_Init+0x318>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d025      	beq.n	8002302 <HAL_GPIO_Init+0x222>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a50      	ldr	r2, [pc, #320]	; (80023fc <HAL_GPIO_Init+0x31c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d01f      	beq.n	80022fe <HAL_GPIO_Init+0x21e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4f      	ldr	r2, [pc, #316]	; (8002400 <HAL_GPIO_Init+0x320>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d019      	beq.n	80022fa <HAL_GPIO_Init+0x21a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4e      	ldr	r2, [pc, #312]	; (8002404 <HAL_GPIO_Init+0x324>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d013      	beq.n	80022f6 <HAL_GPIO_Init+0x216>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4d      	ldr	r2, [pc, #308]	; (8002408 <HAL_GPIO_Init+0x328>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00d      	beq.n	80022f2 <HAL_GPIO_Init+0x212>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a4c      	ldr	r2, [pc, #304]	; (800240c <HAL_GPIO_Init+0x32c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d007      	beq.n	80022ee <HAL_GPIO_Init+0x20e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4b      	ldr	r2, [pc, #300]	; (8002410 <HAL_GPIO_Init+0x330>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d101      	bne.n	80022ea <HAL_GPIO_Init+0x20a>
 80022e6:	2307      	movs	r3, #7
 80022e8:	e00e      	b.n	8002308 <HAL_GPIO_Init+0x228>
 80022ea:	2308      	movs	r3, #8
 80022ec:	e00c      	b.n	8002308 <HAL_GPIO_Init+0x228>
 80022ee:	2306      	movs	r3, #6
 80022f0:	e00a      	b.n	8002308 <HAL_GPIO_Init+0x228>
 80022f2:	2305      	movs	r3, #5
 80022f4:	e008      	b.n	8002308 <HAL_GPIO_Init+0x228>
 80022f6:	2304      	movs	r3, #4
 80022f8:	e006      	b.n	8002308 <HAL_GPIO_Init+0x228>
 80022fa:	2303      	movs	r3, #3
 80022fc:	e004      	b.n	8002308 <HAL_GPIO_Init+0x228>
 80022fe:	2302      	movs	r3, #2
 8002300:	e002      	b.n	8002308 <HAL_GPIO_Init+0x228>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_GPIO_Init+0x228>
 8002306:	2300      	movs	r3, #0
 8002308:	69fa      	ldr	r2, [r7, #28]
 800230a:	f002 0203 	and.w	r2, r2, #3
 800230e:	0092      	lsls	r2, r2, #2
 8002310:	4093      	lsls	r3, r2
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002318:	4935      	ldr	r1, [pc, #212]	; (80023f0 <HAL_GPIO_Init+0x310>)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	089b      	lsrs	r3, r3, #2
 800231e:	3302      	adds	r3, #2
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002326:	4b3b      	ldr	r3, [pc, #236]	; (8002414 <HAL_GPIO_Init+0x334>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800234a:	4a32      	ldr	r2, [pc, #200]	; (8002414 <HAL_GPIO_Init+0x334>)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002350:	4b30      	ldr	r3, [pc, #192]	; (8002414 <HAL_GPIO_Init+0x334>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002374:	4a27      	ldr	r2, [pc, #156]	; (8002414 <HAL_GPIO_Init+0x334>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800237a:	4b26      	ldr	r3, [pc, #152]	; (8002414 <HAL_GPIO_Init+0x334>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800239e:	4a1d      	ldr	r2, [pc, #116]	; (8002414 <HAL_GPIO_Init+0x334>)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023a4:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <HAL_GPIO_Init+0x334>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023c8:	4a12      	ldr	r2, [pc, #72]	; (8002414 <HAL_GPIO_Init+0x334>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3301      	adds	r3, #1
 80023d2:	61fb      	str	r3, [r7, #28]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	2b0f      	cmp	r3, #15
 80023d8:	f67f ae90 	bls.w	80020fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	3724      	adds	r7, #36	; 0x24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40013800 	.word	0x40013800
 80023f4:	40020000 	.word	0x40020000
 80023f8:	40020400 	.word	0x40020400
 80023fc:	40020800 	.word	0x40020800
 8002400:	40020c00 	.word	0x40020c00
 8002404:	40021000 	.word	0x40021000
 8002408:	40021400 	.word	0x40021400
 800240c:	40021800 	.word	0x40021800
 8002410:	40021c00 	.word	0x40021c00
 8002414:	40013c00 	.word	0x40013c00

08002418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	887b      	ldrh	r3, [r7, #2]
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	e001      	b.n	800243a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800243a:	7bfb      	ldrb	r3, [r7, #15]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]
 8002454:	4613      	mov	r3, r2
 8002456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002458:	787b      	ldrb	r3, [r7, #1]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002464:	e003      	b.n	800246e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002466:	887b      	ldrh	r3, [r7, #2]
 8002468:	041a      	lsls	r2, r3, #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	619a      	str	r2, [r3, #24]
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800247a:	b480      	push	{r7}
 800247c:	b085      	sub	sp, #20
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	460b      	mov	r3, r1
 8002484:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800248c:	887a      	ldrh	r2, [r7, #2]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4013      	ands	r3, r2
 8002492:	041a      	lsls	r2, r3, #16
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	43d9      	mvns	r1, r3
 8002498:	887b      	ldrh	r3, [r7, #2]
 800249a:	400b      	ands	r3, r1
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	619a      	str	r2, [r3, #24]
}
 80024a2:	bf00      	nop
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
	...

080024b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	88fb      	ldrh	r3, [r7, #6]
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d006      	beq.n	80024d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024c6:	4a05      	ldr	r2, [pc, #20]	; (80024dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024c8:	88fb      	ldrh	r3, [r7, #6]
 80024ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024cc:	88fb      	ldrh	r3, [r7, #6]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fb80 	bl	8000bd4 <HAL_GPIO_EXTI_Callback>
  }
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40013c00 	.word	0x40013c00

080024e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e264      	b.n	80029bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d075      	beq.n	80025ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024fe:	4ba3      	ldr	r3, [pc, #652]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b04      	cmp	r3, #4
 8002508:	d00c      	beq.n	8002524 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250a:	4ba0      	ldr	r3, [pc, #640]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002512:	2b08      	cmp	r3, #8
 8002514:	d112      	bne.n	800253c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002516:	4b9d      	ldr	r3, [pc, #628]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002522:	d10b      	bne.n	800253c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	4b99      	ldr	r3, [pc, #612]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d05b      	beq.n	80025e8 <HAL_RCC_OscConfig+0x108>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d157      	bne.n	80025e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e23f      	b.n	80029bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002544:	d106      	bne.n	8002554 <HAL_RCC_OscConfig+0x74>
 8002546:	4b91      	ldr	r3, [pc, #580]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a90      	ldr	r2, [pc, #576]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800254c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e01d      	b.n	8002590 <HAL_RCC_OscConfig+0xb0>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0x98>
 800255e:	4b8b      	ldr	r3, [pc, #556]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a8a      	ldr	r2, [pc, #552]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b88      	ldr	r3, [pc, #544]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a87      	ldr	r2, [pc, #540]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e00b      	b.n	8002590 <HAL_RCC_OscConfig+0xb0>
 8002578:	4b84      	ldr	r3, [pc, #528]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a83      	ldr	r2, [pc, #524]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800257e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	4b81      	ldr	r3, [pc, #516]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a80      	ldr	r2, [pc, #512]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800258a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d013      	beq.n	80025c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7ff f8b8 	bl	800170c <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a0:	f7ff f8b4 	bl	800170c <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e204      	b.n	80029bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	4b76      	ldr	r3, [pc, #472]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0xc0>
 80025be:	e014      	b.n	80025ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7ff f8a4 	bl	800170c <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c8:	f7ff f8a0 	bl	800170c <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e1f0      	b.n	80029bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	4b6c      	ldr	r3, [pc, #432]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0xe8>
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d063      	beq.n	80026be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f6:	4b65      	ldr	r3, [pc, #404]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00b      	beq.n	800261a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002602:	4b62      	ldr	r3, [pc, #392]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800260a:	2b08      	cmp	r3, #8
 800260c:	d11c      	bne.n	8002648 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800260e:	4b5f      	ldr	r3, [pc, #380]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d116      	bne.n	8002648 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261a:	4b5c      	ldr	r3, [pc, #368]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_RCC_OscConfig+0x152>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e1c4      	b.n	80029bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002632:	4b56      	ldr	r3, [pc, #344]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4952      	ldr	r1, [pc, #328]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	e03a      	b.n	80026be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d020      	beq.n	8002692 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002650:	4b4f      	ldr	r3, [pc, #316]	; (8002790 <HAL_RCC_OscConfig+0x2b0>)
 8002652:	2201      	movs	r2, #1
 8002654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7ff f859 	bl	800170c <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265e:	f7ff f855 	bl	800170c <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e1a5      	b.n	80029bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002670:	4b46      	ldr	r3, [pc, #280]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267c:	4b43      	ldr	r3, [pc, #268]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4940      	ldr	r1, [pc, #256]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
 8002690:	e015      	b.n	80026be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002692:	4b3f      	ldr	r3, [pc, #252]	; (8002790 <HAL_RCC_OscConfig+0x2b0>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002698:	f7ff f838 	bl	800170c <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026a0:	f7ff f834 	bl	800170c <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e184      	b.n	80029bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	4b36      	ldr	r3, [pc, #216]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d030      	beq.n	800272c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d016      	beq.n	8002700 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d2:	4b30      	ldr	r3, [pc, #192]	; (8002794 <HAL_RCC_OscConfig+0x2b4>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7ff f818 	bl	800170c <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e0:	f7ff f814 	bl	800170c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e164      	b.n	80029bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f2:	4b26      	ldr	r3, [pc, #152]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x200>
 80026fe:	e015      	b.n	800272c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002700:	4b24      	ldr	r3, [pc, #144]	; (8002794 <HAL_RCC_OscConfig+0x2b4>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002706:	f7ff f801 	bl	800170c <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800270e:	f7fe fffd 	bl	800170c <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e14d      	b.n	80029bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002720:	4b1a      	ldr	r3, [pc, #104]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f0      	bne.n	800270e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 80a0 	beq.w	800287a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273e:	4b13      	ldr	r3, [pc, #76]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10f      	bne.n	800276a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	4b0f      	ldr	r3, [pc, #60]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	4a0e      	ldr	r2, [pc, #56]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	6413      	str	r3, [r2, #64]	; 0x40
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <HAL_RCC_OscConfig+0x2b8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d121      	bne.n	80027ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <HAL_RCC_OscConfig+0x2b8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a07      	ldr	r2, [pc, #28]	; (8002798 <HAL_RCC_OscConfig+0x2b8>)
 800277c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002782:	f7fe ffc3 	bl	800170c <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	e011      	b.n	80027ae <HAL_RCC_OscConfig+0x2ce>
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800
 8002790:	42470000 	.word	0x42470000
 8002794:	42470e80 	.word	0x42470e80
 8002798:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800279c:	f7fe ffb6 	bl	800170c <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e106      	b.n	80029bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ae:	4b85      	ldr	r3, [pc, #532]	; (80029c4 <HAL_RCC_OscConfig+0x4e4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d106      	bne.n	80027d0 <HAL_RCC_OscConfig+0x2f0>
 80027c2:	4b81      	ldr	r3, [pc, #516]	; (80029c8 <HAL_RCC_OscConfig+0x4e8>)
 80027c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c6:	4a80      	ldr	r2, [pc, #512]	; (80029c8 <HAL_RCC_OscConfig+0x4e8>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	6713      	str	r3, [r2, #112]	; 0x70
 80027ce:	e01c      	b.n	800280a <HAL_RCC_OscConfig+0x32a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b05      	cmp	r3, #5
 80027d6:	d10c      	bne.n	80027f2 <HAL_RCC_OscConfig+0x312>
 80027d8:	4b7b      	ldr	r3, [pc, #492]	; (80029c8 <HAL_RCC_OscConfig+0x4e8>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	4a7a      	ldr	r2, [pc, #488]	; (80029c8 <HAL_RCC_OscConfig+0x4e8>)
 80027de:	f043 0304 	orr.w	r3, r3, #4
 80027e2:	6713      	str	r3, [r2, #112]	; 0x70
 80027e4:	4b78      	ldr	r3, [pc, #480]	; (80029c8 <HAL_RCC_OscConfig+0x4e8>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e8:	4a77      	ldr	r2, [pc, #476]	; (80029c8 <HAL_RCC_OscConfig+0x4e8>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6713      	str	r3, [r2, #112]	; 0x70
 80027f0:	e00b      	b.n	800280a <HAL_RCC_OscConfig+0x32a>
 80027f2:	4b75      	ldr	r3, [pc, #468]	; (80029c8 <HAL_RCC_OscConfig+0x4e8>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	4a74      	ldr	r2, [pc, #464]	; (80029c8 <HAL_RCC_OscConfig+0x4e8>)
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	6713      	str	r3, [r2, #112]	; 0x70
 80027fe:	4b72      	ldr	r3, [pc, #456]	; (80029c8 <HAL_RCC_OscConfig+0x4e8>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	4a71      	ldr	r2, [pc, #452]	; (80029c8 <HAL_RCC_OscConfig+0x4e8>)
 8002804:	f023 0304 	bic.w	r3, r3, #4
 8002808:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002812:	f7fe ff7b 	bl	800170c <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f7fe ff77 	bl	800170c <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f241 3288 	movw	r2, #5000	; 0x1388
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e0c5      	b.n	80029bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002830:	4b65      	ldr	r3, [pc, #404]	; (80029c8 <HAL_RCC_OscConfig+0x4e8>)
 8002832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0ee      	beq.n	800281a <HAL_RCC_OscConfig+0x33a>
 800283c:	e014      	b.n	8002868 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283e:	f7fe ff65 	bl	800170c <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002844:	e00a      	b.n	800285c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f7fe ff61 	bl	800170c <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	; 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e0af      	b.n	80029bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285c:	4b5a      	ldr	r3, [pc, #360]	; (80029c8 <HAL_RCC_OscConfig+0x4e8>)
 800285e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1ee      	bne.n	8002846 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002868:	7dfb      	ldrb	r3, [r7, #23]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d105      	bne.n	800287a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286e:	4b56      	ldr	r3, [pc, #344]	; (80029c8 <HAL_RCC_OscConfig+0x4e8>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	4a55      	ldr	r2, [pc, #340]	; (80029c8 <HAL_RCC_OscConfig+0x4e8>)
 8002874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002878:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 809b 	beq.w	80029ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002884:	4b50      	ldr	r3, [pc, #320]	; (80029c8 <HAL_RCC_OscConfig+0x4e8>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	2b08      	cmp	r3, #8
 800288e:	d05c      	beq.n	800294a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d141      	bne.n	800291c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002898:	4b4c      	ldr	r3, [pc, #304]	; (80029cc <HAL_RCC_OscConfig+0x4ec>)
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289e:	f7fe ff35 	bl	800170c <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a6:	f7fe ff31 	bl	800170c <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e081      	b.n	80029bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b8:	4b43      	ldr	r3, [pc, #268]	; (80029c8 <HAL_RCC_OscConfig+0x4e8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f0      	bne.n	80028a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69da      	ldr	r2, [r3, #28]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	019b      	lsls	r3, r3, #6
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	3b01      	subs	r3, #1
 80028de:	041b      	lsls	r3, r3, #16
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	061b      	lsls	r3, r3, #24
 80028e8:	4937      	ldr	r1, [pc, #220]	; (80029c8 <HAL_RCC_OscConfig+0x4e8>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ee:	4b37      	ldr	r3, [pc, #220]	; (80029cc <HAL_RCC_OscConfig+0x4ec>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe ff0a 	bl	800170c <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fc:	f7fe ff06 	bl	800170c <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e056      	b.n	80029bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290e:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <HAL_RCC_OscConfig+0x4e8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0x41c>
 800291a:	e04e      	b.n	80029ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291c:	4b2b      	ldr	r3, [pc, #172]	; (80029cc <HAL_RCC_OscConfig+0x4ec>)
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002922:	f7fe fef3 	bl	800170c <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800292a:	f7fe feef 	bl	800170c <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e03f      	b.n	80029bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293c:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <HAL_RCC_OscConfig+0x4e8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f0      	bne.n	800292a <HAL_RCC_OscConfig+0x44a>
 8002948:	e037      	b.n	80029ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e032      	b.n	80029bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002956:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <HAL_RCC_OscConfig+0x4e8>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d028      	beq.n	80029b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d121      	bne.n	80029b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d11a      	bne.n	80029b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002986:	4013      	ands	r3, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800298c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800298e:	4293      	cmp	r3, r2
 8002990:	d111      	bne.n	80029b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	085b      	lsrs	r3, r3, #1
 800299e:	3b01      	subs	r3, #1
 80029a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d001      	beq.n	80029ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40007000 	.word	0x40007000
 80029c8:	40023800 	.word	0x40023800
 80029cc:	42470060 	.word	0x42470060

080029d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0cc      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e4:	4b68      	ldr	r3, [pc, #416]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d90c      	bls.n	8002a0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b65      	ldr	r3, [pc, #404]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b63      	ldr	r3, [pc, #396]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0b8      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a24:	4b59      	ldr	r3, [pc, #356]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a58      	ldr	r2, [pc, #352]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a3c:	4b53      	ldr	r3, [pc, #332]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	4a52      	ldr	r2, [pc, #328]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a48:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	494d      	ldr	r1, [pc, #308]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d044      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6e:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d119      	bne.n	8002aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e07f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d003      	beq.n	8002a8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d107      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8e:	4b3f      	ldr	r3, [pc, #252]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e06f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9e:	4b3b      	ldr	r3, [pc, #236]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e067      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aae:	4b37      	ldr	r3, [pc, #220]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f023 0203 	bic.w	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4934      	ldr	r1, [pc, #208]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac0:	f7fe fe24 	bl	800170c <HAL_GetTick>
 8002ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac8:	f7fe fe20 	bl	800170c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e04f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ade:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 020c 	and.w	r2, r3, #12
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d1eb      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002af0:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d20c      	bcs.n	8002b18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e032      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b24:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4916      	ldr	r1, [pc, #88]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	490e      	ldr	r1, [pc, #56]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b56:	f000 f821 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	490a      	ldr	r1, [pc, #40]	; (8002b90 <HAL_RCC_ClockConfig+0x1c0>)
 8002b68:	5ccb      	ldrb	r3, [r1, r3]
 8002b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6e:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fd84 	bl	8001684 <HAL_InitTick>

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40023c00 	.word	0x40023c00
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	08004770 	.word	0x08004770
 8002b94:	20000000 	.word	0x20000000
 8002b98:	20000004 	.word	0x20000004

08002b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b9c:	b5b0      	push	{r4, r5, r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	6079      	str	r1, [r7, #4]
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	60f9      	str	r1, [r7, #12]
 8002baa:	2100      	movs	r1, #0
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002bae:	2100      	movs	r1, #0
 8002bb0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bb2:	4952      	ldr	r1, [pc, #328]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x160>)
 8002bb4:	6889      	ldr	r1, [r1, #8]
 8002bb6:	f001 010c 	and.w	r1, r1, #12
 8002bba:	2908      	cmp	r1, #8
 8002bbc:	d00d      	beq.n	8002bda <HAL_RCC_GetSysClockFreq+0x3e>
 8002bbe:	2908      	cmp	r1, #8
 8002bc0:	f200 8094 	bhi.w	8002cec <HAL_RCC_GetSysClockFreq+0x150>
 8002bc4:	2900      	cmp	r1, #0
 8002bc6:	d002      	beq.n	8002bce <HAL_RCC_GetSysClockFreq+0x32>
 8002bc8:	2904      	cmp	r1, #4
 8002bca:	d003      	beq.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x38>
 8002bcc:	e08e      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bce:	4b4c      	ldr	r3, [pc, #304]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x164>)
 8002bd0:	60bb      	str	r3, [r7, #8]
       break;
 8002bd2:	e08e      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bd4:	4b4b      	ldr	r3, [pc, #300]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x168>)
 8002bd6:	60bb      	str	r3, [r7, #8]
      break;
 8002bd8:	e08b      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bda:	4948      	ldr	r1, [pc, #288]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x160>)
 8002bdc:	6849      	ldr	r1, [r1, #4]
 8002bde:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002be2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002be4:	4945      	ldr	r1, [pc, #276]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x160>)
 8002be6:	6849      	ldr	r1, [r1, #4]
 8002be8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002bec:	2900      	cmp	r1, #0
 8002bee:	d024      	beq.n	8002c3a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf0:	4942      	ldr	r1, [pc, #264]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x160>)
 8002bf2:	6849      	ldr	r1, [r1, #4]
 8002bf4:	0989      	lsrs	r1, r1, #6
 8002bf6:	4608      	mov	r0, r1
 8002bf8:	f04f 0100 	mov.w	r1, #0
 8002bfc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002c00:	f04f 0500 	mov.w	r5, #0
 8002c04:	ea00 0204 	and.w	r2, r0, r4
 8002c08:	ea01 0305 	and.w	r3, r1, r5
 8002c0c:	493d      	ldr	r1, [pc, #244]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c0e:	fb01 f003 	mul.w	r0, r1, r3
 8002c12:	2100      	movs	r1, #0
 8002c14:	fb01 f102 	mul.w	r1, r1, r2
 8002c18:	1844      	adds	r4, r0, r1
 8002c1a:	493a      	ldr	r1, [pc, #232]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c1c:	fba2 0101 	umull	r0, r1, r2, r1
 8002c20:	1863      	adds	r3, r4, r1
 8002c22:	4619      	mov	r1, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	f7fd fe56 	bl	80008dc <__aeabi_uldivmod>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4613      	mov	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	e04a      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c3a:	4b30      	ldr	r3, [pc, #192]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x160>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	099b      	lsrs	r3, r3, #6
 8002c40:	461a      	mov	r2, r3
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c4a:	f04f 0100 	mov.w	r1, #0
 8002c4e:	ea02 0400 	and.w	r4, r2, r0
 8002c52:	ea03 0501 	and.w	r5, r3, r1
 8002c56:	4620      	mov	r0, r4
 8002c58:	4629      	mov	r1, r5
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	014b      	lsls	r3, r1, #5
 8002c64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c68:	0142      	lsls	r2, r0, #5
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	1b00      	subs	r0, r0, r4
 8002c70:	eb61 0105 	sbc.w	r1, r1, r5
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	018b      	lsls	r3, r1, #6
 8002c7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c82:	0182      	lsls	r2, r0, #6
 8002c84:	1a12      	subs	r2, r2, r0
 8002c86:	eb63 0301 	sbc.w	r3, r3, r1
 8002c8a:	f04f 0000 	mov.w	r0, #0
 8002c8e:	f04f 0100 	mov.w	r1, #0
 8002c92:	00d9      	lsls	r1, r3, #3
 8002c94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c98:	00d0      	lsls	r0, r2, #3
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	1912      	adds	r2, r2, r4
 8002ca0:	eb45 0303 	adc.w	r3, r5, r3
 8002ca4:	f04f 0000 	mov.w	r0, #0
 8002ca8:	f04f 0100 	mov.w	r1, #0
 8002cac:	0299      	lsls	r1, r3, #10
 8002cae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002cb2:	0290      	lsls	r0, r2, #10
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4610      	mov	r0, r2
 8002cba:	4619      	mov	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	f7fd fe0a 	bl	80008dc <__aeabi_uldivmod>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4613      	mov	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x160>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	0c1b      	lsrs	r3, r3, #16
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	3301      	adds	r3, #1
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce8:	60bb      	str	r3, [r7, #8]
      break;
 8002cea:	e002      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x164>)
 8002cee:	60bb      	str	r3, [r7, #8]
      break;
 8002cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	00f42400 	.word	0x00f42400
 8002d04:	017d7840 	.word	0x017d7840

08002d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d0c:	4b03      	ldr	r3, [pc, #12]	; (8002d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	20000000 	.word	0x20000000

08002d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d24:	f7ff fff0 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	0a9b      	lsrs	r3, r3, #10
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	4903      	ldr	r1, [pc, #12]	; (8002d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40023800 	.word	0x40023800
 8002d44:	08004780 	.word	0x08004780

08002d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d4c:	f7ff ffdc 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	0b5b      	lsrs	r3, r3, #13
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4903      	ldr	r1, [pc, #12]	; (8002d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	08004780 	.word	0x08004780

08002d70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e041      	b.n	8002e06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7fe faf2 	bl	8001380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3304      	adds	r3, #4
 8002dac:	4619      	mov	r1, r3
 8002dae:	4610      	mov	r0, r2
 8002db0:	f000 faa0 	bl	80032f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d001      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e04e      	b.n	8002ec6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a23      	ldr	r2, [pc, #140]	; (8002ed4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d022      	beq.n	8002e90 <HAL_TIM_Base_Start_IT+0x80>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e52:	d01d      	beq.n	8002e90 <HAL_TIM_Base_Start_IT+0x80>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a1f      	ldr	r2, [pc, #124]	; (8002ed8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d018      	beq.n	8002e90 <HAL_TIM_Base_Start_IT+0x80>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a1e      	ldr	r2, [pc, #120]	; (8002edc <HAL_TIM_Base_Start_IT+0xcc>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d013      	beq.n	8002e90 <HAL_TIM_Base_Start_IT+0x80>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ee0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00e      	beq.n	8002e90 <HAL_TIM_Base_Start_IT+0x80>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1b      	ldr	r2, [pc, #108]	; (8002ee4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d009      	beq.n	8002e90 <HAL_TIM_Base_Start_IT+0x80>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a19      	ldr	r2, [pc, #100]	; (8002ee8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d004      	beq.n	8002e90 <HAL_TIM_Base_Start_IT+0x80>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a18      	ldr	r2, [pc, #96]	; (8002eec <HAL_TIM_Base_Start_IT+0xdc>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d111      	bne.n	8002eb4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b06      	cmp	r3, #6
 8002ea0:	d010      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 0201 	orr.w	r2, r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb2:	e007      	b.n	8002ec4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40010000 	.word	0x40010000
 8002ed8:	40000400 	.word	0x40000400
 8002edc:	40000800 	.word	0x40000800
 8002ee0:	40000c00 	.word	0x40000c00
 8002ee4:	40010400 	.word	0x40010400
 8002ee8:	40014000 	.word	0x40014000
 8002eec:	40001800 	.word	0x40001800

08002ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d122      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d11b      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f06f 0202 	mvn.w	r2, #2
 8002f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f9bf 	bl	80032b6 <HAL_TIM_IC_CaptureCallback>
 8002f38:	e005      	b.n	8002f46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f9b1 	bl	80032a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f9c2 	bl	80032ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d122      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d11b      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f06f 0204 	mvn.w	r2, #4
 8002f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2202      	movs	r2, #2
 8002f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f995 	bl	80032b6 <HAL_TIM_IC_CaptureCallback>
 8002f8c:	e005      	b.n	8002f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f987 	bl	80032a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f998 	bl	80032ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d122      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d11b      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0208 	mvn.w	r2, #8
 8002fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2204      	movs	r2, #4
 8002fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f96b 	bl	80032b6 <HAL_TIM_IC_CaptureCallback>
 8002fe0:	e005      	b.n	8002fee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f95d 	bl	80032a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f96e 	bl	80032ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	2b10      	cmp	r3, #16
 8003000:	d122      	bne.n	8003048 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	2b10      	cmp	r3, #16
 800300e:	d11b      	bne.n	8003048 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0210 	mvn.w	r2, #16
 8003018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2208      	movs	r2, #8
 800301e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f941 	bl	80032b6 <HAL_TIM_IC_CaptureCallback>
 8003034:	e005      	b.n	8003042 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f933 	bl	80032a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f944 	bl	80032ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b01      	cmp	r3, #1
 8003054:	d10e      	bne.n	8003074 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b01      	cmp	r3, #1
 8003062:	d107      	bne.n	8003074 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f06f 0201 	mvn.w	r2, #1
 800306c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f90d 	bl	800328e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307e:	2b80      	cmp	r3, #128	; 0x80
 8003080:	d10e      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308c:	2b80      	cmp	r3, #128	; 0x80
 800308e:	d107      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 faea 	bl	8003674 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030aa:	2b40      	cmp	r3, #64	; 0x40
 80030ac:	d10e      	bne.n	80030cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	d107      	bne.n	80030cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f909 	bl	80032de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	d10e      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0320 	and.w	r3, r3, #32
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d107      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0220 	mvn.w	r2, #32
 80030f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fab4 	bl	8003660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030f8:	bf00      	nop
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_TIM_ConfigClockSource+0x1c>
 8003118:	2302      	movs	r3, #2
 800311a:	e0b4      	b.n	8003286 <HAL_TIM_ConfigClockSource+0x186>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800313a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003142:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003154:	d03e      	beq.n	80031d4 <HAL_TIM_ConfigClockSource+0xd4>
 8003156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800315a:	f200 8087 	bhi.w	800326c <HAL_TIM_ConfigClockSource+0x16c>
 800315e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003162:	f000 8086 	beq.w	8003272 <HAL_TIM_ConfigClockSource+0x172>
 8003166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316a:	d87f      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
 800316c:	2b70      	cmp	r3, #112	; 0x70
 800316e:	d01a      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0xa6>
 8003170:	2b70      	cmp	r3, #112	; 0x70
 8003172:	d87b      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
 8003174:	2b60      	cmp	r3, #96	; 0x60
 8003176:	d050      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x11a>
 8003178:	2b60      	cmp	r3, #96	; 0x60
 800317a:	d877      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
 800317c:	2b50      	cmp	r3, #80	; 0x50
 800317e:	d03c      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0xfa>
 8003180:	2b50      	cmp	r3, #80	; 0x50
 8003182:	d873      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
 8003184:	2b40      	cmp	r3, #64	; 0x40
 8003186:	d058      	beq.n	800323a <HAL_TIM_ConfigClockSource+0x13a>
 8003188:	2b40      	cmp	r3, #64	; 0x40
 800318a:	d86f      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
 800318c:	2b30      	cmp	r3, #48	; 0x30
 800318e:	d064      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x15a>
 8003190:	2b30      	cmp	r3, #48	; 0x30
 8003192:	d86b      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
 8003194:	2b20      	cmp	r3, #32
 8003196:	d060      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x15a>
 8003198:	2b20      	cmp	r3, #32
 800319a:	d867      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
 800319c:	2b00      	cmp	r3, #0
 800319e:	d05c      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x15a>
 80031a0:	2b10      	cmp	r3, #16
 80031a2:	d05a      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x15a>
 80031a4:	e062      	b.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	6899      	ldr	r1, [r3, #8]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f000 f9b7 	bl	8003528 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	609a      	str	r2, [r3, #8]
      break;
 80031d2:	e04f      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	6899      	ldr	r1, [r3, #8]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f000 f9a0 	bl	8003528 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031f6:	609a      	str	r2, [r3, #8]
      break;
 80031f8:	e03c      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6859      	ldr	r1, [r3, #4]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	461a      	mov	r2, r3
 8003208:	f000 f914 	bl	8003434 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2150      	movs	r1, #80	; 0x50
 8003212:	4618      	mov	r0, r3
 8003214:	f000 f96d 	bl	80034f2 <TIM_ITRx_SetConfig>
      break;
 8003218:	e02c      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6859      	ldr	r1, [r3, #4]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	461a      	mov	r2, r3
 8003228:	f000 f933 	bl	8003492 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2160      	movs	r1, #96	; 0x60
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f95d 	bl	80034f2 <TIM_ITRx_SetConfig>
      break;
 8003238:	e01c      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	6859      	ldr	r1, [r3, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	461a      	mov	r2, r3
 8003248:	f000 f8f4 	bl	8003434 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2140      	movs	r1, #64	; 0x40
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f94d 	bl	80034f2 <TIM_ITRx_SetConfig>
      break;
 8003258:	e00c      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4619      	mov	r1, r3
 8003264:	4610      	mov	r0, r2
 8003266:	f000 f944 	bl	80034f2 <TIM_ITRx_SetConfig>
      break;
 800326a:	e003      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
      break;
 8003270:	e000      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003272:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003284:	7bfb      	ldrb	r3, [r7, #15]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
	...

080032f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a40      	ldr	r2, [pc, #256]	; (8003408 <TIM_Base_SetConfig+0x114>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d013      	beq.n	8003334 <TIM_Base_SetConfig+0x40>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003312:	d00f      	beq.n	8003334 <TIM_Base_SetConfig+0x40>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a3d      	ldr	r2, [pc, #244]	; (800340c <TIM_Base_SetConfig+0x118>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d00b      	beq.n	8003334 <TIM_Base_SetConfig+0x40>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a3c      	ldr	r2, [pc, #240]	; (8003410 <TIM_Base_SetConfig+0x11c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d007      	beq.n	8003334 <TIM_Base_SetConfig+0x40>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a3b      	ldr	r2, [pc, #236]	; (8003414 <TIM_Base_SetConfig+0x120>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d003      	beq.n	8003334 <TIM_Base_SetConfig+0x40>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a3a      	ldr	r2, [pc, #232]	; (8003418 <TIM_Base_SetConfig+0x124>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d108      	bne.n	8003346 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a2f      	ldr	r2, [pc, #188]	; (8003408 <TIM_Base_SetConfig+0x114>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d02b      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003354:	d027      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a2c      	ldr	r2, [pc, #176]	; (800340c <TIM_Base_SetConfig+0x118>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d023      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a2b      	ldr	r2, [pc, #172]	; (8003410 <TIM_Base_SetConfig+0x11c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d01f      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a2a      	ldr	r2, [pc, #168]	; (8003414 <TIM_Base_SetConfig+0x120>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d01b      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a29      	ldr	r2, [pc, #164]	; (8003418 <TIM_Base_SetConfig+0x124>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d017      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a28      	ldr	r2, [pc, #160]	; (800341c <TIM_Base_SetConfig+0x128>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d013      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a27      	ldr	r2, [pc, #156]	; (8003420 <TIM_Base_SetConfig+0x12c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00f      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a26      	ldr	r2, [pc, #152]	; (8003424 <TIM_Base_SetConfig+0x130>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00b      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a25      	ldr	r2, [pc, #148]	; (8003428 <TIM_Base_SetConfig+0x134>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d007      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a24      	ldr	r2, [pc, #144]	; (800342c <TIM_Base_SetConfig+0x138>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d003      	beq.n	80033a6 <TIM_Base_SetConfig+0xb2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a23      	ldr	r2, [pc, #140]	; (8003430 <TIM_Base_SetConfig+0x13c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d108      	bne.n	80033b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <TIM_Base_SetConfig+0x114>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d003      	beq.n	80033ec <TIM_Base_SetConfig+0xf8>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a0c      	ldr	r2, [pc, #48]	; (8003418 <TIM_Base_SetConfig+0x124>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d103      	bne.n	80033f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	615a      	str	r2, [r3, #20]
}
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40010000 	.word	0x40010000
 800340c:	40000400 	.word	0x40000400
 8003410:	40000800 	.word	0x40000800
 8003414:	40000c00 	.word	0x40000c00
 8003418:	40010400 	.word	0x40010400
 800341c:	40014000 	.word	0x40014000
 8003420:	40014400 	.word	0x40014400
 8003424:	40014800 	.word	0x40014800
 8003428:	40001800 	.word	0x40001800
 800342c:	40001c00 	.word	0x40001c00
 8003430:	40002000 	.word	0x40002000

08003434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003434:	b480      	push	{r7}
 8003436:	b087      	sub	sp, #28
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	f023 0201 	bic.w	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800345e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f023 030a 	bic.w	r3, r3, #10
 8003470:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4313      	orrs	r3, r2
 8003478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	621a      	str	r2, [r3, #32]
}
 8003486:	bf00      	nop
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003492:	b480      	push	{r7}
 8003494:	b087      	sub	sp, #28
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	f023 0210 	bic.w	r2, r3, #16
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	031b      	lsls	r3, r3, #12
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	621a      	str	r2, [r3, #32]
}
 80034e6:	bf00      	nop
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b085      	sub	sp, #20
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003508:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	f043 0307 	orr.w	r3, r3, #7
 8003514:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	609a      	str	r2, [r3, #8]
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003542:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	021a      	lsls	r2, r3, #8
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	431a      	orrs	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4313      	orrs	r3, r2
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	609a      	str	r2, [r3, #8]
}
 800355c:	bf00      	nop
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800357c:	2302      	movs	r3, #2
 800357e:	e05a      	b.n	8003636 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a21      	ldr	r2, [pc, #132]	; (8003644 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d022      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035cc:	d01d      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1d      	ldr	r2, [pc, #116]	; (8003648 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d018      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a1b      	ldr	r2, [pc, #108]	; (800364c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1a      	ldr	r2, [pc, #104]	; (8003650 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00e      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a18      	ldr	r2, [pc, #96]	; (8003654 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a17      	ldr	r2, [pc, #92]	; (8003658 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d004      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a15      	ldr	r2, [pc, #84]	; (800365c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d10c      	bne.n	8003624 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003610:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	4313      	orrs	r3, r2
 800361a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40010000 	.word	0x40010000
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800
 8003650:	40000c00 	.word	0x40000c00
 8003654:	40010400 	.word	0x40010400
 8003658:	40014000 	.word	0x40014000
 800365c:	40001800 	.word	0x40001800

08003660 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e03f      	b.n	800371a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fd fe8e 	bl	80013d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2224      	movs	r2, #36	; 0x24
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f9cb 	bl	8003a68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003700:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b08a      	sub	sp, #40	; 0x28
 8003726:	af02      	add	r7, sp, #8
 8003728:	60f8      	str	r0, [r7, #12]
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	603b      	str	r3, [r7, #0]
 800372e:	4613      	mov	r3, r2
 8003730:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b20      	cmp	r3, #32
 8003740:	d17c      	bne.n	800383c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_UART_Transmit+0x2c>
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e075      	b.n	800383e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_UART_Transmit+0x3e>
 800375c:	2302      	movs	r3, #2
 800375e:	e06e      	b.n	800383e <HAL_UART_Transmit+0x11c>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2221      	movs	r2, #33	; 0x21
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003776:	f7fd ffc9 	bl	800170c <HAL_GetTick>
 800377a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	88fa      	ldrh	r2, [r7, #6]
 8003780:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	88fa      	ldrh	r2, [r7, #6]
 8003786:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003790:	d108      	bne.n	80037a4 <HAL_UART_Transmit+0x82>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d104      	bne.n	80037a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	61bb      	str	r3, [r7, #24]
 80037a2:	e003      	b.n	80037ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037a8:	2300      	movs	r3, #0
 80037aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037b4:	e02a      	b.n	800380c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2200      	movs	r2, #0
 80037be:	2180      	movs	r1, #128	; 0x80
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f8e2 	bl	800398a <UART_WaitOnFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e036      	b.n	800383e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10b      	bne.n	80037ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	3302      	adds	r3, #2
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	e007      	b.n	80037fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	781a      	ldrb	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	3301      	adds	r3, #1
 80037fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1cf      	bne.n	80037b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2200      	movs	r2, #0
 800381e:	2140      	movs	r1, #64	; 0x40
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f8b2 	bl	800398a <UART_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e006      	b.n	800383e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	e000      	b.n	800383e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800383c:	2302      	movs	r3, #2
  }
}
 800383e:	4618      	mov	r0, r3
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b08a      	sub	sp, #40	; 0x28
 800384a:	af02      	add	r7, sp, #8
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	603b      	str	r3, [r7, #0]
 8003852:	4613      	mov	r3, r2
 8003854:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b20      	cmp	r3, #32
 8003864:	f040 808c 	bne.w	8003980 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <HAL_UART_Receive+0x2e>
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e084      	b.n	8003982 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_UART_Receive+0x40>
 8003882:	2302      	movs	r3, #2
 8003884:	e07d      	b.n	8003982 <HAL_UART_Receive+0x13c>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2222      	movs	r2, #34	; 0x22
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038a2:	f7fd ff33 	bl	800170c <HAL_GetTick>
 80038a6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	88fa      	ldrh	r2, [r7, #6]
 80038ac:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	88fa      	ldrh	r2, [r7, #6]
 80038b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038bc:	d108      	bne.n	80038d0 <HAL_UART_Receive+0x8a>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d104      	bne.n	80038d0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	e003      	b.n	80038d8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80038e0:	e043      	b.n	800396a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2200      	movs	r2, #0
 80038ea:	2120      	movs	r1, #32
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f84c 	bl	800398a <UART_WaitOnFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e042      	b.n	8003982 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10c      	bne.n	800391c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	b29b      	uxth	r3, r3
 800390a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800390e:	b29a      	uxth	r2, r3
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	3302      	adds	r3, #2
 8003918:	61bb      	str	r3, [r7, #24]
 800391a:	e01f      	b.n	800395c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003924:	d007      	beq.n	8003936 <HAL_UART_Receive+0xf0>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10a      	bne.n	8003944 <HAL_UART_Receive+0xfe>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	b2da      	uxtb	r2, r3
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	701a      	strb	r2, [r3, #0]
 8003942:	e008      	b.n	8003956 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003950:	b2da      	uxtb	r2, r3
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	3301      	adds	r3, #1
 800395a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1b6      	bne.n	80038e2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	e000      	b.n	8003982 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
  }
}
 8003982:	4618      	mov	r0, r3
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b090      	sub	sp, #64	; 0x40
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	4613      	mov	r3, r2
 8003998:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800399a:	e050      	b.n	8003a3e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800399e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a2:	d04c      	beq.n	8003a3e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d007      	beq.n	80039ba <UART_WaitOnFlagUntilTimeout+0x30>
 80039aa:	f7fd feaf 	bl	800170c <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d241      	bcs.n	8003a3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	330c      	adds	r3, #12
 80039c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	e853 3f00 	ldrex	r3, [r3]
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039da:	637a      	str	r2, [r7, #52]	; 0x34
 80039dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039e2:	e841 2300 	strex	r3, r2, [r1]
 80039e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1e5      	bne.n	80039ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3314      	adds	r3, #20
 80039f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	613b      	str	r3, [r7, #16]
   return(result);
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f023 0301 	bic.w	r3, r3, #1
 8003a04:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3314      	adds	r3, #20
 8003a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a0e:	623a      	str	r2, [r7, #32]
 8003a10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	69f9      	ldr	r1, [r7, #28]
 8003a14:	6a3a      	ldr	r2, [r7, #32]
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e5      	bne.n	80039ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e00f      	b.n	8003a5e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4013      	ands	r3, r2
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	bf0c      	ite	eq
 8003a4e:	2301      	moveq	r3, #1
 8003a50:	2300      	movne	r3, #0
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	79fb      	ldrb	r3, [r7, #7]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d09f      	beq.n	800399c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3740      	adds	r7, #64	; 0x40
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a6c:	b09f      	sub	sp, #124	; 0x7c
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7e:	68d9      	ldr	r1, [r3, #12]
 8003a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	ea40 0301 	orr.w	r3, r0, r1
 8003a88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003aac:	f021 010c 	bic.w	r1, r1, #12
 8003ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac6:	6999      	ldr	r1, [r3, #24]
 8003ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	ea40 0301 	orr.w	r3, r0, r1
 8003ad0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	4bc5      	ldr	r3, [pc, #788]	; (8003dec <UART_SetConfig+0x384>)
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d004      	beq.n	8003ae6 <UART_SetConfig+0x7e>
 8003adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4bc3      	ldr	r3, [pc, #780]	; (8003df0 <UART_SetConfig+0x388>)
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d103      	bne.n	8003aee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ae6:	f7ff f92f 	bl	8002d48 <HAL_RCC_GetPCLK2Freq>
 8003aea:	6778      	str	r0, [r7, #116]	; 0x74
 8003aec:	e002      	b.n	8003af4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aee:	f7ff f917 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 8003af2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003afc:	f040 80b6 	bne.w	8003c6c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b02:	461c      	mov	r4, r3
 8003b04:	f04f 0500 	mov.w	r5, #0
 8003b08:	4622      	mov	r2, r4
 8003b0a:	462b      	mov	r3, r5
 8003b0c:	1891      	adds	r1, r2, r2
 8003b0e:	6439      	str	r1, [r7, #64]	; 0x40
 8003b10:	415b      	adcs	r3, r3
 8003b12:	647b      	str	r3, [r7, #68]	; 0x44
 8003b14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b18:	1912      	adds	r2, r2, r4
 8003b1a:	eb45 0303 	adc.w	r3, r5, r3
 8003b1e:	f04f 0000 	mov.w	r0, #0
 8003b22:	f04f 0100 	mov.w	r1, #0
 8003b26:	00d9      	lsls	r1, r3, #3
 8003b28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b2c:	00d0      	lsls	r0, r2, #3
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	1911      	adds	r1, r2, r4
 8003b34:	6639      	str	r1, [r7, #96]	; 0x60
 8003b36:	416b      	adcs	r3, r5
 8003b38:	667b      	str	r3, [r7, #100]	; 0x64
 8003b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	1891      	adds	r1, r2, r2
 8003b46:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b48:	415b      	adcs	r3, r3
 8003b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b50:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b54:	f7fc fec2 	bl	80008dc <__aeabi_uldivmod>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4ba5      	ldr	r3, [pc, #660]	; (8003df4 <UART_SetConfig+0x38c>)
 8003b5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	011e      	lsls	r6, r3, #4
 8003b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b68:	461c      	mov	r4, r3
 8003b6a:	f04f 0500 	mov.w	r5, #0
 8003b6e:	4622      	mov	r2, r4
 8003b70:	462b      	mov	r3, r5
 8003b72:	1891      	adds	r1, r2, r2
 8003b74:	6339      	str	r1, [r7, #48]	; 0x30
 8003b76:	415b      	adcs	r3, r3
 8003b78:	637b      	str	r3, [r7, #52]	; 0x34
 8003b7a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b7e:	1912      	adds	r2, r2, r4
 8003b80:	eb45 0303 	adc.w	r3, r5, r3
 8003b84:	f04f 0000 	mov.w	r0, #0
 8003b88:	f04f 0100 	mov.w	r1, #0
 8003b8c:	00d9      	lsls	r1, r3, #3
 8003b8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b92:	00d0      	lsls	r0, r2, #3
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	1911      	adds	r1, r2, r4
 8003b9a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b9c:	416b      	adcs	r3, r5
 8003b9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	1891      	adds	r1, r2, r2
 8003bac:	62b9      	str	r1, [r7, #40]	; 0x28
 8003bae:	415b      	adcs	r3, r3
 8003bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bb6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003bba:	f7fc fe8f 	bl	80008dc <__aeabi_uldivmod>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4b8c      	ldr	r3, [pc, #560]	; (8003df4 <UART_SetConfig+0x38c>)
 8003bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc8:	095b      	lsrs	r3, r3, #5
 8003bca:	2164      	movs	r1, #100	; 0x64
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	3332      	adds	r3, #50	; 0x32
 8003bd6:	4a87      	ldr	r2, [pc, #540]	; (8003df4 <UART_SetConfig+0x38c>)
 8003bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bdc:	095b      	lsrs	r3, r3, #5
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003be4:	441e      	add	r6, r3
 8003be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003be8:	4618      	mov	r0, r3
 8003bea:	f04f 0100 	mov.w	r1, #0
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	1894      	adds	r4, r2, r2
 8003bf4:	623c      	str	r4, [r7, #32]
 8003bf6:	415b      	adcs	r3, r3
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bfe:	1812      	adds	r2, r2, r0
 8003c00:	eb41 0303 	adc.w	r3, r1, r3
 8003c04:	f04f 0400 	mov.w	r4, #0
 8003c08:	f04f 0500 	mov.w	r5, #0
 8003c0c:	00dd      	lsls	r5, r3, #3
 8003c0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c12:	00d4      	lsls	r4, r2, #3
 8003c14:	4622      	mov	r2, r4
 8003c16:	462b      	mov	r3, r5
 8003c18:	1814      	adds	r4, r2, r0
 8003c1a:	653c      	str	r4, [r7, #80]	; 0x50
 8003c1c:	414b      	adcs	r3, r1
 8003c1e:	657b      	str	r3, [r7, #84]	; 0x54
 8003c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	461a      	mov	r2, r3
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	1891      	adds	r1, r2, r2
 8003c2c:	61b9      	str	r1, [r7, #24]
 8003c2e:	415b      	adcs	r3, r3
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c36:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c3a:	f7fc fe4f 	bl	80008dc <__aeabi_uldivmod>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4b6c      	ldr	r3, [pc, #432]	; (8003df4 <UART_SetConfig+0x38c>)
 8003c44:	fba3 1302 	umull	r1, r3, r3, r2
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	2164      	movs	r1, #100	; 0x64
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	3332      	adds	r3, #50	; 0x32
 8003c56:	4a67      	ldr	r2, [pc, #412]	; (8003df4 <UART_SetConfig+0x38c>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	f003 0207 	and.w	r2, r3, #7
 8003c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4432      	add	r2, r6
 8003c68:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c6a:	e0b9      	b.n	8003de0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c6e:	461c      	mov	r4, r3
 8003c70:	f04f 0500 	mov.w	r5, #0
 8003c74:	4622      	mov	r2, r4
 8003c76:	462b      	mov	r3, r5
 8003c78:	1891      	adds	r1, r2, r2
 8003c7a:	6139      	str	r1, [r7, #16]
 8003c7c:	415b      	adcs	r3, r3
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c84:	1912      	adds	r2, r2, r4
 8003c86:	eb45 0303 	adc.w	r3, r5, r3
 8003c8a:	f04f 0000 	mov.w	r0, #0
 8003c8e:	f04f 0100 	mov.w	r1, #0
 8003c92:	00d9      	lsls	r1, r3, #3
 8003c94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c98:	00d0      	lsls	r0, r2, #3
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	eb12 0804 	adds.w	r8, r2, r4
 8003ca2:	eb43 0905 	adc.w	r9, r3, r5
 8003ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f04f 0100 	mov.w	r1, #0
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	008b      	lsls	r3, r1, #2
 8003cba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cbe:	0082      	lsls	r2, r0, #2
 8003cc0:	4640      	mov	r0, r8
 8003cc2:	4649      	mov	r1, r9
 8003cc4:	f7fc fe0a 	bl	80008dc <__aeabi_uldivmod>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4b49      	ldr	r3, [pc, #292]	; (8003df4 <UART_SetConfig+0x38c>)
 8003cce:	fba3 2302 	umull	r2, r3, r3, r2
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	011e      	lsls	r6, r3, #4
 8003cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f04f 0100 	mov.w	r1, #0
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	1894      	adds	r4, r2, r2
 8003ce4:	60bc      	str	r4, [r7, #8]
 8003ce6:	415b      	adcs	r3, r3
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cee:	1812      	adds	r2, r2, r0
 8003cf0:	eb41 0303 	adc.w	r3, r1, r3
 8003cf4:	f04f 0400 	mov.w	r4, #0
 8003cf8:	f04f 0500 	mov.w	r5, #0
 8003cfc:	00dd      	lsls	r5, r3, #3
 8003cfe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d02:	00d4      	lsls	r4, r2, #3
 8003d04:	4622      	mov	r2, r4
 8003d06:	462b      	mov	r3, r5
 8003d08:	1814      	adds	r4, r2, r0
 8003d0a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003d0c:	414b      	adcs	r3, r1
 8003d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f04f 0100 	mov.w	r1, #0
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	008b      	lsls	r3, r1, #2
 8003d24:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d28:	0082      	lsls	r2, r0, #2
 8003d2a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003d2e:	f7fc fdd5 	bl	80008dc <__aeabi_uldivmod>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4b2f      	ldr	r3, [pc, #188]	; (8003df4 <UART_SetConfig+0x38c>)
 8003d38:	fba3 1302 	umull	r1, r3, r3, r2
 8003d3c:	095b      	lsrs	r3, r3, #5
 8003d3e:	2164      	movs	r1, #100	; 0x64
 8003d40:	fb01 f303 	mul.w	r3, r1, r3
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	3332      	adds	r3, #50	; 0x32
 8003d4a:	4a2a      	ldr	r2, [pc, #168]	; (8003df4 <UART_SetConfig+0x38c>)
 8003d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d50:	095b      	lsrs	r3, r3, #5
 8003d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d56:	441e      	add	r6, r3
 8003d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f04f 0100 	mov.w	r1, #0
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	1894      	adds	r4, r2, r2
 8003d66:	603c      	str	r4, [r7, #0]
 8003d68:	415b      	adcs	r3, r3
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d70:	1812      	adds	r2, r2, r0
 8003d72:	eb41 0303 	adc.w	r3, r1, r3
 8003d76:	f04f 0400 	mov.w	r4, #0
 8003d7a:	f04f 0500 	mov.w	r5, #0
 8003d7e:	00dd      	lsls	r5, r3, #3
 8003d80:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d84:	00d4      	lsls	r4, r2, #3
 8003d86:	4622      	mov	r2, r4
 8003d88:	462b      	mov	r3, r5
 8003d8a:	eb12 0a00 	adds.w	sl, r2, r0
 8003d8e:	eb43 0b01 	adc.w	fp, r3, r1
 8003d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f04f 0100 	mov.w	r1, #0
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	008b      	lsls	r3, r1, #2
 8003da6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003daa:	0082      	lsls	r2, r0, #2
 8003dac:	4650      	mov	r0, sl
 8003dae:	4659      	mov	r1, fp
 8003db0:	f7fc fd94 	bl	80008dc <__aeabi_uldivmod>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4b0e      	ldr	r3, [pc, #56]	; (8003df4 <UART_SetConfig+0x38c>)
 8003dba:	fba3 1302 	umull	r1, r3, r3, r2
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	2164      	movs	r1, #100	; 0x64
 8003dc2:	fb01 f303 	mul.w	r3, r1, r3
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	3332      	adds	r3, #50	; 0x32
 8003dcc:	4a09      	ldr	r2, [pc, #36]	; (8003df4 <UART_SetConfig+0x38c>)
 8003dce:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	f003 020f 	and.w	r2, r3, #15
 8003dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4432      	add	r2, r6
 8003dde:	609a      	str	r2, [r3, #8]
}
 8003de0:	bf00      	nop
 8003de2:	377c      	adds	r7, #124	; 0x7c
 8003de4:	46bd      	mov	sp, r7
 8003de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dea:	bf00      	nop
 8003dec:	40011000 	.word	0x40011000
 8003df0:	40011400 	.word	0x40011400
 8003df4:	51eb851f 	.word	0x51eb851f

08003df8 <__errno>:
 8003df8:	4b01      	ldr	r3, [pc, #4]	; (8003e00 <__errno+0x8>)
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	2000000c 	.word	0x2000000c

08003e04 <__libc_init_array>:
 8003e04:	b570      	push	{r4, r5, r6, lr}
 8003e06:	4d0d      	ldr	r5, [pc, #52]	; (8003e3c <__libc_init_array+0x38>)
 8003e08:	4c0d      	ldr	r4, [pc, #52]	; (8003e40 <__libc_init_array+0x3c>)
 8003e0a:	1b64      	subs	r4, r4, r5
 8003e0c:	10a4      	asrs	r4, r4, #2
 8003e0e:	2600      	movs	r6, #0
 8003e10:	42a6      	cmp	r6, r4
 8003e12:	d109      	bne.n	8003e28 <__libc_init_array+0x24>
 8003e14:	4d0b      	ldr	r5, [pc, #44]	; (8003e44 <__libc_init_array+0x40>)
 8003e16:	4c0c      	ldr	r4, [pc, #48]	; (8003e48 <__libc_init_array+0x44>)
 8003e18:	f000 fc4e 	bl	80046b8 <_init>
 8003e1c:	1b64      	subs	r4, r4, r5
 8003e1e:	10a4      	asrs	r4, r4, #2
 8003e20:	2600      	movs	r6, #0
 8003e22:	42a6      	cmp	r6, r4
 8003e24:	d105      	bne.n	8003e32 <__libc_init_array+0x2e>
 8003e26:	bd70      	pop	{r4, r5, r6, pc}
 8003e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e2c:	4798      	blx	r3
 8003e2e:	3601      	adds	r6, #1
 8003e30:	e7ee      	b.n	8003e10 <__libc_init_array+0xc>
 8003e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e36:	4798      	blx	r3
 8003e38:	3601      	adds	r6, #1
 8003e3a:	e7f2      	b.n	8003e22 <__libc_init_array+0x1e>
 8003e3c:	080047c4 	.word	0x080047c4
 8003e40:	080047c4 	.word	0x080047c4
 8003e44:	080047c4 	.word	0x080047c4
 8003e48:	080047c8 	.word	0x080047c8

08003e4c <memset>:
 8003e4c:	4402      	add	r2, r0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d100      	bne.n	8003e56 <memset+0xa>
 8003e54:	4770      	bx	lr
 8003e56:	f803 1b01 	strb.w	r1, [r3], #1
 8003e5a:	e7f9      	b.n	8003e50 <memset+0x4>

08003e5c <siprintf>:
 8003e5c:	b40e      	push	{r1, r2, r3}
 8003e5e:	b500      	push	{lr}
 8003e60:	b09c      	sub	sp, #112	; 0x70
 8003e62:	ab1d      	add	r3, sp, #116	; 0x74
 8003e64:	9002      	str	r0, [sp, #8]
 8003e66:	9006      	str	r0, [sp, #24]
 8003e68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e6c:	4809      	ldr	r0, [pc, #36]	; (8003e94 <siprintf+0x38>)
 8003e6e:	9107      	str	r1, [sp, #28]
 8003e70:	9104      	str	r1, [sp, #16]
 8003e72:	4909      	ldr	r1, [pc, #36]	; (8003e98 <siprintf+0x3c>)
 8003e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e78:	9105      	str	r1, [sp, #20]
 8003e7a:	6800      	ldr	r0, [r0, #0]
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	a902      	add	r1, sp, #8
 8003e80:	f000 f868 	bl	8003f54 <_svfiprintf_r>
 8003e84:	9b02      	ldr	r3, [sp, #8]
 8003e86:	2200      	movs	r2, #0
 8003e88:	701a      	strb	r2, [r3, #0]
 8003e8a:	b01c      	add	sp, #112	; 0x70
 8003e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e90:	b003      	add	sp, #12
 8003e92:	4770      	bx	lr
 8003e94:	2000000c 	.word	0x2000000c
 8003e98:	ffff0208 	.word	0xffff0208

08003e9c <__ssputs_r>:
 8003e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea0:	688e      	ldr	r6, [r1, #8]
 8003ea2:	429e      	cmp	r6, r3
 8003ea4:	4682      	mov	sl, r0
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	4690      	mov	r8, r2
 8003eaa:	461f      	mov	r7, r3
 8003eac:	d838      	bhi.n	8003f20 <__ssputs_r+0x84>
 8003eae:	898a      	ldrh	r2, [r1, #12]
 8003eb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003eb4:	d032      	beq.n	8003f1c <__ssputs_r+0x80>
 8003eb6:	6825      	ldr	r5, [r4, #0]
 8003eb8:	6909      	ldr	r1, [r1, #16]
 8003eba:	eba5 0901 	sub.w	r9, r5, r1
 8003ebe:	6965      	ldr	r5, [r4, #20]
 8003ec0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ec4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ec8:	3301      	adds	r3, #1
 8003eca:	444b      	add	r3, r9
 8003ecc:	106d      	asrs	r5, r5, #1
 8003ece:	429d      	cmp	r5, r3
 8003ed0:	bf38      	it	cc
 8003ed2:	461d      	movcc	r5, r3
 8003ed4:	0553      	lsls	r3, r2, #21
 8003ed6:	d531      	bpl.n	8003f3c <__ssputs_r+0xa0>
 8003ed8:	4629      	mov	r1, r5
 8003eda:	f000 fb47 	bl	800456c <_malloc_r>
 8003ede:	4606      	mov	r6, r0
 8003ee0:	b950      	cbnz	r0, 8003ef8 <__ssputs_r+0x5c>
 8003ee2:	230c      	movs	r3, #12
 8003ee4:	f8ca 3000 	str.w	r3, [sl]
 8003ee8:	89a3      	ldrh	r3, [r4, #12]
 8003eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eee:	81a3      	strh	r3, [r4, #12]
 8003ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef8:	6921      	ldr	r1, [r4, #16]
 8003efa:	464a      	mov	r2, r9
 8003efc:	f000 fabe 	bl	800447c <memcpy>
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f0a:	81a3      	strh	r3, [r4, #12]
 8003f0c:	6126      	str	r6, [r4, #16]
 8003f0e:	6165      	str	r5, [r4, #20]
 8003f10:	444e      	add	r6, r9
 8003f12:	eba5 0509 	sub.w	r5, r5, r9
 8003f16:	6026      	str	r6, [r4, #0]
 8003f18:	60a5      	str	r5, [r4, #8]
 8003f1a:	463e      	mov	r6, r7
 8003f1c:	42be      	cmp	r6, r7
 8003f1e:	d900      	bls.n	8003f22 <__ssputs_r+0x86>
 8003f20:	463e      	mov	r6, r7
 8003f22:	4632      	mov	r2, r6
 8003f24:	6820      	ldr	r0, [r4, #0]
 8003f26:	4641      	mov	r1, r8
 8003f28:	f000 fab6 	bl	8004498 <memmove>
 8003f2c:	68a3      	ldr	r3, [r4, #8]
 8003f2e:	6822      	ldr	r2, [r4, #0]
 8003f30:	1b9b      	subs	r3, r3, r6
 8003f32:	4432      	add	r2, r6
 8003f34:	60a3      	str	r3, [r4, #8]
 8003f36:	6022      	str	r2, [r4, #0]
 8003f38:	2000      	movs	r0, #0
 8003f3a:	e7db      	b.n	8003ef4 <__ssputs_r+0x58>
 8003f3c:	462a      	mov	r2, r5
 8003f3e:	f000 fb6f 	bl	8004620 <_realloc_r>
 8003f42:	4606      	mov	r6, r0
 8003f44:	2800      	cmp	r0, #0
 8003f46:	d1e1      	bne.n	8003f0c <__ssputs_r+0x70>
 8003f48:	6921      	ldr	r1, [r4, #16]
 8003f4a:	4650      	mov	r0, sl
 8003f4c:	f000 fabe 	bl	80044cc <_free_r>
 8003f50:	e7c7      	b.n	8003ee2 <__ssputs_r+0x46>
	...

08003f54 <_svfiprintf_r>:
 8003f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f58:	4698      	mov	r8, r3
 8003f5a:	898b      	ldrh	r3, [r1, #12]
 8003f5c:	061b      	lsls	r3, r3, #24
 8003f5e:	b09d      	sub	sp, #116	; 0x74
 8003f60:	4607      	mov	r7, r0
 8003f62:	460d      	mov	r5, r1
 8003f64:	4614      	mov	r4, r2
 8003f66:	d50e      	bpl.n	8003f86 <_svfiprintf_r+0x32>
 8003f68:	690b      	ldr	r3, [r1, #16]
 8003f6a:	b963      	cbnz	r3, 8003f86 <_svfiprintf_r+0x32>
 8003f6c:	2140      	movs	r1, #64	; 0x40
 8003f6e:	f000 fafd 	bl	800456c <_malloc_r>
 8003f72:	6028      	str	r0, [r5, #0]
 8003f74:	6128      	str	r0, [r5, #16]
 8003f76:	b920      	cbnz	r0, 8003f82 <_svfiprintf_r+0x2e>
 8003f78:	230c      	movs	r3, #12
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f80:	e0d1      	b.n	8004126 <_svfiprintf_r+0x1d2>
 8003f82:	2340      	movs	r3, #64	; 0x40
 8003f84:	616b      	str	r3, [r5, #20]
 8003f86:	2300      	movs	r3, #0
 8003f88:	9309      	str	r3, [sp, #36]	; 0x24
 8003f8a:	2320      	movs	r3, #32
 8003f8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f90:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f94:	2330      	movs	r3, #48	; 0x30
 8003f96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004140 <_svfiprintf_r+0x1ec>
 8003f9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f9e:	f04f 0901 	mov.w	r9, #1
 8003fa2:	4623      	mov	r3, r4
 8003fa4:	469a      	mov	sl, r3
 8003fa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003faa:	b10a      	cbz	r2, 8003fb0 <_svfiprintf_r+0x5c>
 8003fac:	2a25      	cmp	r2, #37	; 0x25
 8003fae:	d1f9      	bne.n	8003fa4 <_svfiprintf_r+0x50>
 8003fb0:	ebba 0b04 	subs.w	fp, sl, r4
 8003fb4:	d00b      	beq.n	8003fce <_svfiprintf_r+0x7a>
 8003fb6:	465b      	mov	r3, fp
 8003fb8:	4622      	mov	r2, r4
 8003fba:	4629      	mov	r1, r5
 8003fbc:	4638      	mov	r0, r7
 8003fbe:	f7ff ff6d 	bl	8003e9c <__ssputs_r>
 8003fc2:	3001      	adds	r0, #1
 8003fc4:	f000 80aa 	beq.w	800411c <_svfiprintf_r+0x1c8>
 8003fc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fca:	445a      	add	r2, fp
 8003fcc:	9209      	str	r2, [sp, #36]	; 0x24
 8003fce:	f89a 3000 	ldrb.w	r3, [sl]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 80a2 	beq.w	800411c <_svfiprintf_r+0x1c8>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f04f 32ff 	mov.w	r2, #4294967295
 8003fde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fe2:	f10a 0a01 	add.w	sl, sl, #1
 8003fe6:	9304      	str	r3, [sp, #16]
 8003fe8:	9307      	str	r3, [sp, #28]
 8003fea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fee:	931a      	str	r3, [sp, #104]	; 0x68
 8003ff0:	4654      	mov	r4, sl
 8003ff2:	2205      	movs	r2, #5
 8003ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ff8:	4851      	ldr	r0, [pc, #324]	; (8004140 <_svfiprintf_r+0x1ec>)
 8003ffa:	f7fc f8e9 	bl	80001d0 <memchr>
 8003ffe:	9a04      	ldr	r2, [sp, #16]
 8004000:	b9d8      	cbnz	r0, 800403a <_svfiprintf_r+0xe6>
 8004002:	06d0      	lsls	r0, r2, #27
 8004004:	bf44      	itt	mi
 8004006:	2320      	movmi	r3, #32
 8004008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800400c:	0711      	lsls	r1, r2, #28
 800400e:	bf44      	itt	mi
 8004010:	232b      	movmi	r3, #43	; 0x2b
 8004012:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004016:	f89a 3000 	ldrb.w	r3, [sl]
 800401a:	2b2a      	cmp	r3, #42	; 0x2a
 800401c:	d015      	beq.n	800404a <_svfiprintf_r+0xf6>
 800401e:	9a07      	ldr	r2, [sp, #28]
 8004020:	4654      	mov	r4, sl
 8004022:	2000      	movs	r0, #0
 8004024:	f04f 0c0a 	mov.w	ip, #10
 8004028:	4621      	mov	r1, r4
 800402a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800402e:	3b30      	subs	r3, #48	; 0x30
 8004030:	2b09      	cmp	r3, #9
 8004032:	d94e      	bls.n	80040d2 <_svfiprintf_r+0x17e>
 8004034:	b1b0      	cbz	r0, 8004064 <_svfiprintf_r+0x110>
 8004036:	9207      	str	r2, [sp, #28]
 8004038:	e014      	b.n	8004064 <_svfiprintf_r+0x110>
 800403a:	eba0 0308 	sub.w	r3, r0, r8
 800403e:	fa09 f303 	lsl.w	r3, r9, r3
 8004042:	4313      	orrs	r3, r2
 8004044:	9304      	str	r3, [sp, #16]
 8004046:	46a2      	mov	sl, r4
 8004048:	e7d2      	b.n	8003ff0 <_svfiprintf_r+0x9c>
 800404a:	9b03      	ldr	r3, [sp, #12]
 800404c:	1d19      	adds	r1, r3, #4
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	9103      	str	r1, [sp, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	bfbb      	ittet	lt
 8004056:	425b      	neglt	r3, r3
 8004058:	f042 0202 	orrlt.w	r2, r2, #2
 800405c:	9307      	strge	r3, [sp, #28]
 800405e:	9307      	strlt	r3, [sp, #28]
 8004060:	bfb8      	it	lt
 8004062:	9204      	strlt	r2, [sp, #16]
 8004064:	7823      	ldrb	r3, [r4, #0]
 8004066:	2b2e      	cmp	r3, #46	; 0x2e
 8004068:	d10c      	bne.n	8004084 <_svfiprintf_r+0x130>
 800406a:	7863      	ldrb	r3, [r4, #1]
 800406c:	2b2a      	cmp	r3, #42	; 0x2a
 800406e:	d135      	bne.n	80040dc <_svfiprintf_r+0x188>
 8004070:	9b03      	ldr	r3, [sp, #12]
 8004072:	1d1a      	adds	r2, r3, #4
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	9203      	str	r2, [sp, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	bfb8      	it	lt
 800407c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004080:	3402      	adds	r4, #2
 8004082:	9305      	str	r3, [sp, #20]
 8004084:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004150 <_svfiprintf_r+0x1fc>
 8004088:	7821      	ldrb	r1, [r4, #0]
 800408a:	2203      	movs	r2, #3
 800408c:	4650      	mov	r0, sl
 800408e:	f7fc f89f 	bl	80001d0 <memchr>
 8004092:	b140      	cbz	r0, 80040a6 <_svfiprintf_r+0x152>
 8004094:	2340      	movs	r3, #64	; 0x40
 8004096:	eba0 000a 	sub.w	r0, r0, sl
 800409a:	fa03 f000 	lsl.w	r0, r3, r0
 800409e:	9b04      	ldr	r3, [sp, #16]
 80040a0:	4303      	orrs	r3, r0
 80040a2:	3401      	adds	r4, #1
 80040a4:	9304      	str	r3, [sp, #16]
 80040a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040aa:	4826      	ldr	r0, [pc, #152]	; (8004144 <_svfiprintf_r+0x1f0>)
 80040ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040b0:	2206      	movs	r2, #6
 80040b2:	f7fc f88d 	bl	80001d0 <memchr>
 80040b6:	2800      	cmp	r0, #0
 80040b8:	d038      	beq.n	800412c <_svfiprintf_r+0x1d8>
 80040ba:	4b23      	ldr	r3, [pc, #140]	; (8004148 <_svfiprintf_r+0x1f4>)
 80040bc:	bb1b      	cbnz	r3, 8004106 <_svfiprintf_r+0x1b2>
 80040be:	9b03      	ldr	r3, [sp, #12]
 80040c0:	3307      	adds	r3, #7
 80040c2:	f023 0307 	bic.w	r3, r3, #7
 80040c6:	3308      	adds	r3, #8
 80040c8:	9303      	str	r3, [sp, #12]
 80040ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040cc:	4433      	add	r3, r6
 80040ce:	9309      	str	r3, [sp, #36]	; 0x24
 80040d0:	e767      	b.n	8003fa2 <_svfiprintf_r+0x4e>
 80040d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80040d6:	460c      	mov	r4, r1
 80040d8:	2001      	movs	r0, #1
 80040da:	e7a5      	b.n	8004028 <_svfiprintf_r+0xd4>
 80040dc:	2300      	movs	r3, #0
 80040de:	3401      	adds	r4, #1
 80040e0:	9305      	str	r3, [sp, #20]
 80040e2:	4619      	mov	r1, r3
 80040e4:	f04f 0c0a 	mov.w	ip, #10
 80040e8:	4620      	mov	r0, r4
 80040ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040ee:	3a30      	subs	r2, #48	; 0x30
 80040f0:	2a09      	cmp	r2, #9
 80040f2:	d903      	bls.n	80040fc <_svfiprintf_r+0x1a8>
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0c5      	beq.n	8004084 <_svfiprintf_r+0x130>
 80040f8:	9105      	str	r1, [sp, #20]
 80040fa:	e7c3      	b.n	8004084 <_svfiprintf_r+0x130>
 80040fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004100:	4604      	mov	r4, r0
 8004102:	2301      	movs	r3, #1
 8004104:	e7f0      	b.n	80040e8 <_svfiprintf_r+0x194>
 8004106:	ab03      	add	r3, sp, #12
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	462a      	mov	r2, r5
 800410c:	4b0f      	ldr	r3, [pc, #60]	; (800414c <_svfiprintf_r+0x1f8>)
 800410e:	a904      	add	r1, sp, #16
 8004110:	4638      	mov	r0, r7
 8004112:	f3af 8000 	nop.w
 8004116:	1c42      	adds	r2, r0, #1
 8004118:	4606      	mov	r6, r0
 800411a:	d1d6      	bne.n	80040ca <_svfiprintf_r+0x176>
 800411c:	89ab      	ldrh	r3, [r5, #12]
 800411e:	065b      	lsls	r3, r3, #25
 8004120:	f53f af2c 	bmi.w	8003f7c <_svfiprintf_r+0x28>
 8004124:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004126:	b01d      	add	sp, #116	; 0x74
 8004128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800412c:	ab03      	add	r3, sp, #12
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	462a      	mov	r2, r5
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <_svfiprintf_r+0x1f8>)
 8004134:	a904      	add	r1, sp, #16
 8004136:	4638      	mov	r0, r7
 8004138:	f000 f87a 	bl	8004230 <_printf_i>
 800413c:	e7eb      	b.n	8004116 <_svfiprintf_r+0x1c2>
 800413e:	bf00      	nop
 8004140:	08004788 	.word	0x08004788
 8004144:	08004792 	.word	0x08004792
 8004148:	00000000 	.word	0x00000000
 800414c:	08003e9d 	.word	0x08003e9d
 8004150:	0800478e 	.word	0x0800478e

08004154 <_printf_common>:
 8004154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004158:	4616      	mov	r6, r2
 800415a:	4699      	mov	r9, r3
 800415c:	688a      	ldr	r2, [r1, #8]
 800415e:	690b      	ldr	r3, [r1, #16]
 8004160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004164:	4293      	cmp	r3, r2
 8004166:	bfb8      	it	lt
 8004168:	4613      	movlt	r3, r2
 800416a:	6033      	str	r3, [r6, #0]
 800416c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004170:	4607      	mov	r7, r0
 8004172:	460c      	mov	r4, r1
 8004174:	b10a      	cbz	r2, 800417a <_printf_common+0x26>
 8004176:	3301      	adds	r3, #1
 8004178:	6033      	str	r3, [r6, #0]
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	0699      	lsls	r1, r3, #26
 800417e:	bf42      	ittt	mi
 8004180:	6833      	ldrmi	r3, [r6, #0]
 8004182:	3302      	addmi	r3, #2
 8004184:	6033      	strmi	r3, [r6, #0]
 8004186:	6825      	ldr	r5, [r4, #0]
 8004188:	f015 0506 	ands.w	r5, r5, #6
 800418c:	d106      	bne.n	800419c <_printf_common+0x48>
 800418e:	f104 0a19 	add.w	sl, r4, #25
 8004192:	68e3      	ldr	r3, [r4, #12]
 8004194:	6832      	ldr	r2, [r6, #0]
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	42ab      	cmp	r3, r5
 800419a:	dc26      	bgt.n	80041ea <_printf_common+0x96>
 800419c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041a0:	1e13      	subs	r3, r2, #0
 80041a2:	6822      	ldr	r2, [r4, #0]
 80041a4:	bf18      	it	ne
 80041a6:	2301      	movne	r3, #1
 80041a8:	0692      	lsls	r2, r2, #26
 80041aa:	d42b      	bmi.n	8004204 <_printf_common+0xb0>
 80041ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041b0:	4649      	mov	r1, r9
 80041b2:	4638      	mov	r0, r7
 80041b4:	47c0      	blx	r8
 80041b6:	3001      	adds	r0, #1
 80041b8:	d01e      	beq.n	80041f8 <_printf_common+0xa4>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	68e5      	ldr	r5, [r4, #12]
 80041be:	6832      	ldr	r2, [r6, #0]
 80041c0:	f003 0306 	and.w	r3, r3, #6
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	bf08      	it	eq
 80041c8:	1aad      	subeq	r5, r5, r2
 80041ca:	68a3      	ldr	r3, [r4, #8]
 80041cc:	6922      	ldr	r2, [r4, #16]
 80041ce:	bf0c      	ite	eq
 80041d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041d4:	2500      	movne	r5, #0
 80041d6:	4293      	cmp	r3, r2
 80041d8:	bfc4      	itt	gt
 80041da:	1a9b      	subgt	r3, r3, r2
 80041dc:	18ed      	addgt	r5, r5, r3
 80041de:	2600      	movs	r6, #0
 80041e0:	341a      	adds	r4, #26
 80041e2:	42b5      	cmp	r5, r6
 80041e4:	d11a      	bne.n	800421c <_printf_common+0xc8>
 80041e6:	2000      	movs	r0, #0
 80041e8:	e008      	b.n	80041fc <_printf_common+0xa8>
 80041ea:	2301      	movs	r3, #1
 80041ec:	4652      	mov	r2, sl
 80041ee:	4649      	mov	r1, r9
 80041f0:	4638      	mov	r0, r7
 80041f2:	47c0      	blx	r8
 80041f4:	3001      	adds	r0, #1
 80041f6:	d103      	bne.n	8004200 <_printf_common+0xac>
 80041f8:	f04f 30ff 	mov.w	r0, #4294967295
 80041fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004200:	3501      	adds	r5, #1
 8004202:	e7c6      	b.n	8004192 <_printf_common+0x3e>
 8004204:	18e1      	adds	r1, r4, r3
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	2030      	movs	r0, #48	; 0x30
 800420a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800420e:	4422      	add	r2, r4
 8004210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004218:	3302      	adds	r3, #2
 800421a:	e7c7      	b.n	80041ac <_printf_common+0x58>
 800421c:	2301      	movs	r3, #1
 800421e:	4622      	mov	r2, r4
 8004220:	4649      	mov	r1, r9
 8004222:	4638      	mov	r0, r7
 8004224:	47c0      	blx	r8
 8004226:	3001      	adds	r0, #1
 8004228:	d0e6      	beq.n	80041f8 <_printf_common+0xa4>
 800422a:	3601      	adds	r6, #1
 800422c:	e7d9      	b.n	80041e2 <_printf_common+0x8e>
	...

08004230 <_printf_i>:
 8004230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004234:	460c      	mov	r4, r1
 8004236:	4691      	mov	r9, r2
 8004238:	7e27      	ldrb	r7, [r4, #24]
 800423a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800423c:	2f78      	cmp	r7, #120	; 0x78
 800423e:	4680      	mov	r8, r0
 8004240:	469a      	mov	sl, r3
 8004242:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004246:	d807      	bhi.n	8004258 <_printf_i+0x28>
 8004248:	2f62      	cmp	r7, #98	; 0x62
 800424a:	d80a      	bhi.n	8004262 <_printf_i+0x32>
 800424c:	2f00      	cmp	r7, #0
 800424e:	f000 80d8 	beq.w	8004402 <_printf_i+0x1d2>
 8004252:	2f58      	cmp	r7, #88	; 0x58
 8004254:	f000 80a3 	beq.w	800439e <_printf_i+0x16e>
 8004258:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800425c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004260:	e03a      	b.n	80042d8 <_printf_i+0xa8>
 8004262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004266:	2b15      	cmp	r3, #21
 8004268:	d8f6      	bhi.n	8004258 <_printf_i+0x28>
 800426a:	a001      	add	r0, pc, #4	; (adr r0, 8004270 <_printf_i+0x40>)
 800426c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004270:	080042c9 	.word	0x080042c9
 8004274:	080042dd 	.word	0x080042dd
 8004278:	08004259 	.word	0x08004259
 800427c:	08004259 	.word	0x08004259
 8004280:	08004259 	.word	0x08004259
 8004284:	08004259 	.word	0x08004259
 8004288:	080042dd 	.word	0x080042dd
 800428c:	08004259 	.word	0x08004259
 8004290:	08004259 	.word	0x08004259
 8004294:	08004259 	.word	0x08004259
 8004298:	08004259 	.word	0x08004259
 800429c:	080043e9 	.word	0x080043e9
 80042a0:	0800430d 	.word	0x0800430d
 80042a4:	080043cb 	.word	0x080043cb
 80042a8:	08004259 	.word	0x08004259
 80042ac:	08004259 	.word	0x08004259
 80042b0:	0800440b 	.word	0x0800440b
 80042b4:	08004259 	.word	0x08004259
 80042b8:	0800430d 	.word	0x0800430d
 80042bc:	08004259 	.word	0x08004259
 80042c0:	08004259 	.word	0x08004259
 80042c4:	080043d3 	.word	0x080043d3
 80042c8:	680b      	ldr	r3, [r1, #0]
 80042ca:	1d1a      	adds	r2, r3, #4
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	600a      	str	r2, [r1, #0]
 80042d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042d8:	2301      	movs	r3, #1
 80042da:	e0a3      	b.n	8004424 <_printf_i+0x1f4>
 80042dc:	6825      	ldr	r5, [r4, #0]
 80042de:	6808      	ldr	r0, [r1, #0]
 80042e0:	062e      	lsls	r6, r5, #24
 80042e2:	f100 0304 	add.w	r3, r0, #4
 80042e6:	d50a      	bpl.n	80042fe <_printf_i+0xce>
 80042e8:	6805      	ldr	r5, [r0, #0]
 80042ea:	600b      	str	r3, [r1, #0]
 80042ec:	2d00      	cmp	r5, #0
 80042ee:	da03      	bge.n	80042f8 <_printf_i+0xc8>
 80042f0:	232d      	movs	r3, #45	; 0x2d
 80042f2:	426d      	negs	r5, r5
 80042f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042f8:	485e      	ldr	r0, [pc, #376]	; (8004474 <_printf_i+0x244>)
 80042fa:	230a      	movs	r3, #10
 80042fc:	e019      	b.n	8004332 <_printf_i+0x102>
 80042fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004302:	6805      	ldr	r5, [r0, #0]
 8004304:	600b      	str	r3, [r1, #0]
 8004306:	bf18      	it	ne
 8004308:	b22d      	sxthne	r5, r5
 800430a:	e7ef      	b.n	80042ec <_printf_i+0xbc>
 800430c:	680b      	ldr	r3, [r1, #0]
 800430e:	6825      	ldr	r5, [r4, #0]
 8004310:	1d18      	adds	r0, r3, #4
 8004312:	6008      	str	r0, [r1, #0]
 8004314:	0628      	lsls	r0, r5, #24
 8004316:	d501      	bpl.n	800431c <_printf_i+0xec>
 8004318:	681d      	ldr	r5, [r3, #0]
 800431a:	e002      	b.n	8004322 <_printf_i+0xf2>
 800431c:	0669      	lsls	r1, r5, #25
 800431e:	d5fb      	bpl.n	8004318 <_printf_i+0xe8>
 8004320:	881d      	ldrh	r5, [r3, #0]
 8004322:	4854      	ldr	r0, [pc, #336]	; (8004474 <_printf_i+0x244>)
 8004324:	2f6f      	cmp	r7, #111	; 0x6f
 8004326:	bf0c      	ite	eq
 8004328:	2308      	moveq	r3, #8
 800432a:	230a      	movne	r3, #10
 800432c:	2100      	movs	r1, #0
 800432e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004332:	6866      	ldr	r6, [r4, #4]
 8004334:	60a6      	str	r6, [r4, #8]
 8004336:	2e00      	cmp	r6, #0
 8004338:	bfa2      	ittt	ge
 800433a:	6821      	ldrge	r1, [r4, #0]
 800433c:	f021 0104 	bicge.w	r1, r1, #4
 8004340:	6021      	strge	r1, [r4, #0]
 8004342:	b90d      	cbnz	r5, 8004348 <_printf_i+0x118>
 8004344:	2e00      	cmp	r6, #0
 8004346:	d04d      	beq.n	80043e4 <_printf_i+0x1b4>
 8004348:	4616      	mov	r6, r2
 800434a:	fbb5 f1f3 	udiv	r1, r5, r3
 800434e:	fb03 5711 	mls	r7, r3, r1, r5
 8004352:	5dc7      	ldrb	r7, [r0, r7]
 8004354:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004358:	462f      	mov	r7, r5
 800435a:	42bb      	cmp	r3, r7
 800435c:	460d      	mov	r5, r1
 800435e:	d9f4      	bls.n	800434a <_printf_i+0x11a>
 8004360:	2b08      	cmp	r3, #8
 8004362:	d10b      	bne.n	800437c <_printf_i+0x14c>
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	07df      	lsls	r7, r3, #31
 8004368:	d508      	bpl.n	800437c <_printf_i+0x14c>
 800436a:	6923      	ldr	r3, [r4, #16]
 800436c:	6861      	ldr	r1, [r4, #4]
 800436e:	4299      	cmp	r1, r3
 8004370:	bfde      	ittt	le
 8004372:	2330      	movle	r3, #48	; 0x30
 8004374:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004378:	f106 36ff 	addle.w	r6, r6, #4294967295
 800437c:	1b92      	subs	r2, r2, r6
 800437e:	6122      	str	r2, [r4, #16]
 8004380:	f8cd a000 	str.w	sl, [sp]
 8004384:	464b      	mov	r3, r9
 8004386:	aa03      	add	r2, sp, #12
 8004388:	4621      	mov	r1, r4
 800438a:	4640      	mov	r0, r8
 800438c:	f7ff fee2 	bl	8004154 <_printf_common>
 8004390:	3001      	adds	r0, #1
 8004392:	d14c      	bne.n	800442e <_printf_i+0x1fe>
 8004394:	f04f 30ff 	mov.w	r0, #4294967295
 8004398:	b004      	add	sp, #16
 800439a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800439e:	4835      	ldr	r0, [pc, #212]	; (8004474 <_printf_i+0x244>)
 80043a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	680e      	ldr	r6, [r1, #0]
 80043a8:	061f      	lsls	r7, r3, #24
 80043aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80043ae:	600e      	str	r6, [r1, #0]
 80043b0:	d514      	bpl.n	80043dc <_printf_i+0x1ac>
 80043b2:	07d9      	lsls	r1, r3, #31
 80043b4:	bf44      	itt	mi
 80043b6:	f043 0320 	orrmi.w	r3, r3, #32
 80043ba:	6023      	strmi	r3, [r4, #0]
 80043bc:	b91d      	cbnz	r5, 80043c6 <_printf_i+0x196>
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	f023 0320 	bic.w	r3, r3, #32
 80043c4:	6023      	str	r3, [r4, #0]
 80043c6:	2310      	movs	r3, #16
 80043c8:	e7b0      	b.n	800432c <_printf_i+0xfc>
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	f043 0320 	orr.w	r3, r3, #32
 80043d0:	6023      	str	r3, [r4, #0]
 80043d2:	2378      	movs	r3, #120	; 0x78
 80043d4:	4828      	ldr	r0, [pc, #160]	; (8004478 <_printf_i+0x248>)
 80043d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043da:	e7e3      	b.n	80043a4 <_printf_i+0x174>
 80043dc:	065e      	lsls	r6, r3, #25
 80043de:	bf48      	it	mi
 80043e0:	b2ad      	uxthmi	r5, r5
 80043e2:	e7e6      	b.n	80043b2 <_printf_i+0x182>
 80043e4:	4616      	mov	r6, r2
 80043e6:	e7bb      	b.n	8004360 <_printf_i+0x130>
 80043e8:	680b      	ldr	r3, [r1, #0]
 80043ea:	6826      	ldr	r6, [r4, #0]
 80043ec:	6960      	ldr	r0, [r4, #20]
 80043ee:	1d1d      	adds	r5, r3, #4
 80043f0:	600d      	str	r5, [r1, #0]
 80043f2:	0635      	lsls	r5, r6, #24
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	d501      	bpl.n	80043fc <_printf_i+0x1cc>
 80043f8:	6018      	str	r0, [r3, #0]
 80043fa:	e002      	b.n	8004402 <_printf_i+0x1d2>
 80043fc:	0671      	lsls	r1, r6, #25
 80043fe:	d5fb      	bpl.n	80043f8 <_printf_i+0x1c8>
 8004400:	8018      	strh	r0, [r3, #0]
 8004402:	2300      	movs	r3, #0
 8004404:	6123      	str	r3, [r4, #16]
 8004406:	4616      	mov	r6, r2
 8004408:	e7ba      	b.n	8004380 <_printf_i+0x150>
 800440a:	680b      	ldr	r3, [r1, #0]
 800440c:	1d1a      	adds	r2, r3, #4
 800440e:	600a      	str	r2, [r1, #0]
 8004410:	681e      	ldr	r6, [r3, #0]
 8004412:	6862      	ldr	r2, [r4, #4]
 8004414:	2100      	movs	r1, #0
 8004416:	4630      	mov	r0, r6
 8004418:	f7fb feda 	bl	80001d0 <memchr>
 800441c:	b108      	cbz	r0, 8004422 <_printf_i+0x1f2>
 800441e:	1b80      	subs	r0, r0, r6
 8004420:	6060      	str	r0, [r4, #4]
 8004422:	6863      	ldr	r3, [r4, #4]
 8004424:	6123      	str	r3, [r4, #16]
 8004426:	2300      	movs	r3, #0
 8004428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800442c:	e7a8      	b.n	8004380 <_printf_i+0x150>
 800442e:	6923      	ldr	r3, [r4, #16]
 8004430:	4632      	mov	r2, r6
 8004432:	4649      	mov	r1, r9
 8004434:	4640      	mov	r0, r8
 8004436:	47d0      	blx	sl
 8004438:	3001      	adds	r0, #1
 800443a:	d0ab      	beq.n	8004394 <_printf_i+0x164>
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	079b      	lsls	r3, r3, #30
 8004440:	d413      	bmi.n	800446a <_printf_i+0x23a>
 8004442:	68e0      	ldr	r0, [r4, #12]
 8004444:	9b03      	ldr	r3, [sp, #12]
 8004446:	4298      	cmp	r0, r3
 8004448:	bfb8      	it	lt
 800444a:	4618      	movlt	r0, r3
 800444c:	e7a4      	b.n	8004398 <_printf_i+0x168>
 800444e:	2301      	movs	r3, #1
 8004450:	4632      	mov	r2, r6
 8004452:	4649      	mov	r1, r9
 8004454:	4640      	mov	r0, r8
 8004456:	47d0      	blx	sl
 8004458:	3001      	adds	r0, #1
 800445a:	d09b      	beq.n	8004394 <_printf_i+0x164>
 800445c:	3501      	adds	r5, #1
 800445e:	68e3      	ldr	r3, [r4, #12]
 8004460:	9903      	ldr	r1, [sp, #12]
 8004462:	1a5b      	subs	r3, r3, r1
 8004464:	42ab      	cmp	r3, r5
 8004466:	dcf2      	bgt.n	800444e <_printf_i+0x21e>
 8004468:	e7eb      	b.n	8004442 <_printf_i+0x212>
 800446a:	2500      	movs	r5, #0
 800446c:	f104 0619 	add.w	r6, r4, #25
 8004470:	e7f5      	b.n	800445e <_printf_i+0x22e>
 8004472:	bf00      	nop
 8004474:	08004799 	.word	0x08004799
 8004478:	080047aa 	.word	0x080047aa

0800447c <memcpy>:
 800447c:	440a      	add	r2, r1
 800447e:	4291      	cmp	r1, r2
 8004480:	f100 33ff 	add.w	r3, r0, #4294967295
 8004484:	d100      	bne.n	8004488 <memcpy+0xc>
 8004486:	4770      	bx	lr
 8004488:	b510      	push	{r4, lr}
 800448a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800448e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004492:	4291      	cmp	r1, r2
 8004494:	d1f9      	bne.n	800448a <memcpy+0xe>
 8004496:	bd10      	pop	{r4, pc}

08004498 <memmove>:
 8004498:	4288      	cmp	r0, r1
 800449a:	b510      	push	{r4, lr}
 800449c:	eb01 0402 	add.w	r4, r1, r2
 80044a0:	d902      	bls.n	80044a8 <memmove+0x10>
 80044a2:	4284      	cmp	r4, r0
 80044a4:	4623      	mov	r3, r4
 80044a6:	d807      	bhi.n	80044b8 <memmove+0x20>
 80044a8:	1e43      	subs	r3, r0, #1
 80044aa:	42a1      	cmp	r1, r4
 80044ac:	d008      	beq.n	80044c0 <memmove+0x28>
 80044ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044b6:	e7f8      	b.n	80044aa <memmove+0x12>
 80044b8:	4402      	add	r2, r0
 80044ba:	4601      	mov	r1, r0
 80044bc:	428a      	cmp	r2, r1
 80044be:	d100      	bne.n	80044c2 <memmove+0x2a>
 80044c0:	bd10      	pop	{r4, pc}
 80044c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044ca:	e7f7      	b.n	80044bc <memmove+0x24>

080044cc <_free_r>:
 80044cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044ce:	2900      	cmp	r1, #0
 80044d0:	d048      	beq.n	8004564 <_free_r+0x98>
 80044d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044d6:	9001      	str	r0, [sp, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f1a1 0404 	sub.w	r4, r1, #4
 80044de:	bfb8      	it	lt
 80044e0:	18e4      	addlt	r4, r4, r3
 80044e2:	f000 f8d3 	bl	800468c <__malloc_lock>
 80044e6:	4a20      	ldr	r2, [pc, #128]	; (8004568 <_free_r+0x9c>)
 80044e8:	9801      	ldr	r0, [sp, #4]
 80044ea:	6813      	ldr	r3, [r2, #0]
 80044ec:	4615      	mov	r5, r2
 80044ee:	b933      	cbnz	r3, 80044fe <_free_r+0x32>
 80044f0:	6063      	str	r3, [r4, #4]
 80044f2:	6014      	str	r4, [r2, #0]
 80044f4:	b003      	add	sp, #12
 80044f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044fa:	f000 b8cd 	b.w	8004698 <__malloc_unlock>
 80044fe:	42a3      	cmp	r3, r4
 8004500:	d90b      	bls.n	800451a <_free_r+0x4e>
 8004502:	6821      	ldr	r1, [r4, #0]
 8004504:	1862      	adds	r2, r4, r1
 8004506:	4293      	cmp	r3, r2
 8004508:	bf04      	itt	eq
 800450a:	681a      	ldreq	r2, [r3, #0]
 800450c:	685b      	ldreq	r3, [r3, #4]
 800450e:	6063      	str	r3, [r4, #4]
 8004510:	bf04      	itt	eq
 8004512:	1852      	addeq	r2, r2, r1
 8004514:	6022      	streq	r2, [r4, #0]
 8004516:	602c      	str	r4, [r5, #0]
 8004518:	e7ec      	b.n	80044f4 <_free_r+0x28>
 800451a:	461a      	mov	r2, r3
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	b10b      	cbz	r3, 8004524 <_free_r+0x58>
 8004520:	42a3      	cmp	r3, r4
 8004522:	d9fa      	bls.n	800451a <_free_r+0x4e>
 8004524:	6811      	ldr	r1, [r2, #0]
 8004526:	1855      	adds	r5, r2, r1
 8004528:	42a5      	cmp	r5, r4
 800452a:	d10b      	bne.n	8004544 <_free_r+0x78>
 800452c:	6824      	ldr	r4, [r4, #0]
 800452e:	4421      	add	r1, r4
 8004530:	1854      	adds	r4, r2, r1
 8004532:	42a3      	cmp	r3, r4
 8004534:	6011      	str	r1, [r2, #0]
 8004536:	d1dd      	bne.n	80044f4 <_free_r+0x28>
 8004538:	681c      	ldr	r4, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	6053      	str	r3, [r2, #4]
 800453e:	4421      	add	r1, r4
 8004540:	6011      	str	r1, [r2, #0]
 8004542:	e7d7      	b.n	80044f4 <_free_r+0x28>
 8004544:	d902      	bls.n	800454c <_free_r+0x80>
 8004546:	230c      	movs	r3, #12
 8004548:	6003      	str	r3, [r0, #0]
 800454a:	e7d3      	b.n	80044f4 <_free_r+0x28>
 800454c:	6825      	ldr	r5, [r4, #0]
 800454e:	1961      	adds	r1, r4, r5
 8004550:	428b      	cmp	r3, r1
 8004552:	bf04      	itt	eq
 8004554:	6819      	ldreq	r1, [r3, #0]
 8004556:	685b      	ldreq	r3, [r3, #4]
 8004558:	6063      	str	r3, [r4, #4]
 800455a:	bf04      	itt	eq
 800455c:	1949      	addeq	r1, r1, r5
 800455e:	6021      	streq	r1, [r4, #0]
 8004560:	6054      	str	r4, [r2, #4]
 8004562:	e7c7      	b.n	80044f4 <_free_r+0x28>
 8004564:	b003      	add	sp, #12
 8004566:	bd30      	pop	{r4, r5, pc}
 8004568:	20000090 	.word	0x20000090

0800456c <_malloc_r>:
 800456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456e:	1ccd      	adds	r5, r1, #3
 8004570:	f025 0503 	bic.w	r5, r5, #3
 8004574:	3508      	adds	r5, #8
 8004576:	2d0c      	cmp	r5, #12
 8004578:	bf38      	it	cc
 800457a:	250c      	movcc	r5, #12
 800457c:	2d00      	cmp	r5, #0
 800457e:	4606      	mov	r6, r0
 8004580:	db01      	blt.n	8004586 <_malloc_r+0x1a>
 8004582:	42a9      	cmp	r1, r5
 8004584:	d903      	bls.n	800458e <_malloc_r+0x22>
 8004586:	230c      	movs	r3, #12
 8004588:	6033      	str	r3, [r6, #0]
 800458a:	2000      	movs	r0, #0
 800458c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800458e:	f000 f87d 	bl	800468c <__malloc_lock>
 8004592:	4921      	ldr	r1, [pc, #132]	; (8004618 <_malloc_r+0xac>)
 8004594:	680a      	ldr	r2, [r1, #0]
 8004596:	4614      	mov	r4, r2
 8004598:	b99c      	cbnz	r4, 80045c2 <_malloc_r+0x56>
 800459a:	4f20      	ldr	r7, [pc, #128]	; (800461c <_malloc_r+0xb0>)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	b923      	cbnz	r3, 80045aa <_malloc_r+0x3e>
 80045a0:	4621      	mov	r1, r4
 80045a2:	4630      	mov	r0, r6
 80045a4:	f000 f862 	bl	800466c <_sbrk_r>
 80045a8:	6038      	str	r0, [r7, #0]
 80045aa:	4629      	mov	r1, r5
 80045ac:	4630      	mov	r0, r6
 80045ae:	f000 f85d 	bl	800466c <_sbrk_r>
 80045b2:	1c43      	adds	r3, r0, #1
 80045b4:	d123      	bne.n	80045fe <_malloc_r+0x92>
 80045b6:	230c      	movs	r3, #12
 80045b8:	6033      	str	r3, [r6, #0]
 80045ba:	4630      	mov	r0, r6
 80045bc:	f000 f86c 	bl	8004698 <__malloc_unlock>
 80045c0:	e7e3      	b.n	800458a <_malloc_r+0x1e>
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	1b5b      	subs	r3, r3, r5
 80045c6:	d417      	bmi.n	80045f8 <_malloc_r+0x8c>
 80045c8:	2b0b      	cmp	r3, #11
 80045ca:	d903      	bls.n	80045d4 <_malloc_r+0x68>
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	441c      	add	r4, r3
 80045d0:	6025      	str	r5, [r4, #0]
 80045d2:	e004      	b.n	80045de <_malloc_r+0x72>
 80045d4:	6863      	ldr	r3, [r4, #4]
 80045d6:	42a2      	cmp	r2, r4
 80045d8:	bf0c      	ite	eq
 80045da:	600b      	streq	r3, [r1, #0]
 80045dc:	6053      	strne	r3, [r2, #4]
 80045de:	4630      	mov	r0, r6
 80045e0:	f000 f85a 	bl	8004698 <__malloc_unlock>
 80045e4:	f104 000b 	add.w	r0, r4, #11
 80045e8:	1d23      	adds	r3, r4, #4
 80045ea:	f020 0007 	bic.w	r0, r0, #7
 80045ee:	1ac2      	subs	r2, r0, r3
 80045f0:	d0cc      	beq.n	800458c <_malloc_r+0x20>
 80045f2:	1a1b      	subs	r3, r3, r0
 80045f4:	50a3      	str	r3, [r4, r2]
 80045f6:	e7c9      	b.n	800458c <_malloc_r+0x20>
 80045f8:	4622      	mov	r2, r4
 80045fa:	6864      	ldr	r4, [r4, #4]
 80045fc:	e7cc      	b.n	8004598 <_malloc_r+0x2c>
 80045fe:	1cc4      	adds	r4, r0, #3
 8004600:	f024 0403 	bic.w	r4, r4, #3
 8004604:	42a0      	cmp	r0, r4
 8004606:	d0e3      	beq.n	80045d0 <_malloc_r+0x64>
 8004608:	1a21      	subs	r1, r4, r0
 800460a:	4630      	mov	r0, r6
 800460c:	f000 f82e 	bl	800466c <_sbrk_r>
 8004610:	3001      	adds	r0, #1
 8004612:	d1dd      	bne.n	80045d0 <_malloc_r+0x64>
 8004614:	e7cf      	b.n	80045b6 <_malloc_r+0x4a>
 8004616:	bf00      	nop
 8004618:	20000090 	.word	0x20000090
 800461c:	20000094 	.word	0x20000094

08004620 <_realloc_r>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	4607      	mov	r7, r0
 8004624:	4614      	mov	r4, r2
 8004626:	460e      	mov	r6, r1
 8004628:	b921      	cbnz	r1, 8004634 <_realloc_r+0x14>
 800462a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800462e:	4611      	mov	r1, r2
 8004630:	f7ff bf9c 	b.w	800456c <_malloc_r>
 8004634:	b922      	cbnz	r2, 8004640 <_realloc_r+0x20>
 8004636:	f7ff ff49 	bl	80044cc <_free_r>
 800463a:	4625      	mov	r5, r4
 800463c:	4628      	mov	r0, r5
 800463e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004640:	f000 f830 	bl	80046a4 <_malloc_usable_size_r>
 8004644:	42a0      	cmp	r0, r4
 8004646:	d20f      	bcs.n	8004668 <_realloc_r+0x48>
 8004648:	4621      	mov	r1, r4
 800464a:	4638      	mov	r0, r7
 800464c:	f7ff ff8e 	bl	800456c <_malloc_r>
 8004650:	4605      	mov	r5, r0
 8004652:	2800      	cmp	r0, #0
 8004654:	d0f2      	beq.n	800463c <_realloc_r+0x1c>
 8004656:	4631      	mov	r1, r6
 8004658:	4622      	mov	r2, r4
 800465a:	f7ff ff0f 	bl	800447c <memcpy>
 800465e:	4631      	mov	r1, r6
 8004660:	4638      	mov	r0, r7
 8004662:	f7ff ff33 	bl	80044cc <_free_r>
 8004666:	e7e9      	b.n	800463c <_realloc_r+0x1c>
 8004668:	4635      	mov	r5, r6
 800466a:	e7e7      	b.n	800463c <_realloc_r+0x1c>

0800466c <_sbrk_r>:
 800466c:	b538      	push	{r3, r4, r5, lr}
 800466e:	4d06      	ldr	r5, [pc, #24]	; (8004688 <_sbrk_r+0x1c>)
 8004670:	2300      	movs	r3, #0
 8004672:	4604      	mov	r4, r0
 8004674:	4608      	mov	r0, r1
 8004676:	602b      	str	r3, [r5, #0]
 8004678:	f7fc ff70 	bl	800155c <_sbrk>
 800467c:	1c43      	adds	r3, r0, #1
 800467e:	d102      	bne.n	8004686 <_sbrk_r+0x1a>
 8004680:	682b      	ldr	r3, [r5, #0]
 8004682:	b103      	cbz	r3, 8004686 <_sbrk_r+0x1a>
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	bd38      	pop	{r3, r4, r5, pc}
 8004688:	20000178 	.word	0x20000178

0800468c <__malloc_lock>:
 800468c:	4801      	ldr	r0, [pc, #4]	; (8004694 <__malloc_lock+0x8>)
 800468e:	f000 b811 	b.w	80046b4 <__retarget_lock_acquire_recursive>
 8004692:	bf00      	nop
 8004694:	20000180 	.word	0x20000180

08004698 <__malloc_unlock>:
 8004698:	4801      	ldr	r0, [pc, #4]	; (80046a0 <__malloc_unlock+0x8>)
 800469a:	f000 b80c 	b.w	80046b6 <__retarget_lock_release_recursive>
 800469e:	bf00      	nop
 80046a0:	20000180 	.word	0x20000180

080046a4 <_malloc_usable_size_r>:
 80046a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046a8:	1f18      	subs	r0, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	bfbc      	itt	lt
 80046ae:	580b      	ldrlt	r3, [r1, r0]
 80046b0:	18c0      	addlt	r0, r0, r3
 80046b2:	4770      	bx	lr

080046b4 <__retarget_lock_acquire_recursive>:
 80046b4:	4770      	bx	lr

080046b6 <__retarget_lock_release_recursive>:
 80046b6:	4770      	bx	lr

080046b8 <_init>:
 80046b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ba:	bf00      	nop
 80046bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046be:	bc08      	pop	{r3}
 80046c0:	469e      	mov	lr, r3
 80046c2:	4770      	bx	lr

080046c4 <_fini>:
 80046c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c6:	bf00      	nop
 80046c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ca:	bc08      	pop	{r3}
 80046cc:	469e      	mov	lr, r3
 80046ce:	4770      	bx	lr
