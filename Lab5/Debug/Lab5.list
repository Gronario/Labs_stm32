
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004498  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08004628  08004628  00014628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004720  08004720  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004720  08004720  00014720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004728  08004728  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004728  08004728  00014728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800472c  0800472c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000118  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000188  20000188  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f883  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cec  00000000  00000000  0002f923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  00031610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf8  00000000  00000000  000322b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022477  00000000  00000000  00032ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e5a5  00000000  00000000  0005531f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7bdd  00000000  00000000  000638c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013b4a1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a4c  00000000  00000000  0013b4f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004610 	.word	0x08004610

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004610 	.word	0x08004610

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b96e 	b.w	8000be0 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	4604      	mov	r4, r0
 8000924:	468c      	mov	ip, r1
 8000926:	2b00      	cmp	r3, #0
 8000928:	f040 8083 	bne.w	8000a32 <__udivmoddi4+0x116>
 800092c:	428a      	cmp	r2, r1
 800092e:	4617      	mov	r7, r2
 8000930:	d947      	bls.n	80009c2 <__udivmoddi4+0xa6>
 8000932:	fab2 f282 	clz	r2, r2
 8000936:	b142      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000938:	f1c2 0020 	rsb	r0, r2, #32
 800093c:	fa24 f000 	lsr.w	r0, r4, r0
 8000940:	4091      	lsls	r1, r2
 8000942:	4097      	lsls	r7, r2
 8000944:	ea40 0c01 	orr.w	ip, r0, r1
 8000948:	4094      	lsls	r4, r2
 800094a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800094e:	0c23      	lsrs	r3, r4, #16
 8000950:	fbbc f6f8 	udiv	r6, ip, r8
 8000954:	fa1f fe87 	uxth.w	lr, r7
 8000958:	fb08 c116 	mls	r1, r8, r6, ip
 800095c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000960:	fb06 f10e 	mul.w	r1, r6, lr
 8000964:	4299      	cmp	r1, r3
 8000966:	d909      	bls.n	800097c <__udivmoddi4+0x60>
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	f106 30ff 	add.w	r0, r6, #4294967295
 800096e:	f080 8119 	bcs.w	8000ba4 <__udivmoddi4+0x288>
 8000972:	4299      	cmp	r1, r3
 8000974:	f240 8116 	bls.w	8000ba4 <__udivmoddi4+0x288>
 8000978:	3e02      	subs	r6, #2
 800097a:	443b      	add	r3, r7
 800097c:	1a5b      	subs	r3, r3, r1
 800097e:	b2a4      	uxth	r4, r4
 8000980:	fbb3 f0f8 	udiv	r0, r3, r8
 8000984:	fb08 3310 	mls	r3, r8, r0, r3
 8000988:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800098c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000990:	45a6      	cmp	lr, r4
 8000992:	d909      	bls.n	80009a8 <__udivmoddi4+0x8c>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f100 33ff 	add.w	r3, r0, #4294967295
 800099a:	f080 8105 	bcs.w	8000ba8 <__udivmoddi4+0x28c>
 800099e:	45a6      	cmp	lr, r4
 80009a0:	f240 8102 	bls.w	8000ba8 <__udivmoddi4+0x28c>
 80009a4:	3802      	subs	r0, #2
 80009a6:	443c      	add	r4, r7
 80009a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ac:	eba4 040e 	sub.w	r4, r4, lr
 80009b0:	2600      	movs	r6, #0
 80009b2:	b11d      	cbz	r5, 80009bc <__udivmoddi4+0xa0>
 80009b4:	40d4      	lsrs	r4, r2
 80009b6:	2300      	movs	r3, #0
 80009b8:	e9c5 4300 	strd	r4, r3, [r5]
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	b902      	cbnz	r2, 80009c6 <__udivmoddi4+0xaa>
 80009c4:	deff      	udf	#255	; 0xff
 80009c6:	fab2 f282 	clz	r2, r2
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d150      	bne.n	8000a70 <__udivmoddi4+0x154>
 80009ce:	1bcb      	subs	r3, r1, r7
 80009d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009d4:	fa1f f887 	uxth.w	r8, r7
 80009d8:	2601      	movs	r6, #1
 80009da:	fbb3 fcfe 	udiv	ip, r3, lr
 80009de:	0c21      	lsrs	r1, r4, #16
 80009e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009e8:	fb08 f30c 	mul.w	r3, r8, ip
 80009ec:	428b      	cmp	r3, r1
 80009ee:	d907      	bls.n	8000a00 <__udivmoddi4+0xe4>
 80009f0:	1879      	adds	r1, r7, r1
 80009f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0xe2>
 80009f8:	428b      	cmp	r3, r1
 80009fa:	f200 80e9 	bhi.w	8000bd0 <__udivmoddi4+0x2b4>
 80009fe:	4684      	mov	ip, r0
 8000a00:	1ac9      	subs	r1, r1, r3
 8000a02:	b2a3      	uxth	r3, r4
 8000a04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a10:	fb08 f800 	mul.w	r8, r8, r0
 8000a14:	45a0      	cmp	r8, r4
 8000a16:	d907      	bls.n	8000a28 <__udivmoddi4+0x10c>
 8000a18:	193c      	adds	r4, r7, r4
 8000a1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x10a>
 8000a20:	45a0      	cmp	r8, r4
 8000a22:	f200 80d9 	bhi.w	8000bd8 <__udivmoddi4+0x2bc>
 8000a26:	4618      	mov	r0, r3
 8000a28:	eba4 0408 	sub.w	r4, r4, r8
 8000a2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a30:	e7bf      	b.n	80009b2 <__udivmoddi4+0x96>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d909      	bls.n	8000a4a <__udivmoddi4+0x12e>
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	f000 80b1 	beq.w	8000b9e <__udivmoddi4+0x282>
 8000a3c:	2600      	movs	r6, #0
 8000a3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a42:	4630      	mov	r0, r6
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	fab3 f683 	clz	r6, r3
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	d14a      	bne.n	8000ae8 <__udivmoddi4+0x1cc>
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d302      	bcc.n	8000a5c <__udivmoddi4+0x140>
 8000a56:	4282      	cmp	r2, r0
 8000a58:	f200 80b8 	bhi.w	8000bcc <__udivmoddi4+0x2b0>
 8000a5c:	1a84      	subs	r4, r0, r2
 8000a5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a62:	2001      	movs	r0, #1
 8000a64:	468c      	mov	ip, r1
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	d0a8      	beq.n	80009bc <__udivmoddi4+0xa0>
 8000a6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a6e:	e7a5      	b.n	80009bc <__udivmoddi4+0xa0>
 8000a70:	f1c2 0320 	rsb	r3, r2, #32
 8000a74:	fa20 f603 	lsr.w	r6, r0, r3
 8000a78:	4097      	lsls	r7, r2
 8000a7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a82:	40d9      	lsrs	r1, r3
 8000a84:	4330      	orrs	r0, r6
 8000a86:	0c03      	lsrs	r3, r0, #16
 8000a88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a98:	fb06 f108 	mul.w	r1, r6, r8
 8000a9c:	4299      	cmp	r1, r3
 8000a9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000aa2:	d909      	bls.n	8000ab8 <__udivmoddi4+0x19c>
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000aaa:	f080 808d 	bcs.w	8000bc8 <__udivmoddi4+0x2ac>
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	f240 808a 	bls.w	8000bc8 <__udivmoddi4+0x2ac>
 8000ab4:	3e02      	subs	r6, #2
 8000ab6:	443b      	add	r3, r7
 8000ab8:	1a5b      	subs	r3, r3, r1
 8000aba:	b281      	uxth	r1, r0
 8000abc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac8:	fb00 f308 	mul.w	r3, r0, r8
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x1c4>
 8000ad0:	1879      	adds	r1, r7, r1
 8000ad2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ad6:	d273      	bcs.n	8000bc0 <__udivmoddi4+0x2a4>
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d971      	bls.n	8000bc0 <__udivmoddi4+0x2a4>
 8000adc:	3802      	subs	r0, #2
 8000ade:	4439      	add	r1, r7
 8000ae0:	1acb      	subs	r3, r1, r3
 8000ae2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ae6:	e778      	b.n	80009da <__udivmoddi4+0xbe>
 8000ae8:	f1c6 0c20 	rsb	ip, r6, #32
 8000aec:	fa03 f406 	lsl.w	r4, r3, r6
 8000af0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000af4:	431c      	orrs	r4, r3
 8000af6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000afa:	fa01 f306 	lsl.w	r3, r1, r6
 8000afe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b06:	431f      	orrs	r7, r3
 8000b08:	0c3b      	lsrs	r3, r7, #16
 8000b0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b0e:	fa1f f884 	uxth.w	r8, r4
 8000b12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b1e:	458a      	cmp	sl, r1
 8000b20:	fa02 f206 	lsl.w	r2, r2, r6
 8000b24:	fa00 f306 	lsl.w	r3, r0, r6
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x220>
 8000b2a:	1861      	adds	r1, r4, r1
 8000b2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b30:	d248      	bcs.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b32:	458a      	cmp	sl, r1
 8000b34:	d946      	bls.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b36:	f1a9 0902 	sub.w	r9, r9, #2
 8000b3a:	4421      	add	r1, r4
 8000b3c:	eba1 010a 	sub.w	r1, r1, sl
 8000b40:	b2bf      	uxth	r7, r7
 8000b42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b4e:	fb00 f808 	mul.w	r8, r0, r8
 8000b52:	45b8      	cmp	r8, r7
 8000b54:	d907      	bls.n	8000b66 <__udivmoddi4+0x24a>
 8000b56:	19e7      	adds	r7, r4, r7
 8000b58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5c:	d22e      	bcs.n	8000bbc <__udivmoddi4+0x2a0>
 8000b5e:	45b8      	cmp	r8, r7
 8000b60:	d92c      	bls.n	8000bbc <__udivmoddi4+0x2a0>
 8000b62:	3802      	subs	r0, #2
 8000b64:	4427      	add	r7, r4
 8000b66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b6a:	eba7 0708 	sub.w	r7, r7, r8
 8000b6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b72:	454f      	cmp	r7, r9
 8000b74:	46c6      	mov	lr, r8
 8000b76:	4649      	mov	r1, r9
 8000b78:	d31a      	bcc.n	8000bb0 <__udivmoddi4+0x294>
 8000b7a:	d017      	beq.n	8000bac <__udivmoddi4+0x290>
 8000b7c:	b15d      	cbz	r5, 8000b96 <__udivmoddi4+0x27a>
 8000b7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b82:	eb67 0701 	sbc.w	r7, r7, r1
 8000b86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b8a:	40f2      	lsrs	r2, r6
 8000b8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b90:	40f7      	lsrs	r7, r6
 8000b92:	e9c5 2700 	strd	r2, r7, [r5]
 8000b96:	2600      	movs	r6, #0
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	462e      	mov	r6, r5
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	e70b      	b.n	80009bc <__udivmoddi4+0xa0>
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	e6e9      	b.n	800097c <__udivmoddi4+0x60>
 8000ba8:	4618      	mov	r0, r3
 8000baa:	e6fd      	b.n	80009a8 <__udivmoddi4+0x8c>
 8000bac:	4543      	cmp	r3, r8
 8000bae:	d2e5      	bcs.n	8000b7c <__udivmoddi4+0x260>
 8000bb0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000bb4:	eb69 0104 	sbc.w	r1, r9, r4
 8000bb8:	3801      	subs	r0, #1
 8000bba:	e7df      	b.n	8000b7c <__udivmoddi4+0x260>
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e7d2      	b.n	8000b66 <__udivmoddi4+0x24a>
 8000bc0:	4660      	mov	r0, ip
 8000bc2:	e78d      	b.n	8000ae0 <__udivmoddi4+0x1c4>
 8000bc4:	4681      	mov	r9, r0
 8000bc6:	e7b9      	b.n	8000b3c <__udivmoddi4+0x220>
 8000bc8:	4666      	mov	r6, ip
 8000bca:	e775      	b.n	8000ab8 <__udivmoddi4+0x19c>
 8000bcc:	4630      	mov	r0, r6
 8000bce:	e74a      	b.n	8000a66 <__udivmoddi4+0x14a>
 8000bd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bd4:	4439      	add	r1, r7
 8000bd6:	e713      	b.n	8000a00 <__udivmoddi4+0xe4>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	443c      	add	r4, r7
 8000bdc:	e724      	b.n	8000a28 <__udivmoddi4+0x10c>
 8000bde:	bf00      	nop

08000be0 <__aeabi_idiv0>:
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <customUART>:
//HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
//HAL_UART_Transmit(&huart3, (uint8_t *)"Orange ON\r\n", 9+2,10); - example


void customUART(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, UART_HandleTypeDef *huart, uint8_t *pData_led_on, uint8_t *pData_led_off)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	817b      	strh	r3, [r7, #10]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8000bf4:	897b      	ldrh	r3, [r7, #10]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f001 fbea 	bl	80023d2 <HAL_GPIO_TogglePin>
	if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET)
 8000bfe:	897b      	ldrh	r3, [r7, #10]
 8000c00:	4619      	mov	r1, r3
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	f001 fbb4 	bl	8002370 <HAL_GPIO_ReadPin>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d10a      	bne.n	8000c24 <customUART+0x40>
		HAL_UART_Transmit(huart, (uint8_t*) pData_led_on, strlen((char*) pData_led_on), 10);
 8000c0e:	6838      	ldr	r0, [r7, #0]
 8000c10:	f7ff fade 	bl	80001d0 <strlen>
 8000c14:	4603      	mov	r3, r0
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	230a      	movs	r3, #10
 8000c1a:	6839      	ldr	r1, [r7, #0]
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f002 fd2c 	bl	800367a <HAL_UART_Transmit>
	else
		HAL_UART_Transmit(huart, (uint8_t*) pData_led_off, strlen((char*) pData_led_off), 10);
}
 8000c22:	e009      	b.n	8000c38 <customUART+0x54>
		HAL_UART_Transmit(huart, (uint8_t*) pData_led_off, strlen((char*) pData_led_off), 10);
 8000c24:	69b8      	ldr	r0, [r7, #24]
 8000c26:	f7ff fad3 	bl	80001d0 <strlen>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	230a      	movs	r3, #10
 8000c30:	69b9      	ldr	r1, [r7, #24]
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f002 fd21 	bl	800367a <HAL_UART_Transmit>
}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	4603      	mov	r3, r0
 8000c48:	80fb      	strh	r3, [r7, #6]

	  switch(GPIO_PIN){
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c50:	d018      	beq.n	8000c84 <HAL_GPIO_EXTI_Callback+0x44>
 8000c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c56:	dc33      	bgt.n	8000cc0 <HAL_GPIO_EXTI_Callback+0x80>
 8000c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c5c:	d008      	beq.n	8000c70 <HAL_GPIO_EXTI_Callback+0x30>
 8000c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c62:	dc2d      	bgt.n	8000cc0 <HAL_GPIO_EXTI_Callback+0x80>
 8000c64:	2b40      	cmp	r3, #64	; 0x40
 8000c66:	d021      	beq.n	8000cac <HAL_GPIO_EXTI_Callback+0x6c>
 8000c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c6c:	d014      	beq.n	8000c98 <HAL_GPIO_EXTI_Callback+0x58>
 8000c6e:	e027      	b.n	8000cc0 <HAL_GPIO_EXTI_Callback+0x80>

		  case But1_Pin:
			  customUART(GPIOD,Blue_LED_Pin, &huart3, (uint8_t*) "Blue ON\r\n", (uint8_t*) "Blue OFF\r\n");
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <HAL_GPIO_EXTI_Callback+0x98>)
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_GPIO_EXTI_Callback+0x9c>)
 8000c76:	4a1a      	ldr	r2, [pc, #104]	; (8000ce0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000c78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c7c:	4819      	ldr	r0, [pc, #100]	; (8000ce4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000c7e:	f7ff ffb1 	bl	8000be4 <customUART>
			  break;
 8000c82:	e024      	b.n	8000cce <HAL_GPIO_EXTI_Callback+0x8e>

		  case But2_Pin:
			  customUART(GPIOD,Orange_LED_Pin, &huart3, (uint8_t*) "Orange ON\r\n", (uint8_t*) "Orange OFF\r\n");
 8000c84:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_GPIO_EXTI_Callback+0xac>)
 8000c8a:	4a15      	ldr	r2, [pc, #84]	; (8000ce0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000c8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c90:	4814      	ldr	r0, [pc, #80]	; (8000ce4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000c92:	f7ff ffa7 	bl	8000be4 <customUART>
			  break;
 8000c96:	e01a      	b.n	8000cce <HAL_GPIO_EXTI_Callback+0x8e>

		  case But3_Pin:
			  customUART(GPIOD,Red_LED_Pin, &huart3, (uint8_t*) "Red ON\r\n", (uint8_t*) "Red OFF\r\n");
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c9e:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000ca0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca4:	480f      	ldr	r0, [pc, #60]	; (8000ce4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000ca6:	f7ff ff9d 	bl	8000be4 <customUART>
			  break;
 8000caa:	e010      	b.n	8000cce <HAL_GPIO_EXTI_Callback+0x8e>

		  case But4_Pin:
			  customUART(GPIOD,Green_LED_Pin, &huart3, (uint8_t*) "Green ON\r\n", (uint8_t*) "Green OFF\r\n");
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_GPIO_EXTI_Callback+0xbc>)
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000cb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb8:	480a      	ldr	r0, [pc, #40]	; (8000ce4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000cba:	f7ff ff93 	bl	8000be4 <customUART>
			  break;
 8000cbe:	e006      	b.n	8000cce <HAL_GPIO_EXTI_Callback+0x8e>

		  default:
			  HAL_UART_Transmit(&huart3, (uint8_t *)"Unexpected_command\r\n", strlen("Unexpected_command\r\n"),10);
 8000cc0:	230a      	movs	r3, #10
 8000cc2:	2214      	movs	r2, #20
 8000cc4:	490e      	ldr	r1, [pc, #56]	; (8000d00 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000cc6:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000cc8:	f002 fcd7 	bl	800367a <HAL_UART_Transmit>
			  break;
 8000ccc:	bf00      	nop
	  }
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	08004634 	.word	0x08004634
 8000cdc:	08004628 	.word	0x08004628
 8000ce0:	200000e0 	.word	0x200000e0
 8000ce4:	40020c00 	.word	0x40020c00
 8000ce8:	0800464c 	.word	0x0800464c
 8000cec:	08004640 	.word	0x08004640
 8000cf0:	08004668 	.word	0x08004668
 8000cf4:	0800465c 	.word	0x0800465c
 8000cf8:	08004680 	.word	0x08004680
 8000cfc:	08004674 	.word	0x08004674
 8000d00:	0800468c 	.word	0x0800468c
 8000d04:	00000000 	.word	0x00000000

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0e:	f000 fc43 	bl	8001598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d12:	f000 f8b7 	bl	8000e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d16:	f000 f9dd 	bl	80010d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d1a:	f000 f9b1 	bl	8001080 <MX_USART3_UART_Init>
  MX_ADC2_Init();
 8000d1e:	f000 f90f 	bl	8000f40 <MX_ADC2_Init>
  MX_TIM4_Init();
 8000d22:	f000 f95f 	bl	8000fe4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim4);     //TIM4 is used to get temperature value once in 5 seconds through TIM4_IRQHandler()
 8000d26:	4846      	ldr	r0, [pc, #280]	; (8000e40 <main+0x138>)
 8000d28:	f002 f81e 	bl	8002d68 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc2);            //ADC for external temperature
 8000d2c:	4845      	ldr	r0, [pc, #276]	; (8000e44 <main+0x13c>)
 8000d2e:	f000 fce9 	bl	8001704 <HAL_ADC_Start>
  {

	  uint8_t rcvBuf[1];
	  HAL_StatusTypeDef result;

	  result = HAL_UART_Receive(&huart3, rcvBuf, 1, 10);
 8000d32:	1d39      	adds	r1, r7, #4
 8000d34:	230a      	movs	r3, #10
 8000d36:	2201      	movs	r2, #1
 8000d38:	4843      	ldr	r0, [pc, #268]	; (8000e48 <main+0x140>)
 8000d3a:	f002 fd30 	bl	800379e <HAL_UART_Receive>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]

	  if (result == HAL_OK){
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d13e      	bne.n	8000dc6 <main+0xbe>

		  switch(rcvBuf[0]){
 8000d48:	793b      	ldrb	r3, [r7, #4]
 8000d4a:	3b31      	subs	r3, #49	; 0x31
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	d833      	bhi.n	8000db8 <main+0xb0>
 8000d50:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <main+0x50>)
 8000d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d56:	bf00      	nop
 8000d58:	08000d69 	.word	0x08000d69
 8000d5c:	08000d7d 	.word	0x08000d7d
 8000d60:	08000d91 	.word	0x08000d91
 8000d64:	08000da5 	.word	0x08000da5

			  case '1':
				  customUART(GPIOD,Blue_LED_Pin, &huart3, (uint8_t*) "Blue ON\r\n", (uint8_t*) "Blue OFF\r\n");
 8000d68:	4b38      	ldr	r3, [pc, #224]	; (8000e4c <main+0x144>)
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	4b38      	ldr	r3, [pc, #224]	; (8000e50 <main+0x148>)
 8000d6e:	4a36      	ldr	r2, [pc, #216]	; (8000e48 <main+0x140>)
 8000d70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d74:	4837      	ldr	r0, [pc, #220]	; (8000e54 <main+0x14c>)
 8000d76:	f7ff ff35 	bl	8000be4 <customUART>
				  break;
 8000d7a:	e025      	b.n	8000dc8 <main+0xc0>

			  case '2':
				  customUART(GPIOD,Orange_LED_Pin, &huart3, (uint8_t*) "Orange ON\r\n", (uint8_t*) "Orange OFF\r\n");
 8000d7c:	4b36      	ldr	r3, [pc, #216]	; (8000e58 <main+0x150>)
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <main+0x154>)
 8000d82:	4a31      	ldr	r2, [pc, #196]	; (8000e48 <main+0x140>)
 8000d84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d88:	4832      	ldr	r0, [pc, #200]	; (8000e54 <main+0x14c>)
 8000d8a:	f7ff ff2b 	bl	8000be4 <customUART>
				  break;
 8000d8e:	e01b      	b.n	8000dc8 <main+0xc0>

			  case '3':
				  customUART(GPIOD,Red_LED_Pin, &huart3, (uint8_t*) "Red ON\r\n", (uint8_t*) "Red OFF\r\n");
 8000d90:	4b33      	ldr	r3, [pc, #204]	; (8000e60 <main+0x158>)
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	4b33      	ldr	r3, [pc, #204]	; (8000e64 <main+0x15c>)
 8000d96:	4a2c      	ldr	r2, [pc, #176]	; (8000e48 <main+0x140>)
 8000d98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d9c:	482d      	ldr	r0, [pc, #180]	; (8000e54 <main+0x14c>)
 8000d9e:	f7ff ff21 	bl	8000be4 <customUART>
				  break;
 8000da2:	e011      	b.n	8000dc8 <main+0xc0>

			  case '4':
				  customUART(GPIOD,Green_LED_Pin, &huart3, (uint8_t*) "Green ON\r\n", (uint8_t*) "Green OFF\r\n");
 8000da4:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <main+0x160>)
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	4b30      	ldr	r3, [pc, #192]	; (8000e6c <main+0x164>)
 8000daa:	4a27      	ldr	r2, [pc, #156]	; (8000e48 <main+0x140>)
 8000dac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db0:	4828      	ldr	r0, [pc, #160]	; (8000e54 <main+0x14c>)
 8000db2:	f7ff ff17 	bl	8000be4 <customUART>
				  break;
 8000db6:	e007      	b.n	8000dc8 <main+0xc0>

			  default:
				  HAL_UART_Transmit(&huart3, (uint8_t *)"Unexpected_command\r\n", strlen("Unexpected_command\r\n"),10);
 8000db8:	230a      	movs	r3, #10
 8000dba:	2214      	movs	r2, #20
 8000dbc:	492c      	ldr	r1, [pc, #176]	; (8000e70 <main+0x168>)
 8000dbe:	4822      	ldr	r0, [pc, #136]	; (8000e48 <main+0x140>)
 8000dc0:	f002 fc5b 	bl	800367a <HAL_UART_Transmit>
				  break;
 8000dc4:	e000      	b.n	8000dc8 <main+0xc0>
		  }
	  }
 8000dc6:	bf00      	nop


	  //--------------------ADC for external temperature------------------

	  adcPoolResultext = HAL_ADC_PollForConversion(&hadc2, 1);
 8000dc8:	2101      	movs	r1, #1
 8000dca:	481e      	ldr	r0, [pc, #120]	; (8000e44 <main+0x13c>)
 8000dcc:	f000 fd6c 	bl	80018a8 <HAL_ADC_PollForConversion>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	71bb      	strb	r3, [r7, #6]

	  if(adcPoolResultext == HAL_OK){
 8000dd4:	79bb      	ldrb	r3, [r7, #6]
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d106      	bne.n	8000dea <main+0xe2>
		  external_temp_value = HAL_ADC_GetValue(&hadc2);
 8000ddc:	4819      	ldr	r0, [pc, #100]	; (8000e44 <main+0x13c>)
 8000dde:	f000 fdee 	bl	80019be <HAL_ADC_GetValue>
 8000de2:	4603      	mov	r3, r0
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <main+0x16c>)
 8000de8:	801a      	strh	r2, [r3, #0]
	  }

	  tCelsius_ext = (3/4095.0 * external_temp_value *-50) +100.0; //convert value to temperature in the range from -24 to 100°C.
 8000dea:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <main+0x16c>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fcc2 	bl	8000778 <__aeabi_i2d>
 8000df4:	a310      	add	r3, pc, #64	; (adr r3, 8000e38 <main+0x130>)
 8000df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfa:	f7ff fa41 	bl	8000280 <__aeabi_dmul>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	4610      	mov	r0, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	f04f 0200 	mov.w	r2, #0
 8000e0a:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <main+0x170>)
 8000e0c:	f7ff fa38 	bl	8000280 <__aeabi_dmul>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	4610      	mov	r0, r2
 8000e16:	4619      	mov	r1, r3
 8000e18:	f04f 0200 	mov.w	r2, #0
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <main+0x174>)
 8000e1e:	f7ff fb5f 	bl	80004e0 <__adddf3>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	4610      	mov	r0, r2
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f7ff fd0f 	bl	800084c <__aeabi_d2f>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <main+0x178>)
 8000e32:	6013      	str	r3, [r2, #0]
  {
 8000e34:	e77d      	b.n	8000d32 <main+0x2a>
 8000e36:	bf00      	nop
 8000e38:	18018018 	.word	0x18018018
 8000e3c:	3f480180 	.word	0x3f480180
 8000e40:	20000098 	.word	0x20000098
 8000e44:	20000124 	.word	0x20000124
 8000e48:	200000e0 	.word	0x200000e0
 8000e4c:	08004634 	.word	0x08004634
 8000e50:	08004628 	.word	0x08004628
 8000e54:	40020c00 	.word	0x40020c00
 8000e58:	0800464c 	.word	0x0800464c
 8000e5c:	08004640 	.word	0x08004640
 8000e60:	08004668 	.word	0x08004668
 8000e64:	0800465c 	.word	0x0800465c
 8000e68:	08004680 	.word	0x08004680
 8000e6c:	08004674 	.word	0x08004674
 8000e70:	0800468c 	.word	0x0800468c
 8000e74:	2000016c 	.word	0x2000016c
 8000e78:	c0490000 	.word	0xc0490000
 8000e7c:	40590000 	.word	0x40590000
 8000e80:	20000170 	.word	0x20000170

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b094      	sub	sp, #80	; 0x50
 8000e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8a:	f107 0320 	add.w	r3, r7, #32
 8000e8e:	2230      	movs	r2, #48	; 0x30
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f002 ff86 	bl	8003da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <SystemClock_Config+0xb4>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	4a21      	ldr	r2, [pc, #132]	; (8000f38 <SystemClock_Config+0xb4>)
 8000eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <SystemClock_Config+0xb4>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <SystemClock_Config+0xb8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a1b      	ldr	r2, [pc, #108]	; (8000f3c <SystemClock_Config+0xb8>)
 8000ece:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <SystemClock_Config+0xb8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee8:	2310      	movs	r3, #16
 8000eea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef0:	f107 0320 	add.w	r3, r7, #32
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 fa9f 	bl	8002438 <HAL_RCC_OscConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000f00:	f000 f978 	bl	80011f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f04:	230f      	movs	r3, #15
 8000f06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 fd02 	bl	8002928 <HAL_RCC_ClockConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f2a:	f000 f963 	bl	80011f4 <Error_Handler>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3750      	adds	r7, #80	; 0x50
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40007000 	.word	0x40007000

08000f40 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f46:	463b      	mov	r3, r7
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <MX_ADC2_Init+0x98>)
 8000f54:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <MX_ADC2_Init+0x9c>)
 8000f56:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <MX_ADC2_Init+0x98>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <MX_ADC2_Init+0x98>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <MX_ADC2_Init+0x98>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_ADC2_Init+0x98>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_ADC2_Init+0x98>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_ADC2_Init+0x98>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <MX_ADC2_Init+0x98>)
 8000f80:	4a17      	ldr	r2, [pc, #92]	; (8000fe0 <MX_ADC2_Init+0xa0>)
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_ADC2_Init+0x98>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <MX_ADC2_Init+0x98>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_ADC2_Init+0x98>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_ADC2_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f9e:	480e      	ldr	r0, [pc, #56]	; (8000fd8 <MX_ADC2_Init+0x98>)
 8000fa0:	f000 fb6c 	bl	800167c <HAL_ADC_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000faa:	f000 f923 	bl	80011f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fae:	2309      	movs	r3, #9
 8000fb0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000fb6:	2307      	movs	r3, #7
 8000fb8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <MX_ADC2_Init+0x98>)
 8000fc0:	f000 fd0a 	bl	80019d8 <HAL_ADC_ConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000fca:	f000 f913 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000124 	.word	0x20000124
 8000fdc:	40012100 	.word	0x40012100
 8000fe0:	0f000001 	.word	0x0f000001

08000fe4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <MX_TIM4_Init+0x94>)
 8001002:	4a1e      	ldr	r2, [pc, #120]	; (800107c <MX_TIM4_Init+0x98>)
 8001004:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15999;
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <MX_TIM4_Init+0x94>)
 8001008:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800100c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <MX_TIM4_Init+0x94>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <MX_TIM4_Init+0x94>)
 8001016:	f241 3287 	movw	r2, #4999	; 0x1387
 800101a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <MX_TIM4_Init+0x94>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <MX_TIM4_Init+0x94>)
 8001024:	2280      	movs	r2, #128	; 0x80
 8001026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001028:	4813      	ldr	r0, [pc, #76]	; (8001078 <MX_TIM4_Init+0x94>)
 800102a:	f001 fe4d 	bl	8002cc8 <HAL_TIM_Base_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001034:	f000 f8de 	bl	80011f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	4619      	mov	r1, r3
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <MX_TIM4_Init+0x94>)
 8001046:	f002 f807 	bl	8003058 <HAL_TIM_ConfigClockSource>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001050:	f000 f8d0 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800105c:	463b      	mov	r3, r7
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_TIM4_Init+0x94>)
 8001062:	f002 fa2d 	bl	80034c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800106c:	f000 f8c2 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000098 	.word	0x20000098
 800107c:	40000800 	.word	0x40000800

08001080 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_USART3_UART_Init+0x4c>)
 8001086:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <MX_USART3_UART_Init+0x50>)
 8001088:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <MX_USART3_UART_Init+0x4c>)
 800108c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001090:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_USART3_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_USART3_UART_Init+0x4c>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <MX_USART3_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_USART3_UART_Init+0x4c>)
 80010a6:	220c      	movs	r2, #12
 80010a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <MX_USART3_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_USART3_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_USART3_UART_Init+0x4c>)
 80010b8:	f002 fa92 	bl	80035e0 <HAL_UART_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010c2:	f000 f897 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200000e0 	.word	0x200000e0
 80010d0:	40004800 	.word	0x40004800

080010d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	4b3d      	ldr	r3, [pc, #244]	; (80011e4 <MX_GPIO_Init+0x110>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a3c      	ldr	r2, [pc, #240]	; (80011e4 <MX_GPIO_Init+0x110>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b3a      	ldr	r3, [pc, #232]	; (80011e4 <MX_GPIO_Init+0x110>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <MX_GPIO_Init+0x110>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a35      	ldr	r2, [pc, #212]	; (80011e4 <MX_GPIO_Init+0x110>)
 8001110:	f043 0308 	orr.w	r3, r3, #8
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <MX_GPIO_Init+0x110>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <MX_GPIO_Init+0x110>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a2e      	ldr	r2, [pc, #184]	; (80011e4 <MX_GPIO_Init+0x110>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <MX_GPIO_Init+0x110>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <MX_GPIO_Init+0x110>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a27      	ldr	r2, [pc, #156]	; (80011e4 <MX_GPIO_Init+0x110>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <MX_GPIO_Init+0x110>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001160:	4821      	ldr	r0, [pc, #132]	; (80011e8 <MX_GPIO_Init+0x114>)
 8001162:	f001 f91d 	bl	80023a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Green_LED_Pin Orange_LED_Pin Red_LED_Pin Blue_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin;
 8001166:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800116a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	481a      	ldr	r0, [pc, #104]	; (80011e8 <MX_GPIO_Init+0x114>)
 8001180:	f000 ff5a 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : But4_Pin But5_Pin But3_Pin But1_Pin */
  GPIO_InitStruct.Pin = But4_Pin|But5_Pin|But3_Pin|But1_Pin;
 8001184:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 8001188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800118a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800118e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4814      	ldr	r0, [pc, #80]	; (80011ec <MX_GPIO_Init+0x118>)
 800119c:	f000 ff4c 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : But2_Pin */
  GPIO_InitStruct.Pin = But2_Pin;
 80011a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(But2_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4619      	mov	r1, r3
 80011b6:	480e      	ldr	r0, [pc, #56]	; (80011f0 <MX_GPIO_Init+0x11c>)
 80011b8:	f000 ff3e 	bl	8002038 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2100      	movs	r1, #0
 80011c0:	2017      	movs	r0, #23
 80011c2:	f000 ff02 	bl	8001fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011c6:	2017      	movs	r0, #23
 80011c8:	f000 ff1b 	bl	8002002 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2100      	movs	r1, #0
 80011d0:	2028      	movs	r0, #40	; 0x28
 80011d2:	f000 fefa 	bl	8001fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011d6:	2028      	movs	r0, #40	; 0x28
 80011d8:	f000 ff13 	bl	8002002 <HAL_NVIC_EnableIRQ>

}
 80011dc:	bf00      	nop
 80011de:	3728      	adds	r7, #40	; 0x28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020c00 	.word	0x40020c00
 80011ec:	40020800 	.word	0x40020800
 80011f0:	40020000 	.word	0x40020000

080011f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011fc:	e7fe      	b.n	80011fc <Error_Handler+0x8>
	...

08001200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <HAL_MspInit+0x4c>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	4a0f      	ldr	r2, [pc, #60]	; (800124c <HAL_MspInit+0x4c>)
 8001210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001214:	6453      	str	r3, [r2, #68]	; 0x44
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <HAL_MspInit+0x4c>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <HAL_MspInit+0x4c>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a08      	ldr	r2, [pc, #32]	; (800124c <HAL_MspInit+0x4c>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_MspInit+0x4c>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a17      	ldr	r2, [pc, #92]	; (80012cc <HAL_ADC_MspInit+0x7c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d127      	bne.n	80012c2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_ADC_MspInit+0x80>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	4a15      	ldr	r2, [pc, #84]	; (80012d0 <HAL_ADC_MspInit+0x80>)
 800127c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001280:	6453      	str	r3, [r2, #68]	; 0x44
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HAL_ADC_MspInit+0x80>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_ADC_MspInit+0x80>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <HAL_ADC_MspInit+0x80>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <HAL_ADC_MspInit+0x80>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012aa:	2302      	movs	r3, #2
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ae:	2303      	movs	r3, #3
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <HAL_ADC_MspInit+0x84>)
 80012be:	f000 febb 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80012c2:	bf00      	nop
 80012c4:	3728      	adds	r7, #40	; 0x28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40012100 	.word	0x40012100
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020400 	.word	0x40020400

080012d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <HAL_TIM_Base_MspInit+0x48>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d115      	bne.n	8001316 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <HAL_TIM_Base_MspInit+0x4c>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <HAL_TIM_Base_MspInit+0x4c>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	6413      	str	r3, [r2, #64]	; 0x40
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_TIM_Base_MspInit+0x4c>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	201e      	movs	r0, #30
 800130c:	f000 fe5d 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001310:	201e      	movs	r0, #30
 8001312:	f000 fe76 	bl	8002002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40000800 	.word	0x40000800
 8001324:	40023800 	.word	0x40023800

08001328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a19      	ldr	r2, [pc, #100]	; (80013ac <HAL_UART_MspInit+0x84>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d12c      	bne.n	80013a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_UART_MspInit+0x88>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_UART_MspInit+0x88>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001370:	f043 0308 	orr.w	r3, r3, #8
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001382:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001394:	2307      	movs	r3, #7
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <HAL_UART_MspInit+0x8c>)
 80013a0:	f000 fe4a 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40004800 	.word	0x40004800
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020c00 	.word	0x40020c00

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <NMI_Handler+0x4>

080013be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <HardFault_Handler+0x4>

080013c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <MemManage_Handler+0x4>

080013ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001404:	f000 f91a 	bl	800163c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001410:	2040      	movs	r0, #64	; 0x40
 8001412:	f000 fff9 	bl	8002408 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001416:	f44f 7080 	mov.w	r0, #256	; 0x100
 800141a:	f000 fff5 	bl	8002408 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800141e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001422:	f000 fff1 	bl	8002408 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8001432:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(Red_LED_GPIO_Port, Red_LED_Pin);

	uint8_t msg[512];
	extern float tCelsius_ext;
	extern UART_HandleTypeDef huart3;
	uint8_t tx_buffer[]="Hello world\n\r";
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	4a13      	ldr	r2, [pc, #76]	; (8001488 <TIM4_IRQHandler+0x5c>)
 800143a:	461c      	mov	r4, r3
 800143c:	4613      	mov	r3, r2
 800143e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001440:	c407      	stmia	r4!, {r0, r1, r2}
 8001442:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, msg,sprintf((char *)msg,"\n\rExternal temperature is %d",(uint8_t)tCelsius_ext),0XFFFF);
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <TIM4_IRQHandler+0x60>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800144e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001452:	793b      	ldrb	r3, [r7, #4]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	490c      	ldr	r1, [pc, #48]	; (8001490 <TIM4_IRQHandler+0x64>)
 800145e:	4618      	mov	r0, r3
 8001460:	f002 fca8 	bl	8003db4 <siprintf>
 8001464:	4603      	mov	r3, r0
 8001466:	b29a      	uxth	r2, r3
 8001468:	f107 0118 	add.w	r1, r7, #24
 800146c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001470:	4808      	ldr	r0, [pc, #32]	; (8001494 <TIM4_IRQHandler+0x68>)
 8001472:	f002 f902 	bl	800367a <HAL_UART_Transmit>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001476:	4808      	ldr	r0, [pc, #32]	; (8001498 <TIM4_IRQHandler+0x6c>)
 8001478:	f001 fce6 	bl	8002e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8001482:	46bd      	mov	sp, r7
 8001484:	bd90      	pop	{r4, r7, pc}
 8001486:	bf00      	nop
 8001488:	080046c4 	.word	0x080046c4
 800148c:	20000170 	.word	0x20000170
 8001490:	080046a4 	.word	0x080046a4
 8001494:	200000e0 	.word	0x200000e0
 8001498:	20000098 	.word	0x20000098

0800149c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80014a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80014a4:	f000 ffb0 	bl	8002408 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80014a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80014ac:	f000 ffac 	bl	8002408 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014bc:	4a14      	ldr	r2, [pc, #80]	; (8001510 <_sbrk+0x5c>)
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <_sbrk+0x60>)
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <_sbrk+0x64>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <_sbrk+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d207      	bcs.n	80014f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e4:	f002 fc34 	bl	8003d50 <__errno>
 80014e8:	4603      	mov	r3, r0
 80014ea:	220c      	movs	r2, #12
 80014ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
 80014f2:	e009      	b.n	8001508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <_sbrk+0x64>)
 8001504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20020000 	.word	0x20020000
 8001514:	00000400 	.word	0x00000400
 8001518:	2000008c 	.word	0x2000008c
 800151c:	20000188 	.word	0x20000188

08001520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <SystemInit+0x20>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <SystemInit+0x20>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800157c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001548:	480d      	ldr	r0, [pc, #52]	; (8001580 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800154a:	490e      	ldr	r1, [pc, #56]	; (8001584 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800154c:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001550:	e002      	b.n	8001558 <LoopCopyDataInit>

08001552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001556:	3304      	adds	r3, #4

08001558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800155c:	d3f9      	bcc.n	8001552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155e:	4a0b      	ldr	r2, [pc, #44]	; (800158c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001560:	4c0b      	ldr	r4, [pc, #44]	; (8001590 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001564:	e001      	b.n	800156a <LoopFillZerobss>

08001566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001568:	3204      	adds	r2, #4

0800156a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800156c:	d3fb      	bcc.n	8001566 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800156e:	f7ff ffd7 	bl	8001520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001572:	f002 fbf3 	bl	8003d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001576:	f7ff fbc7 	bl	8000d08 <main>
  bx  lr    
 800157a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800157c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001584:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001588:	08004730 	.word	0x08004730
  ldr r2, =_sbss
 800158c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001590:	20000188 	.word	0x20000188

08001594 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC_IRQHandler>
	...

08001598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800159c:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <HAL_Init+0x40>)
 80015a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <HAL_Init+0x40>)
 80015ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <HAL_Init+0x40>)
 80015ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c0:	2003      	movs	r0, #3
 80015c2:	f000 fcf7 	bl	8001fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c6:	200f      	movs	r0, #15
 80015c8:	f000 f808 	bl	80015dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015cc:	f7ff fe18 	bl	8001200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023c00 	.word	0x40023c00

080015dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_InitTick+0x54>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_InitTick+0x58>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4619      	mov	r1, r3
 80015ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 fd0f 	bl	800201e <HAL_SYSTICK_Config>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e00e      	b.n	8001628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b0f      	cmp	r3, #15
 800160e:	d80a      	bhi.n	8001626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f000 fcd7 	bl	8001fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800161c:	4a06      	ldr	r2, [pc, #24]	; (8001638 <HAL_InitTick+0x5c>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	e000      	b.n	8001628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000000 	.word	0x20000000
 8001634:	20000008 	.word	0x20000008
 8001638:	20000004 	.word	0x20000004

0800163c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x20>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x24>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4413      	add	r3, r2
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <HAL_IncTick+0x24>)
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000008 	.word	0x20000008
 8001660:	20000174 	.word	0x20000174

08001664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return uwTick;
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <HAL_GetTick+0x14>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000174 	.word	0x20000174

0800167c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001684:	2300      	movs	r3, #0
 8001686:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e033      	b.n	80016fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	2b00      	cmp	r3, #0
 8001698:	d109      	bne.n	80016ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff fdd8 	bl	8001250 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 0310 	and.w	r3, r3, #16
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d118      	bne.n	80016ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016c2:	f023 0302 	bic.w	r3, r3, #2
 80016c6:	f043 0202 	orr.w	r2, r3, #2
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 faa4 	bl	8001c1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f023 0303 	bic.w	r3, r3, #3
 80016e2:	f043 0201 	orr.w	r2, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	641a      	str	r2, [r3, #64]	; 0x40
 80016ea:	e001      	b.n	80016f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_ADC_Start+0x1a>
 800171a:	2302      	movs	r3, #2
 800171c:	e0b2      	b.n	8001884 <HAL_ADC_Start+0x180>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b01      	cmp	r3, #1
 8001732:	d018      	beq.n	8001766 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0201 	orr.w	r2, r2, #1
 8001742:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001744:	4b52      	ldr	r3, [pc, #328]	; (8001890 <HAL_ADC_Start+0x18c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a52      	ldr	r2, [pc, #328]	; (8001894 <HAL_ADC_Start+0x190>)
 800174a:	fba2 2303 	umull	r2, r3, r2, r3
 800174e:	0c9a      	lsrs	r2, r3, #18
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001758:	e002      	b.n	8001760 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	3b01      	subs	r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f9      	bne.n	800175a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b01      	cmp	r3, #1
 8001772:	d17a      	bne.n	800186a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800177c:	f023 0301 	bic.w	r3, r3, #1
 8001780:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001792:	2b00      	cmp	r3, #0
 8001794:	d007      	beq.n	80017a6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800179e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017b2:	d106      	bne.n	80017c2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b8:	f023 0206 	bic.w	r2, r3, #6
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	645a      	str	r2, [r3, #68]	; 0x44
 80017c0:	e002      	b.n	80017c8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017d0:	4b31      	ldr	r3, [pc, #196]	; (8001898 <HAL_ADC_Start+0x194>)
 80017d2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80017dc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 031f 	and.w	r3, r3, #31
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d12a      	bne.n	8001840 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a2b      	ldr	r2, [pc, #172]	; (800189c <HAL_ADC_Start+0x198>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d015      	beq.n	8001820 <HAL_ADC_Start+0x11c>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a29      	ldr	r2, [pc, #164]	; (80018a0 <HAL_ADC_Start+0x19c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d105      	bne.n	800180a <HAL_ADC_Start+0x106>
 80017fe:	4b26      	ldr	r3, [pc, #152]	; (8001898 <HAL_ADC_Start+0x194>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 031f 	and.w	r3, r3, #31
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00a      	beq.n	8001820 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a25      	ldr	r2, [pc, #148]	; (80018a4 <HAL_ADC_Start+0x1a0>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d136      	bne.n	8001882 <HAL_ADC_Start+0x17e>
 8001814:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_ADC_Start+0x194>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0310 	and.w	r3, r3, #16
 800181c:	2b00      	cmp	r3, #0
 800181e:	d130      	bne.n	8001882 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d129      	bne.n	8001882 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	e020      	b.n	8001882 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a15      	ldr	r2, [pc, #84]	; (800189c <HAL_ADC_Start+0x198>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d11b      	bne.n	8001882 <HAL_ADC_Start+0x17e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d114      	bne.n	8001882 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	e00b      	b.n	8001882 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f043 0210 	orr.w	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	f043 0201 	orr.w	r2, r3, #1
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	20000000 	.word	0x20000000
 8001894:	431bde83 	.word	0x431bde83
 8001898:	40012300 	.word	0x40012300
 800189c:	40012000 	.word	0x40012000
 80018a0:	40012100 	.word	0x40012100
 80018a4:	40012200 	.word	0x40012200

080018a8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c4:	d113      	bne.n	80018ee <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018d4:	d10b      	bne.n	80018ee <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f043 0220 	orr.w	r2, r3, #32
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e063      	b.n	80019b6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80018ee:	f7ff feb9 	bl	8001664 <HAL_GetTick>
 80018f2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018f4:	e021      	b.n	800193a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fc:	d01d      	beq.n	800193a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d007      	beq.n	8001914 <HAL_ADC_PollForConversion+0x6c>
 8001904:	f7ff feae 	bl	8001664 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d212      	bcs.n	800193a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b02      	cmp	r3, #2
 8001920:	d00b      	beq.n	800193a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f043 0204 	orr.w	r2, r3, #4
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e03d      	b.n	80019b6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b02      	cmp	r3, #2
 8001946:	d1d6      	bne.n	80018f6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f06f 0212 	mvn.w	r2, #18
 8001950:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d123      	bne.n	80019b4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001970:	2b00      	cmp	r3, #0
 8001972:	d11f      	bne.n	80019b4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800197e:	2b00      	cmp	r3, #0
 8001980:	d006      	beq.n	8001990 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800198c:	2b00      	cmp	r3, #0
 800198e:	d111      	bne.n	80019b4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d105      	bne.n	80019b4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	f043 0201 	orr.w	r2, r3, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x1c>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e105      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x228>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b09      	cmp	r3, #9
 8001a02:	d925      	bls.n	8001a50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68d9      	ldr	r1, [r3, #12]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	3b1e      	subs	r3, #30
 8001a1a:	2207      	movs	r2, #7
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43da      	mvns	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	400a      	ands	r2, r1
 8001a28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68d9      	ldr	r1, [r3, #12]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4403      	add	r3, r0
 8001a42:	3b1e      	subs	r3, #30
 8001a44:	409a      	lsls	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	e022      	b.n	8001a96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6919      	ldr	r1, [r3, #16]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	2207      	movs	r2, #7
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	400a      	ands	r2, r1
 8001a72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6919      	ldr	r1, [r3, #16]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	4618      	mov	r0, r3
 8001a86:	4603      	mov	r3, r0
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4403      	add	r3, r0
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d824      	bhi.n	8001ae8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	3b05      	subs	r3, #5
 8001ab0:	221f      	movs	r2, #31
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	400a      	ands	r2, r1
 8001abe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	4618      	mov	r0, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3b05      	subs	r3, #5
 8001ada:	fa00 f203 	lsl.w	r2, r0, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ae6:	e04c      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	d824      	bhi.n	8001b3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	3b23      	subs	r3, #35	; 0x23
 8001b02:	221f      	movs	r2, #31
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43da      	mvns	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	400a      	ands	r2, r1
 8001b10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	3b23      	subs	r3, #35	; 0x23
 8001b2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	631a      	str	r2, [r3, #48]	; 0x30
 8001b38:	e023      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	3b41      	subs	r3, #65	; 0x41
 8001b4c:	221f      	movs	r2, #31
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	400a      	ands	r2, r1
 8001b5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4618      	mov	r0, r3
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	3b41      	subs	r3, #65	; 0x41
 8001b76:	fa00 f203 	lsl.w	r2, r0, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b82:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <HAL_ADC_ConfigChannel+0x234>)
 8001b84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a21      	ldr	r2, [pc, #132]	; (8001c10 <HAL_ADC_ConfigChannel+0x238>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d109      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x1cc>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b12      	cmp	r3, #18
 8001b96:	d105      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a19      	ldr	r2, [pc, #100]	; (8001c10 <HAL_ADC_ConfigChannel+0x238>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d123      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x21e>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b10      	cmp	r3, #16
 8001bb4:	d003      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x1e6>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b11      	cmp	r3, #17
 8001bbc:	d11b      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b10      	cmp	r3, #16
 8001bd0:	d111      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <HAL_ADC_ConfigChannel+0x23c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a10      	ldr	r2, [pc, #64]	; (8001c18 <HAL_ADC_ConfigChannel+0x240>)
 8001bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bdc:	0c9a      	lsrs	r2, r3, #18
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001be8:	e002      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	3b01      	subs	r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f9      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	40012300 	.word	0x40012300
 8001c10:	40012000 	.word	0x40012000
 8001c14:	20000000 	.word	0x20000000
 8001c18:	431bde83 	.word	0x431bde83

08001c1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c24:	4b79      	ldr	r3, [pc, #484]	; (8001e0c <ADC_Init+0x1f0>)
 8001c26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6859      	ldr	r1, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	021a      	lsls	r2, r3, #8
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6859      	ldr	r1, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6899      	ldr	r1, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cae:	4a58      	ldr	r2, [pc, #352]	; (8001e10 <ADC_Init+0x1f4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d022      	beq.n	8001cfa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6899      	ldr	r1, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ce4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6899      	ldr	r1, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	e00f      	b.n	8001d1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0202 	bic.w	r2, r2, #2
 8001d28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6899      	ldr	r1, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7e1b      	ldrb	r3, [r3, #24]
 8001d34:	005a      	lsls	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d01b      	beq.n	8001d80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6859      	ldr	r1, [r3, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	3b01      	subs	r3, #1
 8001d74:	035a      	lsls	r2, r3, #13
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	e007      	b.n	8001d90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	051a      	lsls	r2, r3, #20
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6899      	ldr	r1, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dd2:	025a      	lsls	r2, r3, #9
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6899      	ldr	r1, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	029a      	lsls	r2, r3, #10
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	609a      	str	r2, [r3, #8]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	40012300 	.word	0x40012300
 8001e10:	0f000001 	.word	0x0f000001

08001e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <__NVIC_SetPriorityGrouping+0x44>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e30:	4013      	ands	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e46:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <__NVIC_SetPriorityGrouping+0x44>)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	60d3      	str	r3, [r2, #12]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <__NVIC_GetPriorityGrouping+0x18>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	f003 0307 	and.w	r3, r3, #7
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	db0b      	blt.n	8001ea2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	f003 021f 	and.w	r2, r3, #31
 8001e90:	4907      	ldr	r1, [pc, #28]	; (8001eb0 <__NVIC_EnableIRQ+0x38>)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	095b      	lsrs	r3, r3, #5
 8001e98:	2001      	movs	r0, #1
 8001e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000e100 	.word	0xe000e100

08001eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	6039      	str	r1, [r7, #0]
 8001ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	db0a      	blt.n	8001ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	490c      	ldr	r1, [pc, #48]	; (8001f00 <__NVIC_SetPriority+0x4c>)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	0112      	lsls	r2, r2, #4
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001edc:	e00a      	b.n	8001ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4908      	ldr	r1, [pc, #32]	; (8001f04 <__NVIC_SetPriority+0x50>)
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	3b04      	subs	r3, #4
 8001eec:	0112      	lsls	r2, r2, #4
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	761a      	strb	r2, [r3, #24]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000e100 	.word	0xe000e100
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b089      	sub	sp, #36	; 0x24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f1c3 0307 	rsb	r3, r3, #7
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	bf28      	it	cs
 8001f26:	2304      	movcs	r3, #4
 8001f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	2b06      	cmp	r3, #6
 8001f30:	d902      	bls.n	8001f38 <NVIC_EncodePriority+0x30>
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3b03      	subs	r3, #3
 8001f36:	e000      	b.n	8001f3a <NVIC_EncodePriority+0x32>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43da      	mvns	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f50:	f04f 31ff 	mov.w	r1, #4294967295
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5a:	43d9      	mvns	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	4313      	orrs	r3, r2
         );
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3724      	adds	r7, #36	; 0x24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f80:	d301      	bcc.n	8001f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00f      	b.n	8001fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f86:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <SysTick_Config+0x40>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f8e:	210f      	movs	r1, #15
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295
 8001f94:	f7ff ff8e 	bl	8001eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <SysTick_Config+0x40>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9e:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <SysTick_Config+0x40>)
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	e000e010 	.word	0xe000e010

08001fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ff29 	bl	8001e14 <__NVIC_SetPriorityGrouping>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fdc:	f7ff ff3e 	bl	8001e5c <__NVIC_GetPriorityGrouping>
 8001fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	6978      	ldr	r0, [r7, #20]
 8001fe8:	f7ff ff8e 	bl	8001f08 <NVIC_EncodePriority>
 8001fec:	4602      	mov	r2, r0
 8001fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff5d 	bl	8001eb4 <__NVIC_SetPriority>
}
 8001ffa:	bf00      	nop
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff31 	bl	8001e78 <__NVIC_EnableIRQ>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ffa2 	bl	8001f70 <SysTick_Config>
 800202c:	4603      	mov	r3, r0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	e16b      	b.n	800232c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	f040 815a 	bne.w	8002326 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d005      	beq.n	800208a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002086:	2b02      	cmp	r3, #2
 8002088:	d130      	bne.n	80020ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c0:	2201      	movs	r2, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 0201 	and.w	r2, r3, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d017      	beq.n	8002128 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d123      	bne.n	800217c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	08da      	lsrs	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3208      	adds	r2, #8
 800213c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	220f      	movs	r2, #15
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	08da      	lsrs	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3208      	adds	r2, #8
 8002176:	69b9      	ldr	r1, [r7, #24]
 8002178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80b4 	beq.w	8002326 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b60      	ldr	r3, [pc, #384]	; (8002344 <HAL_GPIO_Init+0x30c>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	4a5f      	ldr	r2, [pc, #380]	; (8002344 <HAL_GPIO_Init+0x30c>)
 80021c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021cc:	6453      	str	r3, [r2, #68]	; 0x44
 80021ce:	4b5d      	ldr	r3, [pc, #372]	; (8002344 <HAL_GPIO_Init+0x30c>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021da:	4a5b      	ldr	r2, [pc, #364]	; (8002348 <HAL_GPIO_Init+0x310>)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a52      	ldr	r2, [pc, #328]	; (800234c <HAL_GPIO_Init+0x314>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d02b      	beq.n	800225e <HAL_GPIO_Init+0x226>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a51      	ldr	r2, [pc, #324]	; (8002350 <HAL_GPIO_Init+0x318>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d025      	beq.n	800225a <HAL_GPIO_Init+0x222>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a50      	ldr	r2, [pc, #320]	; (8002354 <HAL_GPIO_Init+0x31c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d01f      	beq.n	8002256 <HAL_GPIO_Init+0x21e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4f      	ldr	r2, [pc, #316]	; (8002358 <HAL_GPIO_Init+0x320>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d019      	beq.n	8002252 <HAL_GPIO_Init+0x21a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4e      	ldr	r2, [pc, #312]	; (800235c <HAL_GPIO_Init+0x324>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d013      	beq.n	800224e <HAL_GPIO_Init+0x216>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4d      	ldr	r2, [pc, #308]	; (8002360 <HAL_GPIO_Init+0x328>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d00d      	beq.n	800224a <HAL_GPIO_Init+0x212>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4c      	ldr	r2, [pc, #304]	; (8002364 <HAL_GPIO_Init+0x32c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d007      	beq.n	8002246 <HAL_GPIO_Init+0x20e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4b      	ldr	r2, [pc, #300]	; (8002368 <HAL_GPIO_Init+0x330>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d101      	bne.n	8002242 <HAL_GPIO_Init+0x20a>
 800223e:	2307      	movs	r3, #7
 8002240:	e00e      	b.n	8002260 <HAL_GPIO_Init+0x228>
 8002242:	2308      	movs	r3, #8
 8002244:	e00c      	b.n	8002260 <HAL_GPIO_Init+0x228>
 8002246:	2306      	movs	r3, #6
 8002248:	e00a      	b.n	8002260 <HAL_GPIO_Init+0x228>
 800224a:	2305      	movs	r3, #5
 800224c:	e008      	b.n	8002260 <HAL_GPIO_Init+0x228>
 800224e:	2304      	movs	r3, #4
 8002250:	e006      	b.n	8002260 <HAL_GPIO_Init+0x228>
 8002252:	2303      	movs	r3, #3
 8002254:	e004      	b.n	8002260 <HAL_GPIO_Init+0x228>
 8002256:	2302      	movs	r3, #2
 8002258:	e002      	b.n	8002260 <HAL_GPIO_Init+0x228>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_GPIO_Init+0x228>
 800225e:	2300      	movs	r3, #0
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	f002 0203 	and.w	r2, r2, #3
 8002266:	0092      	lsls	r2, r2, #2
 8002268:	4093      	lsls	r3, r2
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002270:	4935      	ldr	r1, [pc, #212]	; (8002348 <HAL_GPIO_Init+0x310>)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	3302      	adds	r3, #2
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800227e:	4b3b      	ldr	r3, [pc, #236]	; (800236c <HAL_GPIO_Init+0x334>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022a2:	4a32      	ldr	r2, [pc, #200]	; (800236c <HAL_GPIO_Init+0x334>)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022a8:	4b30      	ldr	r3, [pc, #192]	; (800236c <HAL_GPIO_Init+0x334>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022cc:	4a27      	ldr	r2, [pc, #156]	; (800236c <HAL_GPIO_Init+0x334>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022d2:	4b26      	ldr	r3, [pc, #152]	; (800236c <HAL_GPIO_Init+0x334>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022f6:	4a1d      	ldr	r2, [pc, #116]	; (800236c <HAL_GPIO_Init+0x334>)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <HAL_GPIO_Init+0x334>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002320:	4a12      	ldr	r2, [pc, #72]	; (800236c <HAL_GPIO_Init+0x334>)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3301      	adds	r3, #1
 800232a:	61fb      	str	r3, [r7, #28]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	2b0f      	cmp	r3, #15
 8002330:	f67f ae90 	bls.w	8002054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	3724      	adds	r7, #36	; 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	40013800 	.word	0x40013800
 800234c:	40020000 	.word	0x40020000
 8002350:	40020400 	.word	0x40020400
 8002354:	40020800 	.word	0x40020800
 8002358:	40020c00 	.word	0x40020c00
 800235c:	40021000 	.word	0x40021000
 8002360:	40021400 	.word	0x40021400
 8002364:	40021800 	.word	0x40021800
 8002368:	40021c00 	.word	0x40021c00
 800236c:	40013c00 	.word	0x40013c00

08002370 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	887b      	ldrh	r3, [r7, #2]
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
 800238c:	e001      	b.n	8002392 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800238e:	2300      	movs	r3, #0
 8002390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002392:	7bfb      	ldrb	r3, [r7, #15]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]
 80023ac:	4613      	mov	r3, r2
 80023ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023b0:	787b      	ldrb	r3, [r7, #1]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b6:	887a      	ldrh	r2, [r7, #2]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023bc:	e003      	b.n	80023c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023be:	887b      	ldrh	r3, [r7, #2]
 80023c0:	041a      	lsls	r2, r3, #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	619a      	str	r2, [r3, #24]
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b085      	sub	sp, #20
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	460b      	mov	r3, r1
 80023dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023e4:	887a      	ldrh	r2, [r7, #2]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4013      	ands	r3, r2
 80023ea:	041a      	lsls	r2, r3, #16
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	43d9      	mvns	r1, r3
 80023f0:	887b      	ldrh	r3, [r7, #2]
 80023f2:	400b      	ands	r3, r1
 80023f4:	431a      	orrs	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	619a      	str	r2, [r3, #24]
}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002412:	4b08      	ldr	r3, [pc, #32]	; (8002434 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	4013      	ands	r3, r2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d006      	beq.n	800242c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800241e:	4a05      	ldr	r2, [pc, #20]	; (8002434 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe fc0a 	bl	8000c40 <HAL_GPIO_EXTI_Callback>
  }
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40013c00 	.word	0x40013c00

08002438 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e264      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d075      	beq.n	8002542 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002456:	4ba3      	ldr	r3, [pc, #652]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b04      	cmp	r3, #4
 8002460:	d00c      	beq.n	800247c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002462:	4ba0      	ldr	r3, [pc, #640]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800246a:	2b08      	cmp	r3, #8
 800246c:	d112      	bne.n	8002494 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246e:	4b9d      	ldr	r3, [pc, #628]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800247a:	d10b      	bne.n	8002494 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	4b99      	ldr	r3, [pc, #612]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d05b      	beq.n	8002540 <HAL_RCC_OscConfig+0x108>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d157      	bne.n	8002540 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e23f      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249c:	d106      	bne.n	80024ac <HAL_RCC_OscConfig+0x74>
 800249e:	4b91      	ldr	r3, [pc, #580]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a90      	ldr	r2, [pc, #576]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e01d      	b.n	80024e8 <HAL_RCC_OscConfig+0xb0>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x98>
 80024b6:	4b8b      	ldr	r3, [pc, #556]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a8a      	ldr	r2, [pc, #552]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	4b88      	ldr	r3, [pc, #544]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a87      	ldr	r2, [pc, #540]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	e00b      	b.n	80024e8 <HAL_RCC_OscConfig+0xb0>
 80024d0:	4b84      	ldr	r3, [pc, #528]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a83      	ldr	r2, [pc, #524]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	4b81      	ldr	r3, [pc, #516]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a80      	ldr	r2, [pc, #512]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d013      	beq.n	8002518 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7ff f8b8 	bl	8001664 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f8:	f7ff f8b4 	bl	8001664 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e204      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250a:	4b76      	ldr	r3, [pc, #472]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0xc0>
 8002516:	e014      	b.n	8002542 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7ff f8a4 	bl	8001664 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002520:	f7ff f8a0 	bl	8001664 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e1f0      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002532:	4b6c      	ldr	r3, [pc, #432]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0xe8>
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d063      	beq.n	8002616 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800254e:	4b65      	ldr	r3, [pc, #404]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800255a:	4b62      	ldr	r3, [pc, #392]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002562:	2b08      	cmp	r3, #8
 8002564:	d11c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002566:	4b5f      	ldr	r3, [pc, #380]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d116      	bne.n	80025a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002572:	4b5c      	ldr	r3, [pc, #368]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d005      	beq.n	800258a <HAL_RCC_OscConfig+0x152>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d001      	beq.n	800258a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e1c4      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258a:	4b56      	ldr	r3, [pc, #344]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4952      	ldr	r1, [pc, #328]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259e:	e03a      	b.n	8002616 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d020      	beq.n	80025ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a8:	4b4f      	ldr	r3, [pc, #316]	; (80026e8 <HAL_RCC_OscConfig+0x2b0>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ae:	f7ff f859 	bl	8001664 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b6:	f7ff f855 	bl	8001664 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e1a5      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c8:	4b46      	ldr	r3, [pc, #280]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d4:	4b43      	ldr	r3, [pc, #268]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4940      	ldr	r1, [pc, #256]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	600b      	str	r3, [r1, #0]
 80025e8:	e015      	b.n	8002616 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ea:	4b3f      	ldr	r3, [pc, #252]	; (80026e8 <HAL_RCC_OscConfig+0x2b0>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7ff f838 	bl	8001664 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f8:	f7ff f834 	bl	8001664 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e184      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260a:	4b36      	ldr	r3, [pc, #216]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d030      	beq.n	8002684 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d016      	beq.n	8002658 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800262a:	4b30      	ldr	r3, [pc, #192]	; (80026ec <HAL_RCC_OscConfig+0x2b4>)
 800262c:	2201      	movs	r2, #1
 800262e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002630:	f7ff f818 	bl	8001664 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002638:	f7ff f814 	bl	8001664 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e164      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264a:	4b26      	ldr	r3, [pc, #152]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800264c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0x200>
 8002656:	e015      	b.n	8002684 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002658:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_RCC_OscConfig+0x2b4>)
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265e:	f7ff f801 	bl	8001664 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002666:	f7fe fffd 	bl	8001664 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e14d      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002678:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 800267a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f0      	bne.n	8002666 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80a0 	beq.w	80027d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002696:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10f      	bne.n	80026c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	4a0e      	ldr	r2, [pc, #56]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80026ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b0:	6413      	str	r3, [r2, #64]	; 0x40
 80026b2:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <HAL_RCC_OscConfig+0x2ac>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026be:	2301      	movs	r3, #1
 80026c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_OscConfig+0x2b8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d121      	bne.n	8002712 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ce:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <HAL_RCC_OscConfig+0x2b8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a07      	ldr	r2, [pc, #28]	; (80026f0 <HAL_RCC_OscConfig+0x2b8>)
 80026d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026da:	f7fe ffc3 	bl	8001664 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	e011      	b.n	8002706 <HAL_RCC_OscConfig+0x2ce>
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800
 80026e8:	42470000 	.word	0x42470000
 80026ec:	42470e80 	.word	0x42470e80
 80026f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f4:	f7fe ffb6 	bl	8001664 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e106      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002706:	4b85      	ldr	r3, [pc, #532]	; (800291c <HAL_RCC_OscConfig+0x4e4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d106      	bne.n	8002728 <HAL_RCC_OscConfig+0x2f0>
 800271a:	4b81      	ldr	r3, [pc, #516]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	4a80      	ldr	r2, [pc, #512]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6713      	str	r3, [r2, #112]	; 0x70
 8002726:	e01c      	b.n	8002762 <HAL_RCC_OscConfig+0x32a>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b05      	cmp	r3, #5
 800272e:	d10c      	bne.n	800274a <HAL_RCC_OscConfig+0x312>
 8002730:	4b7b      	ldr	r3, [pc, #492]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002734:	4a7a      	ldr	r2, [pc, #488]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 8002736:	f043 0304 	orr.w	r3, r3, #4
 800273a:	6713      	str	r3, [r2, #112]	; 0x70
 800273c:	4b78      	ldr	r3, [pc, #480]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	4a77      	ldr	r2, [pc, #476]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6713      	str	r3, [r2, #112]	; 0x70
 8002748:	e00b      	b.n	8002762 <HAL_RCC_OscConfig+0x32a>
 800274a:	4b75      	ldr	r3, [pc, #468]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274e:	4a74      	ldr	r2, [pc, #464]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6713      	str	r3, [r2, #112]	; 0x70
 8002756:	4b72      	ldr	r3, [pc, #456]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275a:	4a71      	ldr	r2, [pc, #452]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 800275c:	f023 0304 	bic.w	r3, r3, #4
 8002760:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d015      	beq.n	8002796 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276a:	f7fe ff7b 	bl	8001664 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002772:	f7fe ff77 	bl	8001664 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e0c5      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002788:	4b65      	ldr	r3, [pc, #404]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ee      	beq.n	8002772 <HAL_RCC_OscConfig+0x33a>
 8002794:	e014      	b.n	80027c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002796:	f7fe ff65 	bl	8001664 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f7fe ff61 	bl	8001664 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e0af      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b4:	4b5a      	ldr	r3, [pc, #360]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ee      	bne.n	800279e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d105      	bne.n	80027d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c6:	4b56      	ldr	r3, [pc, #344]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	4a55      	ldr	r2, [pc, #340]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 80027cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 809b 	beq.w	8002912 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027dc:	4b50      	ldr	r3, [pc, #320]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d05c      	beq.n	80028a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d141      	bne.n	8002874 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f0:	4b4c      	ldr	r3, [pc, #304]	; (8002924 <HAL_RCC_OscConfig+0x4ec>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7fe ff35 	bl	8001664 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fe:	f7fe ff31 	bl	8001664 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e081      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002810:	4b43      	ldr	r3, [pc, #268]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f0      	bne.n	80027fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69da      	ldr	r2, [r3, #28]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	019b      	lsls	r3, r3, #6
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	3b01      	subs	r3, #1
 8002836:	041b      	lsls	r3, r3, #16
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	061b      	lsls	r3, r3, #24
 8002840:	4937      	ldr	r1, [pc, #220]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002846:	4b37      	ldr	r3, [pc, #220]	; (8002924 <HAL_RCC_OscConfig+0x4ec>)
 8002848:	2201      	movs	r2, #1
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe ff0a 	bl	8001664 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe ff06 	bl	8001664 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e056      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002866:	4b2e      	ldr	r3, [pc, #184]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0x41c>
 8002872:	e04e      	b.n	8002912 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002874:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <HAL_RCC_OscConfig+0x4ec>)
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7fe fef3 	bl	8001664 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002882:	f7fe feef 	bl	8001664 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e03f      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002894:	4b22      	ldr	r3, [pc, #136]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f0      	bne.n	8002882 <HAL_RCC_OscConfig+0x44a>
 80028a0:	e037      	b.n	8002912 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e032      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028ae:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <HAL_RCC_OscConfig+0x4e8>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d028      	beq.n	800290e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d121      	bne.n	800290e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d11a      	bne.n	800290e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028de:	4013      	ands	r3, r2
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d111      	bne.n	800290e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	085b      	lsrs	r3, r3, #1
 80028f6:	3b01      	subs	r3, #1
 80028f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d107      	bne.n	800290e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d001      	beq.n	8002912 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40007000 	.word	0x40007000
 8002920:	40023800 	.word	0x40023800
 8002924:	42470060 	.word	0x42470060

08002928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0cc      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800293c:	4b68      	ldr	r3, [pc, #416]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d90c      	bls.n	8002964 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b65      	ldr	r3, [pc, #404]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b63      	ldr	r3, [pc, #396]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0b8      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d020      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800297c:	4b59      	ldr	r3, [pc, #356]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	4a58      	ldr	r2, [pc, #352]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002986:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002994:	4b53      	ldr	r3, [pc, #332]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4a52      	ldr	r2, [pc, #328]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800299e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a0:	4b50      	ldr	r3, [pc, #320]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	494d      	ldr	r1, [pc, #308]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d044      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d107      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d119      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e07f      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d003      	beq.n	80029e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e6:	4b3f      	ldr	r3, [pc, #252]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e06f      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f6:	4b3b      	ldr	r3, [pc, #236]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e067      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a06:	4b37      	ldr	r3, [pc, #220]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f023 0203 	bic.w	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4934      	ldr	r1, [pc, #208]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a18:	f7fe fe24 	bl	8001664 <HAL_GetTick>
 8002a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a20:	f7fe fe20 	bl	8001664 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e04f      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	4b2b      	ldr	r3, [pc, #172]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 020c 	and.w	r2, r3, #12
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d1eb      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a48:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d20c      	bcs.n	8002a70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a56:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5e:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e032      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d008      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a7c:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4916      	ldr	r1, [pc, #88]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a9a:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	490e      	ldr	r1, [pc, #56]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aae:	f000 f821 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	490a      	ldr	r1, [pc, #40]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac0:	5ccb      	ldrb	r3, [r1, r3]
 8002ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac6:	4a09      	ldr	r2, [pc, #36]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_RCC_ClockConfig+0x1c8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe fd84 	bl	80015dc <HAL_InitTick>

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40023c00 	.word	0x40023c00
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	080046d4 	.word	0x080046d4
 8002aec:	20000000 	.word	0x20000000
 8002af0:	20000004 	.word	0x20000004

08002af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af4:	b5b0      	push	{r4, r5, r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002afa:	2100      	movs	r1, #0
 8002afc:	6079      	str	r1, [r7, #4]
 8002afe:	2100      	movs	r1, #0
 8002b00:	60f9      	str	r1, [r7, #12]
 8002b02:	2100      	movs	r1, #0
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b06:	2100      	movs	r1, #0
 8002b08:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b0a:	4952      	ldr	r1, [pc, #328]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b0c:	6889      	ldr	r1, [r1, #8]
 8002b0e:	f001 010c 	and.w	r1, r1, #12
 8002b12:	2908      	cmp	r1, #8
 8002b14:	d00d      	beq.n	8002b32 <HAL_RCC_GetSysClockFreq+0x3e>
 8002b16:	2908      	cmp	r1, #8
 8002b18:	f200 8094 	bhi.w	8002c44 <HAL_RCC_GetSysClockFreq+0x150>
 8002b1c:	2900      	cmp	r1, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_RCC_GetSysClockFreq+0x32>
 8002b20:	2904      	cmp	r1, #4
 8002b22:	d003      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x38>
 8002b24:	e08e      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b26:	4b4c      	ldr	r3, [pc, #304]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x164>)
 8002b28:	60bb      	str	r3, [r7, #8]
       break;
 8002b2a:	e08e      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b2c:	4b4b      	ldr	r3, [pc, #300]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x168>)
 8002b2e:	60bb      	str	r3, [r7, #8]
      break;
 8002b30:	e08b      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b32:	4948      	ldr	r1, [pc, #288]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b34:	6849      	ldr	r1, [r1, #4]
 8002b36:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002b3a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b3c:	4945      	ldr	r1, [pc, #276]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b3e:	6849      	ldr	r1, [r1, #4]
 8002b40:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002b44:	2900      	cmp	r1, #0
 8002b46:	d024      	beq.n	8002b92 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b48:	4942      	ldr	r1, [pc, #264]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b4a:	6849      	ldr	r1, [r1, #4]
 8002b4c:	0989      	lsrs	r1, r1, #6
 8002b4e:	4608      	mov	r0, r1
 8002b50:	f04f 0100 	mov.w	r1, #0
 8002b54:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002b58:	f04f 0500 	mov.w	r5, #0
 8002b5c:	ea00 0204 	and.w	r2, r0, r4
 8002b60:	ea01 0305 	and.w	r3, r1, r5
 8002b64:	493d      	ldr	r1, [pc, #244]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x168>)
 8002b66:	fb01 f003 	mul.w	r0, r1, r3
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	fb01 f102 	mul.w	r1, r1, r2
 8002b70:	1844      	adds	r4, r0, r1
 8002b72:	493a      	ldr	r1, [pc, #232]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x168>)
 8002b74:	fba2 0101 	umull	r0, r1, r2, r1
 8002b78:	1863      	adds	r3, r4, r1
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	f7fd feb2 	bl	80008ec <__aeabi_uldivmod>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	e04a      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b92:	4b30      	ldr	r3, [pc, #192]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	099b      	lsrs	r3, r3, #6
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ba2:	f04f 0100 	mov.w	r1, #0
 8002ba6:	ea02 0400 	and.w	r4, r2, r0
 8002baa:	ea03 0501 	and.w	r5, r3, r1
 8002bae:	4620      	mov	r0, r4
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	014b      	lsls	r3, r1, #5
 8002bbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bc0:	0142      	lsls	r2, r0, #5
 8002bc2:	4610      	mov	r0, r2
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	1b00      	subs	r0, r0, r4
 8002bc8:	eb61 0105 	sbc.w	r1, r1, r5
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	018b      	lsls	r3, r1, #6
 8002bd6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bda:	0182      	lsls	r2, r0, #6
 8002bdc:	1a12      	subs	r2, r2, r0
 8002bde:	eb63 0301 	sbc.w	r3, r3, r1
 8002be2:	f04f 0000 	mov.w	r0, #0
 8002be6:	f04f 0100 	mov.w	r1, #0
 8002bea:	00d9      	lsls	r1, r3, #3
 8002bec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bf0:	00d0      	lsls	r0, r2, #3
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	1912      	adds	r2, r2, r4
 8002bf8:	eb45 0303 	adc.w	r3, r5, r3
 8002bfc:	f04f 0000 	mov.w	r0, #0
 8002c00:	f04f 0100 	mov.w	r1, #0
 8002c04:	0299      	lsls	r1, r3, #10
 8002c06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c0a:	0290      	lsls	r0, r2, #10
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	f7fd fe66 	bl	80008ec <__aeabi_uldivmod>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4613      	mov	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c28:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	3301      	adds	r3, #1
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c40:	60bb      	str	r3, [r7, #8]
      break;
 8002c42:	e002      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c44:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x164>)
 8002c46:	60bb      	str	r3, [r7, #8]
      break;
 8002c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4a:	68bb      	ldr	r3, [r7, #8]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bdb0      	pop	{r4, r5, r7, pc}
 8002c54:	40023800 	.word	0x40023800
 8002c58:	00f42400 	.word	0x00f42400
 8002c5c:	017d7840 	.word	0x017d7840

08002c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c64:	4b03      	ldr	r3, [pc, #12]	; (8002c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c66:	681b      	ldr	r3, [r3, #0]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	20000000 	.word	0x20000000

08002c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c7c:	f7ff fff0 	bl	8002c60 <HAL_RCC_GetHCLKFreq>
 8002c80:	4602      	mov	r2, r0
 8002c82:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	0a9b      	lsrs	r3, r3, #10
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	4903      	ldr	r1, [pc, #12]	; (8002c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c8e:	5ccb      	ldrb	r3, [r1, r3]
 8002c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	080046e4 	.word	0x080046e4

08002ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ca4:	f7ff ffdc 	bl	8002c60 <HAL_RCC_GetHCLKFreq>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	0b5b      	lsrs	r3, r3, #13
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	4903      	ldr	r1, [pc, #12]	; (8002cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cb6:	5ccb      	ldrb	r3, [r1, r3]
 8002cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	080046e4 	.word	0x080046e4

08002cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e041      	b.n	8002d5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fe faf2 	bl	80012d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3304      	adds	r3, #4
 8002d04:	4619      	mov	r1, r3
 8002d06:	4610      	mov	r0, r2
 8002d08:	f000 faa0 	bl	800324c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d001      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e04e      	b.n	8002e1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a23      	ldr	r2, [pc, #140]	; (8002e2c <HAL_TIM_Base_Start_IT+0xc4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d022      	beq.n	8002de8 <HAL_TIM_Base_Start_IT+0x80>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002daa:	d01d      	beq.n	8002de8 <HAL_TIM_Base_Start_IT+0x80>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a1f      	ldr	r2, [pc, #124]	; (8002e30 <HAL_TIM_Base_Start_IT+0xc8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d018      	beq.n	8002de8 <HAL_TIM_Base_Start_IT+0x80>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a1e      	ldr	r2, [pc, #120]	; (8002e34 <HAL_TIM_Base_Start_IT+0xcc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d013      	beq.n	8002de8 <HAL_TIM_Base_Start_IT+0x80>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a1c      	ldr	r2, [pc, #112]	; (8002e38 <HAL_TIM_Base_Start_IT+0xd0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00e      	beq.n	8002de8 <HAL_TIM_Base_Start_IT+0x80>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a1b      	ldr	r2, [pc, #108]	; (8002e3c <HAL_TIM_Base_Start_IT+0xd4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d009      	beq.n	8002de8 <HAL_TIM_Base_Start_IT+0x80>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a19      	ldr	r2, [pc, #100]	; (8002e40 <HAL_TIM_Base_Start_IT+0xd8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d004      	beq.n	8002de8 <HAL_TIM_Base_Start_IT+0x80>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a18      	ldr	r2, [pc, #96]	; (8002e44 <HAL_TIM_Base_Start_IT+0xdc>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d111      	bne.n	8002e0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b06      	cmp	r3, #6
 8002df8:	d010      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0201 	orr.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0a:	e007      	b.n	8002e1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40010000 	.word	0x40010000
 8002e30:	40000400 	.word	0x40000400
 8002e34:	40000800 	.word	0x40000800
 8002e38:	40000c00 	.word	0x40000c00
 8002e3c:	40010400 	.word	0x40010400
 8002e40:	40014000 	.word	0x40014000
 8002e44:	40001800 	.word	0x40001800

08002e48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d122      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d11b      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0202 	mvn.w	r2, #2
 8002e74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f9bf 	bl	800320e <HAL_TIM_IC_CaptureCallback>
 8002e90:	e005      	b.n	8002e9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f9b1 	bl	80031fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f9c2 	bl	8003222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d122      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d11b      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f06f 0204 	mvn.w	r2, #4
 8002ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2202      	movs	r2, #2
 8002ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f995 	bl	800320e <HAL_TIM_IC_CaptureCallback>
 8002ee4:	e005      	b.n	8002ef2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f987 	bl	80031fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f998 	bl	8003222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d122      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d11b      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f06f 0208 	mvn.w	r2, #8
 8002f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2204      	movs	r2, #4
 8002f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f96b 	bl	800320e <HAL_TIM_IC_CaptureCallback>
 8002f38:	e005      	b.n	8002f46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f95d 	bl	80031fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f96e 	bl	8003222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	2b10      	cmp	r3, #16
 8002f58:	d122      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2b10      	cmp	r3, #16
 8002f66:	d11b      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f06f 0210 	mvn.w	r2, #16
 8002f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2208      	movs	r2, #8
 8002f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f941 	bl	800320e <HAL_TIM_IC_CaptureCallback>
 8002f8c:	e005      	b.n	8002f9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f933 	bl	80031fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f944 	bl	8003222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d10e      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d107      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0201 	mvn.w	r2, #1
 8002fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f90d 	bl	80031e6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd6:	2b80      	cmp	r3, #128	; 0x80
 8002fd8:	d10e      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe4:	2b80      	cmp	r3, #128	; 0x80
 8002fe6:	d107      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 faea 	bl	80035cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003002:	2b40      	cmp	r3, #64	; 0x40
 8003004:	d10e      	bne.n	8003024 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003010:	2b40      	cmp	r3, #64	; 0x40
 8003012:	d107      	bne.n	8003024 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800301c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f909 	bl	8003236 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0320 	and.w	r3, r3, #32
 800302e:	2b20      	cmp	r3, #32
 8003030:	d10e      	bne.n	8003050 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b20      	cmp	r3, #32
 800303e:	d107      	bne.n	8003050 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0220 	mvn.w	r2, #32
 8003048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fab4 	bl	80035b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003050:	bf00      	nop
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_TIM_ConfigClockSource+0x1c>
 8003070:	2302      	movs	r3, #2
 8003072:	e0b4      	b.n	80031de <HAL_TIM_ConfigClockSource+0x186>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800309a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ac:	d03e      	beq.n	800312c <HAL_TIM_ConfigClockSource+0xd4>
 80030ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b2:	f200 8087 	bhi.w	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ba:	f000 8086 	beq.w	80031ca <HAL_TIM_ConfigClockSource+0x172>
 80030be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c2:	d87f      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030c4:	2b70      	cmp	r3, #112	; 0x70
 80030c6:	d01a      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0xa6>
 80030c8:	2b70      	cmp	r3, #112	; 0x70
 80030ca:	d87b      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030cc:	2b60      	cmp	r3, #96	; 0x60
 80030ce:	d050      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0x11a>
 80030d0:	2b60      	cmp	r3, #96	; 0x60
 80030d2:	d877      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030d4:	2b50      	cmp	r3, #80	; 0x50
 80030d6:	d03c      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0xfa>
 80030d8:	2b50      	cmp	r3, #80	; 0x50
 80030da:	d873      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030dc:	2b40      	cmp	r3, #64	; 0x40
 80030de:	d058      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x13a>
 80030e0:	2b40      	cmp	r3, #64	; 0x40
 80030e2:	d86f      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030e4:	2b30      	cmp	r3, #48	; 0x30
 80030e6:	d064      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x15a>
 80030e8:	2b30      	cmp	r3, #48	; 0x30
 80030ea:	d86b      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d060      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x15a>
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d867      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d05c      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x15a>
 80030f8:	2b10      	cmp	r3, #16
 80030fa:	d05a      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x15a>
 80030fc:	e062      	b.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	6899      	ldr	r1, [r3, #8]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f000 f9b7 	bl	8003480 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003120:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	609a      	str	r2, [r3, #8]
      break;
 800312a:	e04f      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6899      	ldr	r1, [r3, #8]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f000 f9a0 	bl	8003480 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800314e:	609a      	str	r2, [r3, #8]
      break;
 8003150:	e03c      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	6859      	ldr	r1, [r3, #4]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	461a      	mov	r2, r3
 8003160:	f000 f914 	bl	800338c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2150      	movs	r1, #80	; 0x50
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f96d 	bl	800344a <TIM_ITRx_SetConfig>
      break;
 8003170:	e02c      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	6859      	ldr	r1, [r3, #4]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	461a      	mov	r2, r3
 8003180:	f000 f933 	bl	80033ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2160      	movs	r1, #96	; 0x60
 800318a:	4618      	mov	r0, r3
 800318c:	f000 f95d 	bl	800344a <TIM_ITRx_SetConfig>
      break;
 8003190:	e01c      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6859      	ldr	r1, [r3, #4]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	461a      	mov	r2, r3
 80031a0:	f000 f8f4 	bl	800338c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2140      	movs	r1, #64	; 0x40
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 f94d 	bl	800344a <TIM_ITRx_SetConfig>
      break;
 80031b0:	e00c      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4619      	mov	r1, r3
 80031bc:	4610      	mov	r0, r2
 80031be:	f000 f944 	bl	800344a <TIM_ITRx_SetConfig>
      break;
 80031c2:	e003      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
      break;
 80031c8:	e000      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a40      	ldr	r2, [pc, #256]	; (8003360 <TIM_Base_SetConfig+0x114>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d013      	beq.n	800328c <TIM_Base_SetConfig+0x40>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326a:	d00f      	beq.n	800328c <TIM_Base_SetConfig+0x40>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a3d      	ldr	r2, [pc, #244]	; (8003364 <TIM_Base_SetConfig+0x118>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00b      	beq.n	800328c <TIM_Base_SetConfig+0x40>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a3c      	ldr	r2, [pc, #240]	; (8003368 <TIM_Base_SetConfig+0x11c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d007      	beq.n	800328c <TIM_Base_SetConfig+0x40>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a3b      	ldr	r2, [pc, #236]	; (800336c <TIM_Base_SetConfig+0x120>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d003      	beq.n	800328c <TIM_Base_SetConfig+0x40>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a3a      	ldr	r2, [pc, #232]	; (8003370 <TIM_Base_SetConfig+0x124>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d108      	bne.n	800329e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a2f      	ldr	r2, [pc, #188]	; (8003360 <TIM_Base_SetConfig+0x114>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d02b      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ac:	d027      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a2c      	ldr	r2, [pc, #176]	; (8003364 <TIM_Base_SetConfig+0x118>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d023      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a2b      	ldr	r2, [pc, #172]	; (8003368 <TIM_Base_SetConfig+0x11c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d01f      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a2a      	ldr	r2, [pc, #168]	; (800336c <TIM_Base_SetConfig+0x120>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d01b      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a29      	ldr	r2, [pc, #164]	; (8003370 <TIM_Base_SetConfig+0x124>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d017      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a28      	ldr	r2, [pc, #160]	; (8003374 <TIM_Base_SetConfig+0x128>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d013      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a27      	ldr	r2, [pc, #156]	; (8003378 <TIM_Base_SetConfig+0x12c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00f      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a26      	ldr	r2, [pc, #152]	; (800337c <TIM_Base_SetConfig+0x130>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00b      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a25      	ldr	r2, [pc, #148]	; (8003380 <TIM_Base_SetConfig+0x134>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d007      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a24      	ldr	r2, [pc, #144]	; (8003384 <TIM_Base_SetConfig+0x138>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d003      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a23      	ldr	r2, [pc, #140]	; (8003388 <TIM_Base_SetConfig+0x13c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d108      	bne.n	8003310 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4313      	orrs	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <TIM_Base_SetConfig+0x114>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d003      	beq.n	8003344 <TIM_Base_SetConfig+0xf8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a0c      	ldr	r2, [pc, #48]	; (8003370 <TIM_Base_SetConfig+0x124>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d103      	bne.n	800334c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	615a      	str	r2, [r3, #20]
}
 8003352:	bf00      	nop
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40010000 	.word	0x40010000
 8003364:	40000400 	.word	0x40000400
 8003368:	40000800 	.word	0x40000800
 800336c:	40000c00 	.word	0x40000c00
 8003370:	40010400 	.word	0x40010400
 8003374:	40014000 	.word	0x40014000
 8003378:	40014400 	.word	0x40014400
 800337c:	40014800 	.word	0x40014800
 8003380:	40001800 	.word	0x40001800
 8003384:	40001c00 	.word	0x40001c00
 8003388:	40002000 	.word	0x40002000

0800338c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800338c:	b480      	push	{r7}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	f023 0201 	bic.w	r2, r3, #1
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f023 030a 	bic.w	r3, r3, #10
 80033c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	621a      	str	r2, [r3, #32]
}
 80033de:	bf00      	nop
 80033e0:	371c      	adds	r7, #28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b087      	sub	sp, #28
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	f023 0210 	bic.w	r2, r3, #16
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003414:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	031b      	lsls	r3, r3, #12
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	4313      	orrs	r3, r2
 800341e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003426:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	621a      	str	r2, [r3, #32]
}
 800343e:	bf00      	nop
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800344a:	b480      	push	{r7}
 800344c:	b085      	sub	sp, #20
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003460:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	f043 0307 	orr.w	r3, r3, #7
 800346c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	609a      	str	r2, [r3, #8]
}
 8003474:	bf00      	nop
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800349a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	021a      	lsls	r2, r3, #8
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	609a      	str	r2, [r3, #8]
}
 80034b4:	bf00      	nop
 80034b6:	371c      	adds	r7, #28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e05a      	b.n	800358e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a21      	ldr	r2, [pc, #132]	; (800359c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d022      	beq.n	8003562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003524:	d01d      	beq.n	8003562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1d      	ldr	r2, [pc, #116]	; (80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d018      	beq.n	8003562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1b      	ldr	r2, [pc, #108]	; (80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d013      	beq.n	8003562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1a      	ldr	r2, [pc, #104]	; (80035a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00e      	beq.n	8003562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a18      	ldr	r2, [pc, #96]	; (80035ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d009      	beq.n	8003562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a17      	ldr	r2, [pc, #92]	; (80035b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d004      	beq.n	8003562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a15      	ldr	r2, [pc, #84]	; (80035b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d10c      	bne.n	800357c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003568:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	4313      	orrs	r3, r2
 8003572:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40010000 	.word	0x40010000
 80035a0:	40000400 	.word	0x40000400
 80035a4:	40000800 	.word	0x40000800
 80035a8:	40000c00 	.word	0x40000c00
 80035ac:	40010400 	.word	0x40010400
 80035b0:	40014000 	.word	0x40014000
 80035b4:	40001800 	.word	0x40001800

080035b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e03f      	b.n	8003672 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d106      	bne.n	800360c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fd fe8e 	bl	8001328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2224      	movs	r2, #36	; 0x24
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003622:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f9cb 	bl	80039c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003638:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695a      	ldr	r2, [r3, #20]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003648:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003658:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b08a      	sub	sp, #40	; 0x28
 800367e:	af02      	add	r7, sp, #8
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	603b      	str	r3, [r7, #0]
 8003686:	4613      	mov	r3, r2
 8003688:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b20      	cmp	r3, #32
 8003698:	d17c      	bne.n	8003794 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <HAL_UART_Transmit+0x2c>
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e075      	b.n	8003796 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_UART_Transmit+0x3e>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e06e      	b.n	8003796 <HAL_UART_Transmit+0x11c>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2221      	movs	r2, #33	; 0x21
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ce:	f7fd ffc9 	bl	8001664 <HAL_GetTick>
 80036d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	88fa      	ldrh	r2, [r7, #6]
 80036d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	88fa      	ldrh	r2, [r7, #6]
 80036de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e8:	d108      	bne.n	80036fc <HAL_UART_Transmit+0x82>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d104      	bne.n	80036fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	61bb      	str	r3, [r7, #24]
 80036fa:	e003      	b.n	8003704 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003700:	2300      	movs	r3, #0
 8003702:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800370c:	e02a      	b.n	8003764 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2200      	movs	r2, #0
 8003716:	2180      	movs	r1, #128	; 0x80
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f8e2 	bl	80038e2 <UART_WaitOnFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e036      	b.n	8003796 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10b      	bne.n	8003746 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800373c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	3302      	adds	r3, #2
 8003742:	61bb      	str	r3, [r7, #24]
 8003744:	e007      	b.n	8003756 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	3301      	adds	r3, #1
 8003754:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800375a:	b29b      	uxth	r3, r3
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1cf      	bne.n	800370e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2200      	movs	r2, #0
 8003776:	2140      	movs	r1, #64	; 0x40
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f8b2 	bl	80038e2 <UART_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e006      	b.n	8003796 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	e000      	b.n	8003796 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003794:	2302      	movs	r3, #2
  }
}
 8003796:	4618      	mov	r0, r3
 8003798:	3720      	adds	r7, #32
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b08a      	sub	sp, #40	; 0x28
 80037a2:	af02      	add	r7, sp, #8
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	603b      	str	r3, [r7, #0]
 80037aa:	4613      	mov	r3, r2
 80037ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	f040 808c 	bne.w	80038d8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_UART_Receive+0x2e>
 80037c6:	88fb      	ldrh	r3, [r7, #6]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e084      	b.n	80038da <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_UART_Receive+0x40>
 80037da:	2302      	movs	r3, #2
 80037dc:	e07d      	b.n	80038da <HAL_UART_Receive+0x13c>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2222      	movs	r2, #34	; 0x22
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037fa:	f7fd ff33 	bl	8001664 <HAL_GetTick>
 80037fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	88fa      	ldrh	r2, [r7, #6]
 8003804:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	88fa      	ldrh	r2, [r7, #6]
 800380a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003814:	d108      	bne.n	8003828 <HAL_UART_Receive+0x8a>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d104      	bne.n	8003828 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	e003      	b.n	8003830 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800382c:	2300      	movs	r3, #0
 800382e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003838:	e043      	b.n	80038c2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2200      	movs	r2, #0
 8003842:	2120      	movs	r1, #32
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 f84c 	bl	80038e2 <UART_WaitOnFlagUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e042      	b.n	80038da <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10c      	bne.n	8003874 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	b29b      	uxth	r3, r3
 8003862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003866:	b29a      	uxth	r2, r3
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	3302      	adds	r3, #2
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	e01f      	b.n	80038b4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387c:	d007      	beq.n	800388e <HAL_UART_Receive+0xf0>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10a      	bne.n	800389c <HAL_UART_Receive+0xfe>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	b2da      	uxtb	r2, r3
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	e008      	b.n	80038ae <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	3301      	adds	r3, #1
 80038b2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1b6      	bne.n	800383a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	e000      	b.n	80038da <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80038d8:	2302      	movs	r3, #2
  }
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3720      	adds	r7, #32
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b090      	sub	sp, #64	; 0x40
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	603b      	str	r3, [r7, #0]
 80038ee:	4613      	mov	r3, r2
 80038f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f2:	e050      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fa:	d04c      	beq.n	8003996 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d007      	beq.n	8003912 <UART_WaitOnFlagUntilTimeout+0x30>
 8003902:	f7fd feaf 	bl	8001664 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800390e:	429a      	cmp	r2, r3
 8003910:	d241      	bcs.n	8003996 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	330c      	adds	r3, #12
 8003918:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	e853 3f00 	ldrex	r3, [r3]
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	330c      	adds	r3, #12
 8003930:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003932:	637a      	str	r2, [r7, #52]	; 0x34
 8003934:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003936:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003938:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800393a:	e841 2300 	strex	r3, r2, [r1]
 800393e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1e5      	bne.n	8003912 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3314      	adds	r3, #20
 800394c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	e853 3f00 	ldrex	r3, [r3]
 8003954:	613b      	str	r3, [r7, #16]
   return(result);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f023 0301 	bic.w	r3, r3, #1
 800395c:	63bb      	str	r3, [r7, #56]	; 0x38
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3314      	adds	r3, #20
 8003964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003966:	623a      	str	r2, [r7, #32]
 8003968:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396a:	69f9      	ldr	r1, [r7, #28]
 800396c:	6a3a      	ldr	r2, [r7, #32]
 800396e:	e841 2300 	strex	r3, r2, [r1]
 8003972:	61bb      	str	r3, [r7, #24]
   return(result);
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1e5      	bne.n	8003946 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e00f      	b.n	80039b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4013      	ands	r3, r2
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	bf0c      	ite	eq
 80039a6:	2301      	moveq	r3, #1
 80039a8:	2300      	movne	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d09f      	beq.n	80038f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3740      	adds	r7, #64	; 0x40
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c4:	b09f      	sub	sp, #124	; 0x7c
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d6:	68d9      	ldr	r1, [r3, #12]
 80039d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	ea40 0301 	orr.w	r3, r0, r1
 80039e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	431a      	orrs	r2, r3
 80039f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80039fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a04:	f021 010c 	bic.w	r1, r1, #12
 8003a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1e:	6999      	ldr	r1, [r3, #24]
 8003a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	ea40 0301 	orr.w	r3, r0, r1
 8003a28:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	4bc5      	ldr	r3, [pc, #788]	; (8003d44 <UART_SetConfig+0x384>)
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d004      	beq.n	8003a3e <UART_SetConfig+0x7e>
 8003a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	4bc3      	ldr	r3, [pc, #780]	; (8003d48 <UART_SetConfig+0x388>)
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d103      	bne.n	8003a46 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a3e:	f7ff f92f 	bl	8002ca0 <HAL_RCC_GetPCLK2Freq>
 8003a42:	6778      	str	r0, [r7, #116]	; 0x74
 8003a44:	e002      	b.n	8003a4c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a46:	f7ff f917 	bl	8002c78 <HAL_RCC_GetPCLK1Freq>
 8003a4a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a54:	f040 80b6 	bne.w	8003bc4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a5a:	461c      	mov	r4, r3
 8003a5c:	f04f 0500 	mov.w	r5, #0
 8003a60:	4622      	mov	r2, r4
 8003a62:	462b      	mov	r3, r5
 8003a64:	1891      	adds	r1, r2, r2
 8003a66:	6439      	str	r1, [r7, #64]	; 0x40
 8003a68:	415b      	adcs	r3, r3
 8003a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a70:	1912      	adds	r2, r2, r4
 8003a72:	eb45 0303 	adc.w	r3, r5, r3
 8003a76:	f04f 0000 	mov.w	r0, #0
 8003a7a:	f04f 0100 	mov.w	r1, #0
 8003a7e:	00d9      	lsls	r1, r3, #3
 8003a80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a84:	00d0      	lsls	r0, r2, #3
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	1911      	adds	r1, r2, r4
 8003a8c:	6639      	str	r1, [r7, #96]	; 0x60
 8003a8e:	416b      	adcs	r3, r5
 8003a90:	667b      	str	r3, [r7, #100]	; 0x64
 8003a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	461a      	mov	r2, r3
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	1891      	adds	r1, r2, r2
 8003a9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003aa0:	415b      	adcs	r3, r3
 8003aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003aa8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003aac:	f7fc ff1e 	bl	80008ec <__aeabi_uldivmod>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4ba5      	ldr	r3, [pc, #660]	; (8003d4c <UART_SetConfig+0x38c>)
 8003ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	011e      	lsls	r6, r3, #4
 8003abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ac0:	461c      	mov	r4, r3
 8003ac2:	f04f 0500 	mov.w	r5, #0
 8003ac6:	4622      	mov	r2, r4
 8003ac8:	462b      	mov	r3, r5
 8003aca:	1891      	adds	r1, r2, r2
 8003acc:	6339      	str	r1, [r7, #48]	; 0x30
 8003ace:	415b      	adcs	r3, r3
 8003ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ad6:	1912      	adds	r2, r2, r4
 8003ad8:	eb45 0303 	adc.w	r3, r5, r3
 8003adc:	f04f 0000 	mov.w	r0, #0
 8003ae0:	f04f 0100 	mov.w	r1, #0
 8003ae4:	00d9      	lsls	r1, r3, #3
 8003ae6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003aea:	00d0      	lsls	r0, r2, #3
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	1911      	adds	r1, r2, r4
 8003af2:	65b9      	str	r1, [r7, #88]	; 0x58
 8003af4:	416b      	adcs	r3, r5
 8003af6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	461a      	mov	r2, r3
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	1891      	adds	r1, r2, r2
 8003b04:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b06:	415b      	adcs	r3, r3
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b0e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b12:	f7fc feeb 	bl	80008ec <__aeabi_uldivmod>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4b8c      	ldr	r3, [pc, #560]	; (8003d4c <UART_SetConfig+0x38c>)
 8003b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	2164      	movs	r1, #100	; 0x64
 8003b24:	fb01 f303 	mul.w	r3, r1, r3
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	3332      	adds	r3, #50	; 0x32
 8003b2e:	4a87      	ldr	r2, [pc, #540]	; (8003d4c <UART_SetConfig+0x38c>)
 8003b30:	fba2 2303 	umull	r2, r3, r2, r3
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b3c:	441e      	add	r6, r3
 8003b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b40:	4618      	mov	r0, r3
 8003b42:	f04f 0100 	mov.w	r1, #0
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	1894      	adds	r4, r2, r2
 8003b4c:	623c      	str	r4, [r7, #32]
 8003b4e:	415b      	adcs	r3, r3
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
 8003b52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b56:	1812      	adds	r2, r2, r0
 8003b58:	eb41 0303 	adc.w	r3, r1, r3
 8003b5c:	f04f 0400 	mov.w	r4, #0
 8003b60:	f04f 0500 	mov.w	r5, #0
 8003b64:	00dd      	lsls	r5, r3, #3
 8003b66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b6a:	00d4      	lsls	r4, r2, #3
 8003b6c:	4622      	mov	r2, r4
 8003b6e:	462b      	mov	r3, r5
 8003b70:	1814      	adds	r4, r2, r0
 8003b72:	653c      	str	r4, [r7, #80]	; 0x50
 8003b74:	414b      	adcs	r3, r1
 8003b76:	657b      	str	r3, [r7, #84]	; 0x54
 8003b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	1891      	adds	r1, r2, r2
 8003b84:	61b9      	str	r1, [r7, #24]
 8003b86:	415b      	adcs	r3, r3
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b8e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b92:	f7fc feab 	bl	80008ec <__aeabi_uldivmod>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4b6c      	ldr	r3, [pc, #432]	; (8003d4c <UART_SetConfig+0x38c>)
 8003b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba0:	095b      	lsrs	r3, r3, #5
 8003ba2:	2164      	movs	r1, #100	; 0x64
 8003ba4:	fb01 f303 	mul.w	r3, r1, r3
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	3332      	adds	r3, #50	; 0x32
 8003bae:	4a67      	ldr	r2, [pc, #412]	; (8003d4c <UART_SetConfig+0x38c>)
 8003bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	f003 0207 	and.w	r2, r3, #7
 8003bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4432      	add	r2, r6
 8003bc0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bc2:	e0b9      	b.n	8003d38 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bc6:	461c      	mov	r4, r3
 8003bc8:	f04f 0500 	mov.w	r5, #0
 8003bcc:	4622      	mov	r2, r4
 8003bce:	462b      	mov	r3, r5
 8003bd0:	1891      	adds	r1, r2, r2
 8003bd2:	6139      	str	r1, [r7, #16]
 8003bd4:	415b      	adcs	r3, r3
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003bdc:	1912      	adds	r2, r2, r4
 8003bde:	eb45 0303 	adc.w	r3, r5, r3
 8003be2:	f04f 0000 	mov.w	r0, #0
 8003be6:	f04f 0100 	mov.w	r1, #0
 8003bea:	00d9      	lsls	r1, r3, #3
 8003bec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bf0:	00d0      	lsls	r0, r2, #3
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	eb12 0804 	adds.w	r8, r2, r4
 8003bfa:	eb43 0905 	adc.w	r9, r3, r5
 8003bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f04f 0100 	mov.w	r1, #0
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	008b      	lsls	r3, r1, #2
 8003c12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c16:	0082      	lsls	r2, r0, #2
 8003c18:	4640      	mov	r0, r8
 8003c1a:	4649      	mov	r1, r9
 8003c1c:	f7fc fe66 	bl	80008ec <__aeabi_uldivmod>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4b49      	ldr	r3, [pc, #292]	; (8003d4c <UART_SetConfig+0x38c>)
 8003c26:	fba3 2302 	umull	r2, r3, r3, r2
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	011e      	lsls	r6, r3, #4
 8003c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c30:	4618      	mov	r0, r3
 8003c32:	f04f 0100 	mov.w	r1, #0
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	1894      	adds	r4, r2, r2
 8003c3c:	60bc      	str	r4, [r7, #8]
 8003c3e:	415b      	adcs	r3, r3
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c46:	1812      	adds	r2, r2, r0
 8003c48:	eb41 0303 	adc.w	r3, r1, r3
 8003c4c:	f04f 0400 	mov.w	r4, #0
 8003c50:	f04f 0500 	mov.w	r5, #0
 8003c54:	00dd      	lsls	r5, r3, #3
 8003c56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c5a:	00d4      	lsls	r4, r2, #3
 8003c5c:	4622      	mov	r2, r4
 8003c5e:	462b      	mov	r3, r5
 8003c60:	1814      	adds	r4, r2, r0
 8003c62:	64bc      	str	r4, [r7, #72]	; 0x48
 8003c64:	414b      	adcs	r3, r1
 8003c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f04f 0100 	mov.w	r1, #0
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	008b      	lsls	r3, r1, #2
 8003c7c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c80:	0082      	lsls	r2, r0, #2
 8003c82:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003c86:	f7fc fe31 	bl	80008ec <__aeabi_uldivmod>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4b2f      	ldr	r3, [pc, #188]	; (8003d4c <UART_SetConfig+0x38c>)
 8003c90:	fba3 1302 	umull	r1, r3, r3, r2
 8003c94:	095b      	lsrs	r3, r3, #5
 8003c96:	2164      	movs	r1, #100	; 0x64
 8003c98:	fb01 f303 	mul.w	r3, r1, r3
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	3332      	adds	r3, #50	; 0x32
 8003ca2:	4a2a      	ldr	r2, [pc, #168]	; (8003d4c <UART_SetConfig+0x38c>)
 8003ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca8:	095b      	lsrs	r3, r3, #5
 8003caa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cae:	441e      	add	r6, r3
 8003cb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f04f 0100 	mov.w	r1, #0
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	1894      	adds	r4, r2, r2
 8003cbe:	603c      	str	r4, [r7, #0]
 8003cc0:	415b      	adcs	r3, r3
 8003cc2:	607b      	str	r3, [r7, #4]
 8003cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cc8:	1812      	adds	r2, r2, r0
 8003cca:	eb41 0303 	adc.w	r3, r1, r3
 8003cce:	f04f 0400 	mov.w	r4, #0
 8003cd2:	f04f 0500 	mov.w	r5, #0
 8003cd6:	00dd      	lsls	r5, r3, #3
 8003cd8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cdc:	00d4      	lsls	r4, r2, #3
 8003cde:	4622      	mov	r2, r4
 8003ce0:	462b      	mov	r3, r5
 8003ce2:	eb12 0a00 	adds.w	sl, r2, r0
 8003ce6:	eb43 0b01 	adc.w	fp, r3, r1
 8003cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f04f 0100 	mov.w	r1, #0
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	008b      	lsls	r3, r1, #2
 8003cfe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d02:	0082      	lsls	r2, r0, #2
 8003d04:	4650      	mov	r0, sl
 8003d06:	4659      	mov	r1, fp
 8003d08:	f7fc fdf0 	bl	80008ec <__aeabi_uldivmod>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <UART_SetConfig+0x38c>)
 8003d12:	fba3 1302 	umull	r1, r3, r3, r2
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	2164      	movs	r1, #100	; 0x64
 8003d1a:	fb01 f303 	mul.w	r3, r1, r3
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	3332      	adds	r3, #50	; 0x32
 8003d24:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <UART_SetConfig+0x38c>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	095b      	lsrs	r3, r3, #5
 8003d2c:	f003 020f 	and.w	r2, r3, #15
 8003d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4432      	add	r2, r6
 8003d36:	609a      	str	r2, [r3, #8]
}
 8003d38:	bf00      	nop
 8003d3a:	377c      	adds	r7, #124	; 0x7c
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d42:	bf00      	nop
 8003d44:	40011000 	.word	0x40011000
 8003d48:	40011400 	.word	0x40011400
 8003d4c:	51eb851f 	.word	0x51eb851f

08003d50 <__errno>:
 8003d50:	4b01      	ldr	r3, [pc, #4]	; (8003d58 <__errno+0x8>)
 8003d52:	6818      	ldr	r0, [r3, #0]
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	2000000c 	.word	0x2000000c

08003d5c <__libc_init_array>:
 8003d5c:	b570      	push	{r4, r5, r6, lr}
 8003d5e:	4d0d      	ldr	r5, [pc, #52]	; (8003d94 <__libc_init_array+0x38>)
 8003d60:	4c0d      	ldr	r4, [pc, #52]	; (8003d98 <__libc_init_array+0x3c>)
 8003d62:	1b64      	subs	r4, r4, r5
 8003d64:	10a4      	asrs	r4, r4, #2
 8003d66:	2600      	movs	r6, #0
 8003d68:	42a6      	cmp	r6, r4
 8003d6a:	d109      	bne.n	8003d80 <__libc_init_array+0x24>
 8003d6c:	4d0b      	ldr	r5, [pc, #44]	; (8003d9c <__libc_init_array+0x40>)
 8003d6e:	4c0c      	ldr	r4, [pc, #48]	; (8003da0 <__libc_init_array+0x44>)
 8003d70:	f000 fc4e 	bl	8004610 <_init>
 8003d74:	1b64      	subs	r4, r4, r5
 8003d76:	10a4      	asrs	r4, r4, #2
 8003d78:	2600      	movs	r6, #0
 8003d7a:	42a6      	cmp	r6, r4
 8003d7c:	d105      	bne.n	8003d8a <__libc_init_array+0x2e>
 8003d7e:	bd70      	pop	{r4, r5, r6, pc}
 8003d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d84:	4798      	blx	r3
 8003d86:	3601      	adds	r6, #1
 8003d88:	e7ee      	b.n	8003d68 <__libc_init_array+0xc>
 8003d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d8e:	4798      	blx	r3
 8003d90:	3601      	adds	r6, #1
 8003d92:	e7f2      	b.n	8003d7a <__libc_init_array+0x1e>
 8003d94:	08004728 	.word	0x08004728
 8003d98:	08004728 	.word	0x08004728
 8003d9c:	08004728 	.word	0x08004728
 8003da0:	0800472c 	.word	0x0800472c

08003da4 <memset>:
 8003da4:	4402      	add	r2, r0
 8003da6:	4603      	mov	r3, r0
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d100      	bne.n	8003dae <memset+0xa>
 8003dac:	4770      	bx	lr
 8003dae:	f803 1b01 	strb.w	r1, [r3], #1
 8003db2:	e7f9      	b.n	8003da8 <memset+0x4>

08003db4 <siprintf>:
 8003db4:	b40e      	push	{r1, r2, r3}
 8003db6:	b500      	push	{lr}
 8003db8:	b09c      	sub	sp, #112	; 0x70
 8003dba:	ab1d      	add	r3, sp, #116	; 0x74
 8003dbc:	9002      	str	r0, [sp, #8]
 8003dbe:	9006      	str	r0, [sp, #24]
 8003dc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dc4:	4809      	ldr	r0, [pc, #36]	; (8003dec <siprintf+0x38>)
 8003dc6:	9107      	str	r1, [sp, #28]
 8003dc8:	9104      	str	r1, [sp, #16]
 8003dca:	4909      	ldr	r1, [pc, #36]	; (8003df0 <siprintf+0x3c>)
 8003dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dd0:	9105      	str	r1, [sp, #20]
 8003dd2:	6800      	ldr	r0, [r0, #0]
 8003dd4:	9301      	str	r3, [sp, #4]
 8003dd6:	a902      	add	r1, sp, #8
 8003dd8:	f000 f868 	bl	8003eac <_svfiprintf_r>
 8003ddc:	9b02      	ldr	r3, [sp, #8]
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]
 8003de2:	b01c      	add	sp, #112	; 0x70
 8003de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003de8:	b003      	add	sp, #12
 8003dea:	4770      	bx	lr
 8003dec:	2000000c 	.word	0x2000000c
 8003df0:	ffff0208 	.word	0xffff0208

08003df4 <__ssputs_r>:
 8003df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003df8:	688e      	ldr	r6, [r1, #8]
 8003dfa:	429e      	cmp	r6, r3
 8003dfc:	4682      	mov	sl, r0
 8003dfe:	460c      	mov	r4, r1
 8003e00:	4690      	mov	r8, r2
 8003e02:	461f      	mov	r7, r3
 8003e04:	d838      	bhi.n	8003e78 <__ssputs_r+0x84>
 8003e06:	898a      	ldrh	r2, [r1, #12]
 8003e08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e0c:	d032      	beq.n	8003e74 <__ssputs_r+0x80>
 8003e0e:	6825      	ldr	r5, [r4, #0]
 8003e10:	6909      	ldr	r1, [r1, #16]
 8003e12:	eba5 0901 	sub.w	r9, r5, r1
 8003e16:	6965      	ldr	r5, [r4, #20]
 8003e18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e20:	3301      	adds	r3, #1
 8003e22:	444b      	add	r3, r9
 8003e24:	106d      	asrs	r5, r5, #1
 8003e26:	429d      	cmp	r5, r3
 8003e28:	bf38      	it	cc
 8003e2a:	461d      	movcc	r5, r3
 8003e2c:	0553      	lsls	r3, r2, #21
 8003e2e:	d531      	bpl.n	8003e94 <__ssputs_r+0xa0>
 8003e30:	4629      	mov	r1, r5
 8003e32:	f000 fb47 	bl	80044c4 <_malloc_r>
 8003e36:	4606      	mov	r6, r0
 8003e38:	b950      	cbnz	r0, 8003e50 <__ssputs_r+0x5c>
 8003e3a:	230c      	movs	r3, #12
 8003e3c:	f8ca 3000 	str.w	r3, [sl]
 8003e40:	89a3      	ldrh	r3, [r4, #12]
 8003e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e46:	81a3      	strh	r3, [r4, #12]
 8003e48:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e50:	6921      	ldr	r1, [r4, #16]
 8003e52:	464a      	mov	r2, r9
 8003e54:	f000 fabe 	bl	80043d4 <memcpy>
 8003e58:	89a3      	ldrh	r3, [r4, #12]
 8003e5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e62:	81a3      	strh	r3, [r4, #12]
 8003e64:	6126      	str	r6, [r4, #16]
 8003e66:	6165      	str	r5, [r4, #20]
 8003e68:	444e      	add	r6, r9
 8003e6a:	eba5 0509 	sub.w	r5, r5, r9
 8003e6e:	6026      	str	r6, [r4, #0]
 8003e70:	60a5      	str	r5, [r4, #8]
 8003e72:	463e      	mov	r6, r7
 8003e74:	42be      	cmp	r6, r7
 8003e76:	d900      	bls.n	8003e7a <__ssputs_r+0x86>
 8003e78:	463e      	mov	r6, r7
 8003e7a:	4632      	mov	r2, r6
 8003e7c:	6820      	ldr	r0, [r4, #0]
 8003e7e:	4641      	mov	r1, r8
 8003e80:	f000 fab6 	bl	80043f0 <memmove>
 8003e84:	68a3      	ldr	r3, [r4, #8]
 8003e86:	6822      	ldr	r2, [r4, #0]
 8003e88:	1b9b      	subs	r3, r3, r6
 8003e8a:	4432      	add	r2, r6
 8003e8c:	60a3      	str	r3, [r4, #8]
 8003e8e:	6022      	str	r2, [r4, #0]
 8003e90:	2000      	movs	r0, #0
 8003e92:	e7db      	b.n	8003e4c <__ssputs_r+0x58>
 8003e94:	462a      	mov	r2, r5
 8003e96:	f000 fb6f 	bl	8004578 <_realloc_r>
 8003e9a:	4606      	mov	r6, r0
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	d1e1      	bne.n	8003e64 <__ssputs_r+0x70>
 8003ea0:	6921      	ldr	r1, [r4, #16]
 8003ea2:	4650      	mov	r0, sl
 8003ea4:	f000 fabe 	bl	8004424 <_free_r>
 8003ea8:	e7c7      	b.n	8003e3a <__ssputs_r+0x46>
	...

08003eac <_svfiprintf_r>:
 8003eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb0:	4698      	mov	r8, r3
 8003eb2:	898b      	ldrh	r3, [r1, #12]
 8003eb4:	061b      	lsls	r3, r3, #24
 8003eb6:	b09d      	sub	sp, #116	; 0x74
 8003eb8:	4607      	mov	r7, r0
 8003eba:	460d      	mov	r5, r1
 8003ebc:	4614      	mov	r4, r2
 8003ebe:	d50e      	bpl.n	8003ede <_svfiprintf_r+0x32>
 8003ec0:	690b      	ldr	r3, [r1, #16]
 8003ec2:	b963      	cbnz	r3, 8003ede <_svfiprintf_r+0x32>
 8003ec4:	2140      	movs	r1, #64	; 0x40
 8003ec6:	f000 fafd 	bl	80044c4 <_malloc_r>
 8003eca:	6028      	str	r0, [r5, #0]
 8003ecc:	6128      	str	r0, [r5, #16]
 8003ece:	b920      	cbnz	r0, 8003eda <_svfiprintf_r+0x2e>
 8003ed0:	230c      	movs	r3, #12
 8003ed2:	603b      	str	r3, [r7, #0]
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed8:	e0d1      	b.n	800407e <_svfiprintf_r+0x1d2>
 8003eda:	2340      	movs	r3, #64	; 0x40
 8003edc:	616b      	str	r3, [r5, #20]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ee2:	2320      	movs	r3, #32
 8003ee4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ee8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003eec:	2330      	movs	r3, #48	; 0x30
 8003eee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004098 <_svfiprintf_r+0x1ec>
 8003ef2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ef6:	f04f 0901 	mov.w	r9, #1
 8003efa:	4623      	mov	r3, r4
 8003efc:	469a      	mov	sl, r3
 8003efe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f02:	b10a      	cbz	r2, 8003f08 <_svfiprintf_r+0x5c>
 8003f04:	2a25      	cmp	r2, #37	; 0x25
 8003f06:	d1f9      	bne.n	8003efc <_svfiprintf_r+0x50>
 8003f08:	ebba 0b04 	subs.w	fp, sl, r4
 8003f0c:	d00b      	beq.n	8003f26 <_svfiprintf_r+0x7a>
 8003f0e:	465b      	mov	r3, fp
 8003f10:	4622      	mov	r2, r4
 8003f12:	4629      	mov	r1, r5
 8003f14:	4638      	mov	r0, r7
 8003f16:	f7ff ff6d 	bl	8003df4 <__ssputs_r>
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	f000 80aa 	beq.w	8004074 <_svfiprintf_r+0x1c8>
 8003f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f22:	445a      	add	r2, fp
 8003f24:	9209      	str	r2, [sp, #36]	; 0x24
 8003f26:	f89a 3000 	ldrb.w	r3, [sl]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 80a2 	beq.w	8004074 <_svfiprintf_r+0x1c8>
 8003f30:	2300      	movs	r3, #0
 8003f32:	f04f 32ff 	mov.w	r2, #4294967295
 8003f36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f3a:	f10a 0a01 	add.w	sl, sl, #1
 8003f3e:	9304      	str	r3, [sp, #16]
 8003f40:	9307      	str	r3, [sp, #28]
 8003f42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f46:	931a      	str	r3, [sp, #104]	; 0x68
 8003f48:	4654      	mov	r4, sl
 8003f4a:	2205      	movs	r2, #5
 8003f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f50:	4851      	ldr	r0, [pc, #324]	; (8004098 <_svfiprintf_r+0x1ec>)
 8003f52:	f7fc f945 	bl	80001e0 <memchr>
 8003f56:	9a04      	ldr	r2, [sp, #16]
 8003f58:	b9d8      	cbnz	r0, 8003f92 <_svfiprintf_r+0xe6>
 8003f5a:	06d0      	lsls	r0, r2, #27
 8003f5c:	bf44      	itt	mi
 8003f5e:	2320      	movmi	r3, #32
 8003f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f64:	0711      	lsls	r1, r2, #28
 8003f66:	bf44      	itt	mi
 8003f68:	232b      	movmi	r3, #43	; 0x2b
 8003f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f72:	2b2a      	cmp	r3, #42	; 0x2a
 8003f74:	d015      	beq.n	8003fa2 <_svfiprintf_r+0xf6>
 8003f76:	9a07      	ldr	r2, [sp, #28]
 8003f78:	4654      	mov	r4, sl
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	f04f 0c0a 	mov.w	ip, #10
 8003f80:	4621      	mov	r1, r4
 8003f82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f86:	3b30      	subs	r3, #48	; 0x30
 8003f88:	2b09      	cmp	r3, #9
 8003f8a:	d94e      	bls.n	800402a <_svfiprintf_r+0x17e>
 8003f8c:	b1b0      	cbz	r0, 8003fbc <_svfiprintf_r+0x110>
 8003f8e:	9207      	str	r2, [sp, #28]
 8003f90:	e014      	b.n	8003fbc <_svfiprintf_r+0x110>
 8003f92:	eba0 0308 	sub.w	r3, r0, r8
 8003f96:	fa09 f303 	lsl.w	r3, r9, r3
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	9304      	str	r3, [sp, #16]
 8003f9e:	46a2      	mov	sl, r4
 8003fa0:	e7d2      	b.n	8003f48 <_svfiprintf_r+0x9c>
 8003fa2:	9b03      	ldr	r3, [sp, #12]
 8003fa4:	1d19      	adds	r1, r3, #4
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	9103      	str	r1, [sp, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	bfbb      	ittet	lt
 8003fae:	425b      	neglt	r3, r3
 8003fb0:	f042 0202 	orrlt.w	r2, r2, #2
 8003fb4:	9307      	strge	r3, [sp, #28]
 8003fb6:	9307      	strlt	r3, [sp, #28]
 8003fb8:	bfb8      	it	lt
 8003fba:	9204      	strlt	r2, [sp, #16]
 8003fbc:	7823      	ldrb	r3, [r4, #0]
 8003fbe:	2b2e      	cmp	r3, #46	; 0x2e
 8003fc0:	d10c      	bne.n	8003fdc <_svfiprintf_r+0x130>
 8003fc2:	7863      	ldrb	r3, [r4, #1]
 8003fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8003fc6:	d135      	bne.n	8004034 <_svfiprintf_r+0x188>
 8003fc8:	9b03      	ldr	r3, [sp, #12]
 8003fca:	1d1a      	adds	r2, r3, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	9203      	str	r2, [sp, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bfb8      	it	lt
 8003fd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fd8:	3402      	adds	r4, #2
 8003fda:	9305      	str	r3, [sp, #20]
 8003fdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80040a8 <_svfiprintf_r+0x1fc>
 8003fe0:	7821      	ldrb	r1, [r4, #0]
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	4650      	mov	r0, sl
 8003fe6:	f7fc f8fb 	bl	80001e0 <memchr>
 8003fea:	b140      	cbz	r0, 8003ffe <_svfiprintf_r+0x152>
 8003fec:	2340      	movs	r3, #64	; 0x40
 8003fee:	eba0 000a 	sub.w	r0, r0, sl
 8003ff2:	fa03 f000 	lsl.w	r0, r3, r0
 8003ff6:	9b04      	ldr	r3, [sp, #16]
 8003ff8:	4303      	orrs	r3, r0
 8003ffa:	3401      	adds	r4, #1
 8003ffc:	9304      	str	r3, [sp, #16]
 8003ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004002:	4826      	ldr	r0, [pc, #152]	; (800409c <_svfiprintf_r+0x1f0>)
 8004004:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004008:	2206      	movs	r2, #6
 800400a:	f7fc f8e9 	bl	80001e0 <memchr>
 800400e:	2800      	cmp	r0, #0
 8004010:	d038      	beq.n	8004084 <_svfiprintf_r+0x1d8>
 8004012:	4b23      	ldr	r3, [pc, #140]	; (80040a0 <_svfiprintf_r+0x1f4>)
 8004014:	bb1b      	cbnz	r3, 800405e <_svfiprintf_r+0x1b2>
 8004016:	9b03      	ldr	r3, [sp, #12]
 8004018:	3307      	adds	r3, #7
 800401a:	f023 0307 	bic.w	r3, r3, #7
 800401e:	3308      	adds	r3, #8
 8004020:	9303      	str	r3, [sp, #12]
 8004022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004024:	4433      	add	r3, r6
 8004026:	9309      	str	r3, [sp, #36]	; 0x24
 8004028:	e767      	b.n	8003efa <_svfiprintf_r+0x4e>
 800402a:	fb0c 3202 	mla	r2, ip, r2, r3
 800402e:	460c      	mov	r4, r1
 8004030:	2001      	movs	r0, #1
 8004032:	e7a5      	b.n	8003f80 <_svfiprintf_r+0xd4>
 8004034:	2300      	movs	r3, #0
 8004036:	3401      	adds	r4, #1
 8004038:	9305      	str	r3, [sp, #20]
 800403a:	4619      	mov	r1, r3
 800403c:	f04f 0c0a 	mov.w	ip, #10
 8004040:	4620      	mov	r0, r4
 8004042:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004046:	3a30      	subs	r2, #48	; 0x30
 8004048:	2a09      	cmp	r2, #9
 800404a:	d903      	bls.n	8004054 <_svfiprintf_r+0x1a8>
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0c5      	beq.n	8003fdc <_svfiprintf_r+0x130>
 8004050:	9105      	str	r1, [sp, #20]
 8004052:	e7c3      	b.n	8003fdc <_svfiprintf_r+0x130>
 8004054:	fb0c 2101 	mla	r1, ip, r1, r2
 8004058:	4604      	mov	r4, r0
 800405a:	2301      	movs	r3, #1
 800405c:	e7f0      	b.n	8004040 <_svfiprintf_r+0x194>
 800405e:	ab03      	add	r3, sp, #12
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	462a      	mov	r2, r5
 8004064:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <_svfiprintf_r+0x1f8>)
 8004066:	a904      	add	r1, sp, #16
 8004068:	4638      	mov	r0, r7
 800406a:	f3af 8000 	nop.w
 800406e:	1c42      	adds	r2, r0, #1
 8004070:	4606      	mov	r6, r0
 8004072:	d1d6      	bne.n	8004022 <_svfiprintf_r+0x176>
 8004074:	89ab      	ldrh	r3, [r5, #12]
 8004076:	065b      	lsls	r3, r3, #25
 8004078:	f53f af2c 	bmi.w	8003ed4 <_svfiprintf_r+0x28>
 800407c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800407e:	b01d      	add	sp, #116	; 0x74
 8004080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004084:	ab03      	add	r3, sp, #12
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	462a      	mov	r2, r5
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <_svfiprintf_r+0x1f8>)
 800408c:	a904      	add	r1, sp, #16
 800408e:	4638      	mov	r0, r7
 8004090:	f000 f87a 	bl	8004188 <_printf_i>
 8004094:	e7eb      	b.n	800406e <_svfiprintf_r+0x1c2>
 8004096:	bf00      	nop
 8004098:	080046ec 	.word	0x080046ec
 800409c:	080046f6 	.word	0x080046f6
 80040a0:	00000000 	.word	0x00000000
 80040a4:	08003df5 	.word	0x08003df5
 80040a8:	080046f2 	.word	0x080046f2

080040ac <_printf_common>:
 80040ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b0:	4616      	mov	r6, r2
 80040b2:	4699      	mov	r9, r3
 80040b4:	688a      	ldr	r2, [r1, #8]
 80040b6:	690b      	ldr	r3, [r1, #16]
 80040b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040bc:	4293      	cmp	r3, r2
 80040be:	bfb8      	it	lt
 80040c0:	4613      	movlt	r3, r2
 80040c2:	6033      	str	r3, [r6, #0]
 80040c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040c8:	4607      	mov	r7, r0
 80040ca:	460c      	mov	r4, r1
 80040cc:	b10a      	cbz	r2, 80040d2 <_printf_common+0x26>
 80040ce:	3301      	adds	r3, #1
 80040d0:	6033      	str	r3, [r6, #0]
 80040d2:	6823      	ldr	r3, [r4, #0]
 80040d4:	0699      	lsls	r1, r3, #26
 80040d6:	bf42      	ittt	mi
 80040d8:	6833      	ldrmi	r3, [r6, #0]
 80040da:	3302      	addmi	r3, #2
 80040dc:	6033      	strmi	r3, [r6, #0]
 80040de:	6825      	ldr	r5, [r4, #0]
 80040e0:	f015 0506 	ands.w	r5, r5, #6
 80040e4:	d106      	bne.n	80040f4 <_printf_common+0x48>
 80040e6:	f104 0a19 	add.w	sl, r4, #25
 80040ea:	68e3      	ldr	r3, [r4, #12]
 80040ec:	6832      	ldr	r2, [r6, #0]
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	42ab      	cmp	r3, r5
 80040f2:	dc26      	bgt.n	8004142 <_printf_common+0x96>
 80040f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040f8:	1e13      	subs	r3, r2, #0
 80040fa:	6822      	ldr	r2, [r4, #0]
 80040fc:	bf18      	it	ne
 80040fe:	2301      	movne	r3, #1
 8004100:	0692      	lsls	r2, r2, #26
 8004102:	d42b      	bmi.n	800415c <_printf_common+0xb0>
 8004104:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004108:	4649      	mov	r1, r9
 800410a:	4638      	mov	r0, r7
 800410c:	47c0      	blx	r8
 800410e:	3001      	adds	r0, #1
 8004110:	d01e      	beq.n	8004150 <_printf_common+0xa4>
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	68e5      	ldr	r5, [r4, #12]
 8004116:	6832      	ldr	r2, [r6, #0]
 8004118:	f003 0306 	and.w	r3, r3, #6
 800411c:	2b04      	cmp	r3, #4
 800411e:	bf08      	it	eq
 8004120:	1aad      	subeq	r5, r5, r2
 8004122:	68a3      	ldr	r3, [r4, #8]
 8004124:	6922      	ldr	r2, [r4, #16]
 8004126:	bf0c      	ite	eq
 8004128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800412c:	2500      	movne	r5, #0
 800412e:	4293      	cmp	r3, r2
 8004130:	bfc4      	itt	gt
 8004132:	1a9b      	subgt	r3, r3, r2
 8004134:	18ed      	addgt	r5, r5, r3
 8004136:	2600      	movs	r6, #0
 8004138:	341a      	adds	r4, #26
 800413a:	42b5      	cmp	r5, r6
 800413c:	d11a      	bne.n	8004174 <_printf_common+0xc8>
 800413e:	2000      	movs	r0, #0
 8004140:	e008      	b.n	8004154 <_printf_common+0xa8>
 8004142:	2301      	movs	r3, #1
 8004144:	4652      	mov	r2, sl
 8004146:	4649      	mov	r1, r9
 8004148:	4638      	mov	r0, r7
 800414a:	47c0      	blx	r8
 800414c:	3001      	adds	r0, #1
 800414e:	d103      	bne.n	8004158 <_printf_common+0xac>
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004158:	3501      	adds	r5, #1
 800415a:	e7c6      	b.n	80040ea <_printf_common+0x3e>
 800415c:	18e1      	adds	r1, r4, r3
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	2030      	movs	r0, #48	; 0x30
 8004162:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004166:	4422      	add	r2, r4
 8004168:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800416c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004170:	3302      	adds	r3, #2
 8004172:	e7c7      	b.n	8004104 <_printf_common+0x58>
 8004174:	2301      	movs	r3, #1
 8004176:	4622      	mov	r2, r4
 8004178:	4649      	mov	r1, r9
 800417a:	4638      	mov	r0, r7
 800417c:	47c0      	blx	r8
 800417e:	3001      	adds	r0, #1
 8004180:	d0e6      	beq.n	8004150 <_printf_common+0xa4>
 8004182:	3601      	adds	r6, #1
 8004184:	e7d9      	b.n	800413a <_printf_common+0x8e>
	...

08004188 <_printf_i>:
 8004188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800418c:	460c      	mov	r4, r1
 800418e:	4691      	mov	r9, r2
 8004190:	7e27      	ldrb	r7, [r4, #24]
 8004192:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004194:	2f78      	cmp	r7, #120	; 0x78
 8004196:	4680      	mov	r8, r0
 8004198:	469a      	mov	sl, r3
 800419a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800419e:	d807      	bhi.n	80041b0 <_printf_i+0x28>
 80041a0:	2f62      	cmp	r7, #98	; 0x62
 80041a2:	d80a      	bhi.n	80041ba <_printf_i+0x32>
 80041a4:	2f00      	cmp	r7, #0
 80041a6:	f000 80d8 	beq.w	800435a <_printf_i+0x1d2>
 80041aa:	2f58      	cmp	r7, #88	; 0x58
 80041ac:	f000 80a3 	beq.w	80042f6 <_printf_i+0x16e>
 80041b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041b8:	e03a      	b.n	8004230 <_printf_i+0xa8>
 80041ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041be:	2b15      	cmp	r3, #21
 80041c0:	d8f6      	bhi.n	80041b0 <_printf_i+0x28>
 80041c2:	a001      	add	r0, pc, #4	; (adr r0, 80041c8 <_printf_i+0x40>)
 80041c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80041c8:	08004221 	.word	0x08004221
 80041cc:	08004235 	.word	0x08004235
 80041d0:	080041b1 	.word	0x080041b1
 80041d4:	080041b1 	.word	0x080041b1
 80041d8:	080041b1 	.word	0x080041b1
 80041dc:	080041b1 	.word	0x080041b1
 80041e0:	08004235 	.word	0x08004235
 80041e4:	080041b1 	.word	0x080041b1
 80041e8:	080041b1 	.word	0x080041b1
 80041ec:	080041b1 	.word	0x080041b1
 80041f0:	080041b1 	.word	0x080041b1
 80041f4:	08004341 	.word	0x08004341
 80041f8:	08004265 	.word	0x08004265
 80041fc:	08004323 	.word	0x08004323
 8004200:	080041b1 	.word	0x080041b1
 8004204:	080041b1 	.word	0x080041b1
 8004208:	08004363 	.word	0x08004363
 800420c:	080041b1 	.word	0x080041b1
 8004210:	08004265 	.word	0x08004265
 8004214:	080041b1 	.word	0x080041b1
 8004218:	080041b1 	.word	0x080041b1
 800421c:	0800432b 	.word	0x0800432b
 8004220:	680b      	ldr	r3, [r1, #0]
 8004222:	1d1a      	adds	r2, r3, #4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	600a      	str	r2, [r1, #0]
 8004228:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800422c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004230:	2301      	movs	r3, #1
 8004232:	e0a3      	b.n	800437c <_printf_i+0x1f4>
 8004234:	6825      	ldr	r5, [r4, #0]
 8004236:	6808      	ldr	r0, [r1, #0]
 8004238:	062e      	lsls	r6, r5, #24
 800423a:	f100 0304 	add.w	r3, r0, #4
 800423e:	d50a      	bpl.n	8004256 <_printf_i+0xce>
 8004240:	6805      	ldr	r5, [r0, #0]
 8004242:	600b      	str	r3, [r1, #0]
 8004244:	2d00      	cmp	r5, #0
 8004246:	da03      	bge.n	8004250 <_printf_i+0xc8>
 8004248:	232d      	movs	r3, #45	; 0x2d
 800424a:	426d      	negs	r5, r5
 800424c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004250:	485e      	ldr	r0, [pc, #376]	; (80043cc <_printf_i+0x244>)
 8004252:	230a      	movs	r3, #10
 8004254:	e019      	b.n	800428a <_printf_i+0x102>
 8004256:	f015 0f40 	tst.w	r5, #64	; 0x40
 800425a:	6805      	ldr	r5, [r0, #0]
 800425c:	600b      	str	r3, [r1, #0]
 800425e:	bf18      	it	ne
 8004260:	b22d      	sxthne	r5, r5
 8004262:	e7ef      	b.n	8004244 <_printf_i+0xbc>
 8004264:	680b      	ldr	r3, [r1, #0]
 8004266:	6825      	ldr	r5, [r4, #0]
 8004268:	1d18      	adds	r0, r3, #4
 800426a:	6008      	str	r0, [r1, #0]
 800426c:	0628      	lsls	r0, r5, #24
 800426e:	d501      	bpl.n	8004274 <_printf_i+0xec>
 8004270:	681d      	ldr	r5, [r3, #0]
 8004272:	e002      	b.n	800427a <_printf_i+0xf2>
 8004274:	0669      	lsls	r1, r5, #25
 8004276:	d5fb      	bpl.n	8004270 <_printf_i+0xe8>
 8004278:	881d      	ldrh	r5, [r3, #0]
 800427a:	4854      	ldr	r0, [pc, #336]	; (80043cc <_printf_i+0x244>)
 800427c:	2f6f      	cmp	r7, #111	; 0x6f
 800427e:	bf0c      	ite	eq
 8004280:	2308      	moveq	r3, #8
 8004282:	230a      	movne	r3, #10
 8004284:	2100      	movs	r1, #0
 8004286:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800428a:	6866      	ldr	r6, [r4, #4]
 800428c:	60a6      	str	r6, [r4, #8]
 800428e:	2e00      	cmp	r6, #0
 8004290:	bfa2      	ittt	ge
 8004292:	6821      	ldrge	r1, [r4, #0]
 8004294:	f021 0104 	bicge.w	r1, r1, #4
 8004298:	6021      	strge	r1, [r4, #0]
 800429a:	b90d      	cbnz	r5, 80042a0 <_printf_i+0x118>
 800429c:	2e00      	cmp	r6, #0
 800429e:	d04d      	beq.n	800433c <_printf_i+0x1b4>
 80042a0:	4616      	mov	r6, r2
 80042a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80042a6:	fb03 5711 	mls	r7, r3, r1, r5
 80042aa:	5dc7      	ldrb	r7, [r0, r7]
 80042ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042b0:	462f      	mov	r7, r5
 80042b2:	42bb      	cmp	r3, r7
 80042b4:	460d      	mov	r5, r1
 80042b6:	d9f4      	bls.n	80042a2 <_printf_i+0x11a>
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d10b      	bne.n	80042d4 <_printf_i+0x14c>
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	07df      	lsls	r7, r3, #31
 80042c0:	d508      	bpl.n	80042d4 <_printf_i+0x14c>
 80042c2:	6923      	ldr	r3, [r4, #16]
 80042c4:	6861      	ldr	r1, [r4, #4]
 80042c6:	4299      	cmp	r1, r3
 80042c8:	bfde      	ittt	le
 80042ca:	2330      	movle	r3, #48	; 0x30
 80042cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042d4:	1b92      	subs	r2, r2, r6
 80042d6:	6122      	str	r2, [r4, #16]
 80042d8:	f8cd a000 	str.w	sl, [sp]
 80042dc:	464b      	mov	r3, r9
 80042de:	aa03      	add	r2, sp, #12
 80042e0:	4621      	mov	r1, r4
 80042e2:	4640      	mov	r0, r8
 80042e4:	f7ff fee2 	bl	80040ac <_printf_common>
 80042e8:	3001      	adds	r0, #1
 80042ea:	d14c      	bne.n	8004386 <_printf_i+0x1fe>
 80042ec:	f04f 30ff 	mov.w	r0, #4294967295
 80042f0:	b004      	add	sp, #16
 80042f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f6:	4835      	ldr	r0, [pc, #212]	; (80043cc <_printf_i+0x244>)
 80042f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042fc:	6823      	ldr	r3, [r4, #0]
 80042fe:	680e      	ldr	r6, [r1, #0]
 8004300:	061f      	lsls	r7, r3, #24
 8004302:	f856 5b04 	ldr.w	r5, [r6], #4
 8004306:	600e      	str	r6, [r1, #0]
 8004308:	d514      	bpl.n	8004334 <_printf_i+0x1ac>
 800430a:	07d9      	lsls	r1, r3, #31
 800430c:	bf44      	itt	mi
 800430e:	f043 0320 	orrmi.w	r3, r3, #32
 8004312:	6023      	strmi	r3, [r4, #0]
 8004314:	b91d      	cbnz	r5, 800431e <_printf_i+0x196>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	f023 0320 	bic.w	r3, r3, #32
 800431c:	6023      	str	r3, [r4, #0]
 800431e:	2310      	movs	r3, #16
 8004320:	e7b0      	b.n	8004284 <_printf_i+0xfc>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	f043 0320 	orr.w	r3, r3, #32
 8004328:	6023      	str	r3, [r4, #0]
 800432a:	2378      	movs	r3, #120	; 0x78
 800432c:	4828      	ldr	r0, [pc, #160]	; (80043d0 <_printf_i+0x248>)
 800432e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004332:	e7e3      	b.n	80042fc <_printf_i+0x174>
 8004334:	065e      	lsls	r6, r3, #25
 8004336:	bf48      	it	mi
 8004338:	b2ad      	uxthmi	r5, r5
 800433a:	e7e6      	b.n	800430a <_printf_i+0x182>
 800433c:	4616      	mov	r6, r2
 800433e:	e7bb      	b.n	80042b8 <_printf_i+0x130>
 8004340:	680b      	ldr	r3, [r1, #0]
 8004342:	6826      	ldr	r6, [r4, #0]
 8004344:	6960      	ldr	r0, [r4, #20]
 8004346:	1d1d      	adds	r5, r3, #4
 8004348:	600d      	str	r5, [r1, #0]
 800434a:	0635      	lsls	r5, r6, #24
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	d501      	bpl.n	8004354 <_printf_i+0x1cc>
 8004350:	6018      	str	r0, [r3, #0]
 8004352:	e002      	b.n	800435a <_printf_i+0x1d2>
 8004354:	0671      	lsls	r1, r6, #25
 8004356:	d5fb      	bpl.n	8004350 <_printf_i+0x1c8>
 8004358:	8018      	strh	r0, [r3, #0]
 800435a:	2300      	movs	r3, #0
 800435c:	6123      	str	r3, [r4, #16]
 800435e:	4616      	mov	r6, r2
 8004360:	e7ba      	b.n	80042d8 <_printf_i+0x150>
 8004362:	680b      	ldr	r3, [r1, #0]
 8004364:	1d1a      	adds	r2, r3, #4
 8004366:	600a      	str	r2, [r1, #0]
 8004368:	681e      	ldr	r6, [r3, #0]
 800436a:	6862      	ldr	r2, [r4, #4]
 800436c:	2100      	movs	r1, #0
 800436e:	4630      	mov	r0, r6
 8004370:	f7fb ff36 	bl	80001e0 <memchr>
 8004374:	b108      	cbz	r0, 800437a <_printf_i+0x1f2>
 8004376:	1b80      	subs	r0, r0, r6
 8004378:	6060      	str	r0, [r4, #4]
 800437a:	6863      	ldr	r3, [r4, #4]
 800437c:	6123      	str	r3, [r4, #16]
 800437e:	2300      	movs	r3, #0
 8004380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004384:	e7a8      	b.n	80042d8 <_printf_i+0x150>
 8004386:	6923      	ldr	r3, [r4, #16]
 8004388:	4632      	mov	r2, r6
 800438a:	4649      	mov	r1, r9
 800438c:	4640      	mov	r0, r8
 800438e:	47d0      	blx	sl
 8004390:	3001      	adds	r0, #1
 8004392:	d0ab      	beq.n	80042ec <_printf_i+0x164>
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	079b      	lsls	r3, r3, #30
 8004398:	d413      	bmi.n	80043c2 <_printf_i+0x23a>
 800439a:	68e0      	ldr	r0, [r4, #12]
 800439c:	9b03      	ldr	r3, [sp, #12]
 800439e:	4298      	cmp	r0, r3
 80043a0:	bfb8      	it	lt
 80043a2:	4618      	movlt	r0, r3
 80043a4:	e7a4      	b.n	80042f0 <_printf_i+0x168>
 80043a6:	2301      	movs	r3, #1
 80043a8:	4632      	mov	r2, r6
 80043aa:	4649      	mov	r1, r9
 80043ac:	4640      	mov	r0, r8
 80043ae:	47d0      	blx	sl
 80043b0:	3001      	adds	r0, #1
 80043b2:	d09b      	beq.n	80042ec <_printf_i+0x164>
 80043b4:	3501      	adds	r5, #1
 80043b6:	68e3      	ldr	r3, [r4, #12]
 80043b8:	9903      	ldr	r1, [sp, #12]
 80043ba:	1a5b      	subs	r3, r3, r1
 80043bc:	42ab      	cmp	r3, r5
 80043be:	dcf2      	bgt.n	80043a6 <_printf_i+0x21e>
 80043c0:	e7eb      	b.n	800439a <_printf_i+0x212>
 80043c2:	2500      	movs	r5, #0
 80043c4:	f104 0619 	add.w	r6, r4, #25
 80043c8:	e7f5      	b.n	80043b6 <_printf_i+0x22e>
 80043ca:	bf00      	nop
 80043cc:	080046fd 	.word	0x080046fd
 80043d0:	0800470e 	.word	0x0800470e

080043d4 <memcpy>:
 80043d4:	440a      	add	r2, r1
 80043d6:	4291      	cmp	r1, r2
 80043d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80043dc:	d100      	bne.n	80043e0 <memcpy+0xc>
 80043de:	4770      	bx	lr
 80043e0:	b510      	push	{r4, lr}
 80043e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043ea:	4291      	cmp	r1, r2
 80043ec:	d1f9      	bne.n	80043e2 <memcpy+0xe>
 80043ee:	bd10      	pop	{r4, pc}

080043f0 <memmove>:
 80043f0:	4288      	cmp	r0, r1
 80043f2:	b510      	push	{r4, lr}
 80043f4:	eb01 0402 	add.w	r4, r1, r2
 80043f8:	d902      	bls.n	8004400 <memmove+0x10>
 80043fa:	4284      	cmp	r4, r0
 80043fc:	4623      	mov	r3, r4
 80043fe:	d807      	bhi.n	8004410 <memmove+0x20>
 8004400:	1e43      	subs	r3, r0, #1
 8004402:	42a1      	cmp	r1, r4
 8004404:	d008      	beq.n	8004418 <memmove+0x28>
 8004406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800440a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800440e:	e7f8      	b.n	8004402 <memmove+0x12>
 8004410:	4402      	add	r2, r0
 8004412:	4601      	mov	r1, r0
 8004414:	428a      	cmp	r2, r1
 8004416:	d100      	bne.n	800441a <memmove+0x2a>
 8004418:	bd10      	pop	{r4, pc}
 800441a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800441e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004422:	e7f7      	b.n	8004414 <memmove+0x24>

08004424 <_free_r>:
 8004424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004426:	2900      	cmp	r1, #0
 8004428:	d048      	beq.n	80044bc <_free_r+0x98>
 800442a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800442e:	9001      	str	r0, [sp, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	f1a1 0404 	sub.w	r4, r1, #4
 8004436:	bfb8      	it	lt
 8004438:	18e4      	addlt	r4, r4, r3
 800443a:	f000 f8d3 	bl	80045e4 <__malloc_lock>
 800443e:	4a20      	ldr	r2, [pc, #128]	; (80044c0 <_free_r+0x9c>)
 8004440:	9801      	ldr	r0, [sp, #4]
 8004442:	6813      	ldr	r3, [r2, #0]
 8004444:	4615      	mov	r5, r2
 8004446:	b933      	cbnz	r3, 8004456 <_free_r+0x32>
 8004448:	6063      	str	r3, [r4, #4]
 800444a:	6014      	str	r4, [r2, #0]
 800444c:	b003      	add	sp, #12
 800444e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004452:	f000 b8cd 	b.w	80045f0 <__malloc_unlock>
 8004456:	42a3      	cmp	r3, r4
 8004458:	d90b      	bls.n	8004472 <_free_r+0x4e>
 800445a:	6821      	ldr	r1, [r4, #0]
 800445c:	1862      	adds	r2, r4, r1
 800445e:	4293      	cmp	r3, r2
 8004460:	bf04      	itt	eq
 8004462:	681a      	ldreq	r2, [r3, #0]
 8004464:	685b      	ldreq	r3, [r3, #4]
 8004466:	6063      	str	r3, [r4, #4]
 8004468:	bf04      	itt	eq
 800446a:	1852      	addeq	r2, r2, r1
 800446c:	6022      	streq	r2, [r4, #0]
 800446e:	602c      	str	r4, [r5, #0]
 8004470:	e7ec      	b.n	800444c <_free_r+0x28>
 8004472:	461a      	mov	r2, r3
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	b10b      	cbz	r3, 800447c <_free_r+0x58>
 8004478:	42a3      	cmp	r3, r4
 800447a:	d9fa      	bls.n	8004472 <_free_r+0x4e>
 800447c:	6811      	ldr	r1, [r2, #0]
 800447e:	1855      	adds	r5, r2, r1
 8004480:	42a5      	cmp	r5, r4
 8004482:	d10b      	bne.n	800449c <_free_r+0x78>
 8004484:	6824      	ldr	r4, [r4, #0]
 8004486:	4421      	add	r1, r4
 8004488:	1854      	adds	r4, r2, r1
 800448a:	42a3      	cmp	r3, r4
 800448c:	6011      	str	r1, [r2, #0]
 800448e:	d1dd      	bne.n	800444c <_free_r+0x28>
 8004490:	681c      	ldr	r4, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	6053      	str	r3, [r2, #4]
 8004496:	4421      	add	r1, r4
 8004498:	6011      	str	r1, [r2, #0]
 800449a:	e7d7      	b.n	800444c <_free_r+0x28>
 800449c:	d902      	bls.n	80044a4 <_free_r+0x80>
 800449e:	230c      	movs	r3, #12
 80044a0:	6003      	str	r3, [r0, #0]
 80044a2:	e7d3      	b.n	800444c <_free_r+0x28>
 80044a4:	6825      	ldr	r5, [r4, #0]
 80044a6:	1961      	adds	r1, r4, r5
 80044a8:	428b      	cmp	r3, r1
 80044aa:	bf04      	itt	eq
 80044ac:	6819      	ldreq	r1, [r3, #0]
 80044ae:	685b      	ldreq	r3, [r3, #4]
 80044b0:	6063      	str	r3, [r4, #4]
 80044b2:	bf04      	itt	eq
 80044b4:	1949      	addeq	r1, r1, r5
 80044b6:	6021      	streq	r1, [r4, #0]
 80044b8:	6054      	str	r4, [r2, #4]
 80044ba:	e7c7      	b.n	800444c <_free_r+0x28>
 80044bc:	b003      	add	sp, #12
 80044be:	bd30      	pop	{r4, r5, pc}
 80044c0:	20000090 	.word	0x20000090

080044c4 <_malloc_r>:
 80044c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c6:	1ccd      	adds	r5, r1, #3
 80044c8:	f025 0503 	bic.w	r5, r5, #3
 80044cc:	3508      	adds	r5, #8
 80044ce:	2d0c      	cmp	r5, #12
 80044d0:	bf38      	it	cc
 80044d2:	250c      	movcc	r5, #12
 80044d4:	2d00      	cmp	r5, #0
 80044d6:	4606      	mov	r6, r0
 80044d8:	db01      	blt.n	80044de <_malloc_r+0x1a>
 80044da:	42a9      	cmp	r1, r5
 80044dc:	d903      	bls.n	80044e6 <_malloc_r+0x22>
 80044de:	230c      	movs	r3, #12
 80044e0:	6033      	str	r3, [r6, #0]
 80044e2:	2000      	movs	r0, #0
 80044e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044e6:	f000 f87d 	bl	80045e4 <__malloc_lock>
 80044ea:	4921      	ldr	r1, [pc, #132]	; (8004570 <_malloc_r+0xac>)
 80044ec:	680a      	ldr	r2, [r1, #0]
 80044ee:	4614      	mov	r4, r2
 80044f0:	b99c      	cbnz	r4, 800451a <_malloc_r+0x56>
 80044f2:	4f20      	ldr	r7, [pc, #128]	; (8004574 <_malloc_r+0xb0>)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	b923      	cbnz	r3, 8004502 <_malloc_r+0x3e>
 80044f8:	4621      	mov	r1, r4
 80044fa:	4630      	mov	r0, r6
 80044fc:	f000 f862 	bl	80045c4 <_sbrk_r>
 8004500:	6038      	str	r0, [r7, #0]
 8004502:	4629      	mov	r1, r5
 8004504:	4630      	mov	r0, r6
 8004506:	f000 f85d 	bl	80045c4 <_sbrk_r>
 800450a:	1c43      	adds	r3, r0, #1
 800450c:	d123      	bne.n	8004556 <_malloc_r+0x92>
 800450e:	230c      	movs	r3, #12
 8004510:	6033      	str	r3, [r6, #0]
 8004512:	4630      	mov	r0, r6
 8004514:	f000 f86c 	bl	80045f0 <__malloc_unlock>
 8004518:	e7e3      	b.n	80044e2 <_malloc_r+0x1e>
 800451a:	6823      	ldr	r3, [r4, #0]
 800451c:	1b5b      	subs	r3, r3, r5
 800451e:	d417      	bmi.n	8004550 <_malloc_r+0x8c>
 8004520:	2b0b      	cmp	r3, #11
 8004522:	d903      	bls.n	800452c <_malloc_r+0x68>
 8004524:	6023      	str	r3, [r4, #0]
 8004526:	441c      	add	r4, r3
 8004528:	6025      	str	r5, [r4, #0]
 800452a:	e004      	b.n	8004536 <_malloc_r+0x72>
 800452c:	6863      	ldr	r3, [r4, #4]
 800452e:	42a2      	cmp	r2, r4
 8004530:	bf0c      	ite	eq
 8004532:	600b      	streq	r3, [r1, #0]
 8004534:	6053      	strne	r3, [r2, #4]
 8004536:	4630      	mov	r0, r6
 8004538:	f000 f85a 	bl	80045f0 <__malloc_unlock>
 800453c:	f104 000b 	add.w	r0, r4, #11
 8004540:	1d23      	adds	r3, r4, #4
 8004542:	f020 0007 	bic.w	r0, r0, #7
 8004546:	1ac2      	subs	r2, r0, r3
 8004548:	d0cc      	beq.n	80044e4 <_malloc_r+0x20>
 800454a:	1a1b      	subs	r3, r3, r0
 800454c:	50a3      	str	r3, [r4, r2]
 800454e:	e7c9      	b.n	80044e4 <_malloc_r+0x20>
 8004550:	4622      	mov	r2, r4
 8004552:	6864      	ldr	r4, [r4, #4]
 8004554:	e7cc      	b.n	80044f0 <_malloc_r+0x2c>
 8004556:	1cc4      	adds	r4, r0, #3
 8004558:	f024 0403 	bic.w	r4, r4, #3
 800455c:	42a0      	cmp	r0, r4
 800455e:	d0e3      	beq.n	8004528 <_malloc_r+0x64>
 8004560:	1a21      	subs	r1, r4, r0
 8004562:	4630      	mov	r0, r6
 8004564:	f000 f82e 	bl	80045c4 <_sbrk_r>
 8004568:	3001      	adds	r0, #1
 800456a:	d1dd      	bne.n	8004528 <_malloc_r+0x64>
 800456c:	e7cf      	b.n	800450e <_malloc_r+0x4a>
 800456e:	bf00      	nop
 8004570:	20000090 	.word	0x20000090
 8004574:	20000094 	.word	0x20000094

08004578 <_realloc_r>:
 8004578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457a:	4607      	mov	r7, r0
 800457c:	4614      	mov	r4, r2
 800457e:	460e      	mov	r6, r1
 8004580:	b921      	cbnz	r1, 800458c <_realloc_r+0x14>
 8004582:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004586:	4611      	mov	r1, r2
 8004588:	f7ff bf9c 	b.w	80044c4 <_malloc_r>
 800458c:	b922      	cbnz	r2, 8004598 <_realloc_r+0x20>
 800458e:	f7ff ff49 	bl	8004424 <_free_r>
 8004592:	4625      	mov	r5, r4
 8004594:	4628      	mov	r0, r5
 8004596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004598:	f000 f830 	bl	80045fc <_malloc_usable_size_r>
 800459c:	42a0      	cmp	r0, r4
 800459e:	d20f      	bcs.n	80045c0 <_realloc_r+0x48>
 80045a0:	4621      	mov	r1, r4
 80045a2:	4638      	mov	r0, r7
 80045a4:	f7ff ff8e 	bl	80044c4 <_malloc_r>
 80045a8:	4605      	mov	r5, r0
 80045aa:	2800      	cmp	r0, #0
 80045ac:	d0f2      	beq.n	8004594 <_realloc_r+0x1c>
 80045ae:	4631      	mov	r1, r6
 80045b0:	4622      	mov	r2, r4
 80045b2:	f7ff ff0f 	bl	80043d4 <memcpy>
 80045b6:	4631      	mov	r1, r6
 80045b8:	4638      	mov	r0, r7
 80045ba:	f7ff ff33 	bl	8004424 <_free_r>
 80045be:	e7e9      	b.n	8004594 <_realloc_r+0x1c>
 80045c0:	4635      	mov	r5, r6
 80045c2:	e7e7      	b.n	8004594 <_realloc_r+0x1c>

080045c4 <_sbrk_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	4d06      	ldr	r5, [pc, #24]	; (80045e0 <_sbrk_r+0x1c>)
 80045c8:	2300      	movs	r3, #0
 80045ca:	4604      	mov	r4, r0
 80045cc:	4608      	mov	r0, r1
 80045ce:	602b      	str	r3, [r5, #0]
 80045d0:	f7fc ff70 	bl	80014b4 <_sbrk>
 80045d4:	1c43      	adds	r3, r0, #1
 80045d6:	d102      	bne.n	80045de <_sbrk_r+0x1a>
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	b103      	cbz	r3, 80045de <_sbrk_r+0x1a>
 80045dc:	6023      	str	r3, [r4, #0]
 80045de:	bd38      	pop	{r3, r4, r5, pc}
 80045e0:	20000178 	.word	0x20000178

080045e4 <__malloc_lock>:
 80045e4:	4801      	ldr	r0, [pc, #4]	; (80045ec <__malloc_lock+0x8>)
 80045e6:	f000 b811 	b.w	800460c <__retarget_lock_acquire_recursive>
 80045ea:	bf00      	nop
 80045ec:	20000180 	.word	0x20000180

080045f0 <__malloc_unlock>:
 80045f0:	4801      	ldr	r0, [pc, #4]	; (80045f8 <__malloc_unlock+0x8>)
 80045f2:	f000 b80c 	b.w	800460e <__retarget_lock_release_recursive>
 80045f6:	bf00      	nop
 80045f8:	20000180 	.word	0x20000180

080045fc <_malloc_usable_size_r>:
 80045fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004600:	1f18      	subs	r0, r3, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	bfbc      	itt	lt
 8004606:	580b      	ldrlt	r3, [r1, r0]
 8004608:	18c0      	addlt	r0, r0, r3
 800460a:	4770      	bx	lr

0800460c <__retarget_lock_acquire_recursive>:
 800460c:	4770      	bx	lr

0800460e <__retarget_lock_release_recursive>:
 800460e:	4770      	bx	lr

08004610 <_init>:
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	bf00      	nop
 8004614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004616:	bc08      	pop	{r3}
 8004618:	469e      	mov	lr, r3
 800461a:	4770      	bx	lr

0800461c <_fini>:
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461e:	bf00      	nop
 8004620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004622:	bc08      	pop	{r3}
 8004624:	469e      	mov	lr, r3
 8004626:	4770      	bx	lr
