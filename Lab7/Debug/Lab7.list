
Lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08003060  08003060  00013060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032b0  080032b0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080032b0  080032b0  000132b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032b8  080032b8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032b8  080032b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032bc  080032bc  000132bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080032c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000095c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000096c  2000096c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a3f7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015cc  00000000  00000000  0002a437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  0002ba08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007c8  00000000  00000000  0002c248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000202bc  00000000  00000000  0002ca10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009751  00000000  00000000  0004cccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c43aa  00000000  00000000  0005641d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011a7c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002188  00000000  00000000  0011a81c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003048 	.word	0x08003048

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003048 	.word	0x08003048

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <CS_change>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void CS_change(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7)==GPIO_PIN_SET){
 80004d4:	2180      	movs	r1, #128	; 0x80
 80004d6:	4809      	ldr	r0, [pc, #36]	; (80004fc <CS_change+0x2c>)
 80004d8:	f001 f926 	bl	8001728 <HAL_GPIO_ReadPin>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d105      	bne.n	80004ee <CS_change+0x1e>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,GPIO_PIN_RESET);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2180      	movs	r1, #128	; 0x80
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <CS_change+0x2c>)
 80004e8:	f001 f936 	bl	8001758 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,GPIO_PIN_SET);
	}
}
 80004ec:	e004      	b.n	80004f8 <CS_change+0x28>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,GPIO_PIN_SET);
 80004ee:	2201      	movs	r2, #1
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	4802      	ldr	r0, [pc, #8]	; (80004fc <CS_change+0x2c>)
 80004f4:	f001 f930 	bl	8001758 <HAL_GPIO_WritePin>
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40020c00 	.word	0x40020c00

08000500 <flash_read>:

void flash_read(){
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af02      	add	r7, sp, #8

	for(uint8_t i=0;i<20;i++){
 8000506:	2300      	movs	r3, #0
 8000508:	71fb      	strb	r3, [r7, #7]
 800050a:	e05c      	b.n	80005c6 <flash_read+0xc6>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,GPIO_PIN_SET);  //CS = HIGH (CS is high means bus isn`t working)
 800050c:	2201      	movs	r2, #1
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	4831      	ldr	r0, [pc, #196]	; (80005d8 <flash_read+0xd8>)
 8000512:	f001 f921 	bl	8001758 <HAL_GPIO_WritePin>

		HAL_Delay(10);
 8000516:	200a      	movs	r0, #10
 8000518:	f000 fe60 	bl	80011dc <HAL_Delay>

		TransmitArray[0]=0x03;                 //Prepare READ-ID command
 800051c:	4b2f      	ldr	r3, [pc, #188]	; (80005dc <flash_read+0xdc>)
 800051e:	2203      	movs	r2, #3
 8000520:	701a      	strb	r2, [r3, #0]
		TransmitArray[1]=address>>16;         //You should make these wierd adress shifts
 8000522:	4b2f      	ldr	r3, [pc, #188]	; (80005e0 <flash_read+0xe0>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	0c1b      	lsrs	r3, r3, #16
 8000528:	b2da      	uxtb	r2, r3
 800052a:	4b2c      	ldr	r3, [pc, #176]	; (80005dc <flash_read+0xdc>)
 800052c:	705a      	strb	r2, [r3, #1]
		TransmitArray[2]=address>>8;
 800052e:	4b2c      	ldr	r3, [pc, #176]	; (80005e0 <flash_read+0xe0>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	0a1b      	lsrs	r3, r3, #8
 8000534:	b2da      	uxtb	r2, r3
 8000536:	4b29      	ldr	r3, [pc, #164]	; (80005dc <flash_read+0xdc>)
 8000538:	709a      	strb	r2, [r3, #2]
		TransmitArray[3]=address;
 800053a:	4b29      	ldr	r3, [pc, #164]	; (80005e0 <flash_read+0xe0>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	b2da      	uxtb	r2, r3
 8000540:	4b26      	ldr	r3, [pc, #152]	; (80005dc <flash_read+0xdc>)
 8000542:	70da      	strb	r2, [r3, #3]

		if(address==77824){   //0+4096*19=77824 - address of line 20
 8000544:	4b26      	ldr	r3, [pc, #152]	; (80005e0 <flash_read+0xe0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f5b3 3f98 	cmp.w	r3, #77824	; 0x13000
 800054c:	d103      	bne.n	8000556 <flash_read+0x56>
			address=0;
 800054e:	4b24      	ldr	r3, [pc, #144]	; (80005e0 <flash_read+0xe0>)
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	e005      	b.n	8000562 <flash_read+0x62>
		}
		else{
			  address+=4096;
 8000556:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <flash_read+0xe0>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800055e:	4a20      	ldr	r2, [pc, #128]	; (80005e0 <flash_read+0xe0>)
 8000560:	6013      	str	r3, [r2, #0]
		}

		CS_change(); //When CS is low transmit starts
 8000562:	f7ff ffb5 	bl	80004d0 <CS_change>
		HAL_SPI_TransmitReceive(&hspi1,TransmitArray,(uint8_t *)ReceiveArray,100,1000);    //Exchange data
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	2364      	movs	r3, #100	; 0x64
 800056e:	4a1d      	ldr	r2, [pc, #116]	; (80005e4 <flash_read+0xe4>)
 8000570:	491a      	ldr	r1, [pc, #104]	; (80005dc <flash_read+0xdc>)
 8000572:	481d      	ldr	r0, [pc, #116]	; (80005e8 <flash_read+0xe8>)
 8000574:	f001 ff17 	bl	80023a6 <HAL_SPI_TransmitReceive>

		CS_change();  //CS = HIGH
 8000578:	f7ff ffaa 	bl	80004d0 <CS_change>
		HAL_Delay(10);
 800057c:	200a      	movs	r0, #10
 800057e:	f000 fe2d 	bl	80011dc <HAL_Delay>
	    HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", strlen("\r\n"),10);               //send newline
 8000582:	230a      	movs	r3, #10
 8000584:	2202      	movs	r2, #2
 8000586:	4919      	ldr	r1, [pc, #100]	; (80005ec <flash_read+0xec>)
 8000588:	4819      	ldr	r0, [pc, #100]	; (80005f0 <flash_read+0xf0>)
 800058a:	f002 f9c6 	bl	800291a <HAL_UART_Transmit>

	    for(uint8_t j=0;j<100;j++){       //filter off all the 0xFF
 800058e:	2300      	movs	r3, #0
 8000590:	71bb      	strb	r3, [r7, #6]
 8000592:	e00b      	b.n	80005ac <flash_read+0xac>
	    	if(ReceiveArray[j]==255){
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	4a13      	ldr	r2, [pc, #76]	; (80005e4 <flash_read+0xe4>)
 8000598:	5cd3      	ldrb	r3, [r2, r3]
 800059a:	2bff      	cmp	r3, #255	; 0xff
 800059c:	d103      	bne.n	80005a6 <flash_read+0xa6>
	    		ReceiveArray[j]='\0';
 800059e:	79bb      	ldrb	r3, [r7, #6]
 80005a0:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <flash_read+0xe4>)
 80005a2:	2100      	movs	r1, #0
 80005a4:	54d1      	strb	r1, [r2, r3]
	    for(uint8_t j=0;j<100;j++){       //filter off all the 0xFF
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	3301      	adds	r3, #1
 80005aa:	71bb      	strb	r3, [r7, #6]
 80005ac:	79bb      	ldrb	r3, [r7, #6]
 80005ae:	2b63      	cmp	r3, #99	; 0x63
 80005b0:	d9f0      	bls.n	8000594 <flash_read+0x94>
	    	}
	    }
	    HAL_UART_Transmit(&huart3,(uint8_t *) ReceiveArray,sizeof ReceiveArray/sizeof ReceiveArray[0],0XFFFF);
 80005b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b6:	2264      	movs	r2, #100	; 0x64
 80005b8:	490a      	ldr	r1, [pc, #40]	; (80005e4 <flash_read+0xe4>)
 80005ba:	480d      	ldr	r0, [pc, #52]	; (80005f0 <flash_read+0xf0>)
 80005bc:	f002 f9ad 	bl	800291a <HAL_UART_Transmit>
	for(uint8_t i=0;i<20;i++){
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	3301      	adds	r3, #1
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b13      	cmp	r3, #19
 80005ca:	d99f      	bls.n	800050c <flash_read+0xc>
	}
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40020c00 	.word	0x40020c00
 80005dc:	2000002c 	.word	0x2000002c
 80005e0:	200000f4 	.word	0x200000f4
 80005e4:	20000090 	.word	0x20000090
 80005e8:	20000910 	.word	0x20000910
 80005ec:	08003060 	.word	0x08003060
 80005f0:	200008cc 	.word	0x200008cc

080005f4 <pin_control>:

void pin_control(bool state){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	if (state == true)
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00c      	beq.n	800061e <pin_control+0x2a>
	{
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7) == GPIO_PIN_SET)
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	480e      	ldr	r0, [pc, #56]	; (8000640 <pin_control+0x4c>)
 8000608:	f001 f88e 	bl	8001728 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b01      	cmp	r3, #1
 8000610:	d111      	bne.n	8000636 <pin_control+0x42>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	480a      	ldr	r0, [pc, #40]	; (8000640 <pin_control+0x4c>)
 8000618:	f001 f89e 	bl	8001758 <HAL_GPIO_WritePin>
	else
	{
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7) == GPIO_PIN_RESET)
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
	}
}
 800061c:	e00b      	b.n	8000636 <pin_control+0x42>
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7) == GPIO_PIN_RESET)
 800061e:	2180      	movs	r1, #128	; 0x80
 8000620:	4807      	ldr	r0, [pc, #28]	; (8000640 <pin_control+0x4c>)
 8000622:	f001 f881 	bl	8001728 <HAL_GPIO_ReadPin>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d104      	bne.n	8000636 <pin_control+0x42>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	2180      	movs	r1, #128	; 0x80
 8000630:	4803      	ldr	r0, [pc, #12]	; (8000640 <pin_control+0x4c>)
 8000632:	f001 f891 	bl	8001758 <HAL_GPIO_WritePin>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40020c00 	.word	0x40020c00

08000644 <setWriteStatus>:

void setWriteStatus(){
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	uint8_t status[] = {writeStatusCode, 0};
 800064a:	2301      	movs	r3, #1
 800064c:	713b      	strb	r3, [r7, #4]
 800064e:	2300      	movs	r3, #0
 8000650:	717b      	strb	r3, [r7, #5]

	pin_control(true);
 8000652:	2001      	movs	r0, #1
 8000654:	f7ff ffce 	bl	80005f4 <pin_control>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&enableWriteStatusCode, 1, waitTime);
 8000658:	2364      	movs	r3, #100	; 0x64
 800065a:	2201      	movs	r2, #1
 800065c:	490b      	ldr	r1, [pc, #44]	; (800068c <setWriteStatus+0x48>)
 800065e:	480c      	ldr	r0, [pc, #48]	; (8000690 <setWriteStatus+0x4c>)
 8000660:	f001 fd65 	bl	800212e <HAL_SPI_Transmit>
	pin_control(false);
 8000664:	2000      	movs	r0, #0
 8000666:	f7ff ffc5 	bl	80005f4 <pin_control>

	pin_control(true);
 800066a:	2001      	movs	r0, #1
 800066c:	f7ff ffc2 	bl	80005f4 <pin_control>
	HAL_SPI_Transmit(&hspi1, status, 2, waitTime);
 8000670:	1d39      	adds	r1, r7, #4
 8000672:	2364      	movs	r3, #100	; 0x64
 8000674:	2202      	movs	r2, #2
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <setWriteStatus+0x4c>)
 8000678:	f001 fd59 	bl	800212e <HAL_SPI_Transmit>
	pin_control(false);
 800067c:	2000      	movs	r0, #0
 800067e:	f7ff ffb9 	bl	80005f4 <pin_control>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	08003294 	.word	0x08003294
 8000690:	20000910 	.word	0x20000910

08000694 <setHEOW>:

void setHEOW(bool state){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
	pin_control(true);
 800069e:	2001      	movs	r0, #1
 80006a0:	f7ff ffa8 	bl	80005f4 <pin_control>
	HAL_SPI_Transmit(&hspi1, state == true ? (uint8_t *)&enableSOCode : (uint8_t *)&disableSOCode, 1, waitTime);
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <setHEOW+0x1a>
 80006aa:	4907      	ldr	r1, [pc, #28]	; (80006c8 <setHEOW+0x34>)
 80006ac:	e000      	b.n	80006b0 <setHEOW+0x1c>
 80006ae:	4907      	ldr	r1, [pc, #28]	; (80006cc <setHEOW+0x38>)
 80006b0:	2364      	movs	r3, #100	; 0x64
 80006b2:	2201      	movs	r2, #1
 80006b4:	4806      	ldr	r0, [pc, #24]	; (80006d0 <setHEOW+0x3c>)
 80006b6:	f001 fd3a 	bl	800212e <HAL_SPI_Transmit>
	pin_control(false);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f7ff ff9a 	bl	80005f4 <pin_control>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	08003295 	.word	0x08003295
 80006cc:	08003296 	.word	0x08003296
 80006d0:	20000910 	.word	0x20000910

080006d4 <waitForEndOfWriting>:

void waitForEndOfWriting(){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	pin_control(true);
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff ff8b 	bl	80005f4 <pin_control>

	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET);
 80006de:	bf00      	nop
 80006e0:	2110      	movs	r1, #16
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <waitForEndOfWriting+0x24>)
 80006e4:	f001 f820 	bl	8001728 <HAL_GPIO_ReadPin>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d0f8      	beq.n	80006e0 <waitForEndOfWriting+0xc>

	pin_control(false);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff ff80 	bl	80005f4 <pin_control>
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40020400 	.word	0x40020400

080006fc <setWriteMode>:

void setWriteMode(bool state){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	pin_control(true);
 8000706:	2001      	movs	r0, #1
 8000708:	f7ff ff74 	bl	80005f4 <pin_control>
	HAL_SPI_Transmit(&hspi1, state == true ? (uint8_t *)&writeEnableCode : (uint8_t *)&writeDisableCode, 1, waitTime);
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <setWriteMode+0x1a>
 8000712:	4907      	ldr	r1, [pc, #28]	; (8000730 <setWriteMode+0x34>)
 8000714:	e000      	b.n	8000718 <setWriteMode+0x1c>
 8000716:	4907      	ldr	r1, [pc, #28]	; (8000734 <setWriteMode+0x38>)
 8000718:	2364      	movs	r3, #100	; 0x64
 800071a:	2201      	movs	r2, #1
 800071c:	4806      	ldr	r0, [pc, #24]	; (8000738 <setWriteMode+0x3c>)
 800071e:	f001 fd06 	bl	800212e <HAL_SPI_Transmit>
	pin_control(false);
 8000722:	2000      	movs	r0, #0
 8000724:	f7ff ff66 	bl	80005f4 <pin_control>
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	08003291 	.word	0x08003291
 8000734:	08003292 	.word	0x08003292
 8000738:	20000910 	.word	0x20000910

0800073c <flash_clear>:

void flash_clear(){
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	    setWriteMode(true);
 8000740:	2001      	movs	r0, #1
 8000742:	f7ff ffdb 	bl	80006fc <setWriteMode>
		pin_control(true);
 8000746:	2001      	movs	r0, #1
 8000748:	f7ff ff54 	bl	80005f4 <pin_control>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&eraseAllCode, 1, waitTime);
 800074c:	2364      	movs	r3, #100	; 0x64
 800074e:	2201      	movs	r2, #1
 8000750:	4907      	ldr	r1, [pc, #28]	; (8000770 <flash_clear+0x34>)
 8000752:	4808      	ldr	r0, [pc, #32]	; (8000774 <flash_clear+0x38>)
 8000754:	f001 fceb 	bl	800212e <HAL_SPI_Transmit>
		pin_control(false);
 8000758:	2000      	movs	r0, #0
 800075a:	f7ff ff4b 	bl	80005f4 <pin_control>
	    setWriteMode(false);
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff ffcc 	bl	80006fc <setWriteMode>
	    HAL_Delay(100);
 8000764:	2064      	movs	r0, #100	; 0x64
 8000766:	f000 fd39 	bl	80011dc <HAL_Delay>
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	08003293 	.word	0x08003293
 8000774:	20000910 	.word	0x20000910

08000778 <flash_write>:

void flash_write(uint32_t memory, uint8_t *line, uint8_t lineLength){
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	4613      	mov	r3, r2
 8000784:	71fb      	strb	r3, [r7, #7]
	setWriteStatus();
 8000786:	f7ff ff5d 	bl	8000644 <setWriteStatus>
	setWriteMode(true);
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ffb6 	bl	80006fc <setWriteMode>
	setHEOW(true);
 8000790:	2001      	movs	r0, #1
 8000792:	f7ff ff7f 	bl	8000694 <setHEOW>

	uint8_t startWritingPoint[] = {autoAddressIncrementCode, memory >> 16, memory >> 8, memory, line[0], line[1]};
 8000796:	23ad      	movs	r3, #173	; 0xad
 8000798:	753b      	strb	r3, [r7, #20]
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	0c1b      	lsrs	r3, r3, #16
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	757b      	strb	r3, [r7, #21]
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	75bb      	strb	r3, [r7, #22]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	75fb      	strb	r3, [r7, #23]
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	763b      	strb	r3, [r7, #24]
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	785b      	ldrb	r3, [r3, #1]
 80007ba:	767b      	strb	r3, [r7, #25]
	pin_control(true);
 80007bc:	2001      	movs	r0, #1
 80007be:	f7ff ff19 	bl	80005f4 <pin_control>
	HAL_SPI_Transmit(&hspi1, startWritingPoint, sizeof(startWritingPoint), waitTime);
 80007c2:	f107 0114 	add.w	r1, r7, #20
 80007c6:	2364      	movs	r3, #100	; 0x64
 80007c8:	2206      	movs	r2, #6
 80007ca:	4823      	ldr	r0, [pc, #140]	; (8000858 <flash_write+0xe0>)
 80007cc:	f001 fcaf 	bl	800212e <HAL_SPI_Transmit>
	pin_control(false);
 80007d0:	2000      	movs	r0, #0
 80007d2:	f7ff ff0f 	bl	80005f4 <pin_control>
	waitForEndOfWriting();
 80007d6:	f7ff ff7d 	bl	80006d4 <waitForEndOfWriting>

	uint8_t twoBytesToPass[] = {autoAddressIncrementCode, line[0], line[1]};
 80007da:	23ad      	movs	r3, #173	; 0xad
 80007dc:	743b      	strb	r3, [r7, #16]
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	747b      	strb	r3, [r7, #17]
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	785b      	ldrb	r3, [r3, #1]
 80007e8:	74bb      	strb	r3, [r7, #18]
	for (int i = 2; i < lineLength; i += 2){
 80007ea:	2302      	movs	r3, #2
 80007ec:	61fb      	str	r3, [r7, #28]
 80007ee:	e024      	b.n	800083a <flash_write+0xc2>
		twoBytesToPass[1] = line[i];
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	4413      	add	r3, r2
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	747b      	strb	r3, [r7, #17]
		if (i + 1 < lineLength)
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	1c5a      	adds	r2, r3, #1
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	429a      	cmp	r2, r3
 8000802:	da06      	bge.n	8000812 <flash_write+0x9a>
			twoBytesToPass[2] = line[i + 1];
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	3301      	adds	r3, #1
 8000808:	68ba      	ldr	r2, [r7, #8]
 800080a:	4413      	add	r3, r2
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	74bb      	strb	r3, [r7, #18]
 8000810:	e001      	b.n	8000816 <flash_write+0x9e>
		else
			twoBytesToPass[2] = 255;
 8000812:	23ff      	movs	r3, #255	; 0xff
 8000814:	74bb      	strb	r3, [r7, #18]
		pin_control(true);
 8000816:	2001      	movs	r0, #1
 8000818:	f7ff feec 	bl	80005f4 <pin_control>
		HAL_SPI_Transmit(&hspi1, twoBytesToPass, sizeof(twoBytesToPass), waitTime);
 800081c:	f107 0110 	add.w	r1, r7, #16
 8000820:	2364      	movs	r3, #100	; 0x64
 8000822:	2203      	movs	r2, #3
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <flash_write+0xe0>)
 8000826:	f001 fc82 	bl	800212e <HAL_SPI_Transmit>
		pin_control(false);
 800082a:	2000      	movs	r0, #0
 800082c:	f7ff fee2 	bl	80005f4 <pin_control>

		waitForEndOfWriting();
 8000830:	f7ff ff50 	bl	80006d4 <waitForEndOfWriting>
	for (int i = 2; i < lineLength; i += 2){
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	3302      	adds	r3, #2
 8000838:	61fb      	str	r3, [r7, #28]
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	69fa      	ldr	r2, [r7, #28]
 800083e:	429a      	cmp	r2, r3
 8000840:	dbd6      	blt.n	80007f0 <flash_write+0x78>
	}

	setWriteMode(false);
 8000842:	2000      	movs	r0, #0
 8000844:	f7ff ff5a 	bl	80006fc <setWriteMode>
	setHEOW(false);
 8000848:	2000      	movs	r0, #0
 800084a:	f7ff ff23 	bl	8000694 <setHEOW>
}
 800084e:	bf00      	nop
 8000850:	3720      	adds	r7, #32
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000910 	.word	0x20000910

0800085c <flash_write_text>:

void flash_write_text(){
 800085c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0

	strcat(timeCapsule[0], "From: Hrona Yurii, yura.grona.011i@gmail.com\r\n");
 8000862:	48aa      	ldr	r0, [pc, #680]	; (8000b0c <flash_write_text+0x2b0>)
 8000864:	f7ff fcb0 	bl	80001c8 <strlen>
 8000868:	4603      	mov	r3, r0
 800086a:	461a      	mov	r2, r3
 800086c:	4ba7      	ldr	r3, [pc, #668]	; (8000b0c <flash_write_text+0x2b0>)
 800086e:	4413      	add	r3, r2
 8000870:	4aa7      	ldr	r2, [pc, #668]	; (8000b10 <flash_write_text+0x2b4>)
 8000872:	4615      	mov	r5, r2
 8000874:	469c      	mov	ip, r3
 8000876:	f105 0e20 	add.w	lr, r5, #32
 800087a:	4664      	mov	r4, ip
 800087c:	462e      	mov	r6, r5
 800087e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000880:	6020      	str	r0, [r4, #0]
 8000882:	6061      	str	r1, [r4, #4]
 8000884:	60a2      	str	r2, [r4, #8]
 8000886:	60e3      	str	r3, [r4, #12]
 8000888:	3510      	adds	r5, #16
 800088a:	f10c 0c10 	add.w	ip, ip, #16
 800088e:	4575      	cmp	r5, lr
 8000890:	d1f3      	bne.n	800087a <flash_write_text+0x1e>
 8000892:	4664      	mov	r4, ip
 8000894:	462b      	mov	r3, r5
 8000896:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000898:	6020      	str	r0, [r4, #0]
 800089a:	6061      	str	r1, [r4, #4]
 800089c:	60a2      	str	r2, [r4, #8]
 800089e:	881a      	ldrh	r2, [r3, #0]
 80008a0:	789b      	ldrb	r3, [r3, #2]
 80008a2:	81a2      	strh	r2, [r4, #12]
 80008a4:	73a3      	strb	r3, [r4, #14]
	strcat(timeCapsule[1], "Mentor: Vitalii Kostiuk, vitalii.kostiuk@globallogic.com\r\n");
 80008a6:	489b      	ldr	r0, [pc, #620]	; (8000b14 <flash_write_text+0x2b8>)
 80008a8:	f7ff fc8e 	bl	80001c8 <strlen>
 80008ac:	4603      	mov	r3, r0
 80008ae:	461a      	mov	r2, r3
 80008b0:	4b98      	ldr	r3, [pc, #608]	; (8000b14 <flash_write_text+0x2b8>)
 80008b2:	4413      	add	r3, r2
 80008b4:	4a98      	ldr	r2, [pc, #608]	; (8000b18 <flash_write_text+0x2bc>)
 80008b6:	4614      	mov	r4, r2
 80008b8:	469c      	mov	ip, r3
 80008ba:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80008be:	4665      	mov	r5, ip
 80008c0:	4626      	mov	r6, r4
 80008c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008c4:	6028      	str	r0, [r5, #0]
 80008c6:	6069      	str	r1, [r5, #4]
 80008c8:	60aa      	str	r2, [r5, #8]
 80008ca:	60eb      	str	r3, [r5, #12]
 80008cc:	3410      	adds	r4, #16
 80008ce:	f10c 0c10 	add.w	ip, ip, #16
 80008d2:	4574      	cmp	r4, lr
 80008d4:	d1f3      	bne.n	80008be <flash_write_text+0x62>
 80008d6:	4662      	mov	r2, ip
 80008d8:	4623      	mov	r3, r4
 80008da:	cb03      	ldmia	r3!, {r0, r1}
 80008dc:	6010      	str	r0, [r2, #0]
 80008de:	6051      	str	r1, [r2, #4]
 80008e0:	8819      	ldrh	r1, [r3, #0]
 80008e2:	789b      	ldrb	r3, [r3, #2]
 80008e4:	8111      	strh	r1, [r2, #8]
 80008e6:	7293      	strb	r3, [r2, #10]
	strcat(timeCapsule[2], "Date: 30.11.2021\r\n");
 80008e8:	488c      	ldr	r0, [pc, #560]	; (8000b1c <flash_write_text+0x2c0>)
 80008ea:	f7ff fc6d 	bl	80001c8 <strlen>
 80008ee:	4603      	mov	r3, r0
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b8a      	ldr	r3, [pc, #552]	; (8000b1c <flash_write_text+0x2c0>)
 80008f4:	4413      	add	r3, r2
 80008f6:	4a8a      	ldr	r2, [pc, #552]	; (8000b20 <flash_write_text+0x2c4>)
 80008f8:	461d      	mov	r5, r3
 80008fa:	4614      	mov	r4, r2
 80008fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008fe:	6028      	str	r0, [r5, #0]
 8000900:	6069      	str	r1, [r5, #4]
 8000902:	60aa      	str	r2, [r5, #8]
 8000904:	60eb      	str	r3, [r5, #12]
 8000906:	8823      	ldrh	r3, [r4, #0]
 8000908:	78a2      	ldrb	r2, [r4, #2]
 800090a:	822b      	strh	r3, [r5, #16]
 800090c:	4613      	mov	r3, r2
 800090e:	74ab      	strb	r3, [r5, #18]
	strcat(timeCapsule[3], "TIME CAPSULE\r\n");
 8000910:	4884      	ldr	r0, [pc, #528]	; (8000b24 <flash_write_text+0x2c8>)
 8000912:	f7ff fc59 	bl	80001c8 <strlen>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	4b82      	ldr	r3, [pc, #520]	; (8000b24 <flash_write_text+0x2c8>)
 800091c:	4413      	add	r3, r2
 800091e:	4a82      	ldr	r2, [pc, #520]	; (8000b28 <flash_write_text+0x2cc>)
 8000920:	461c      	mov	r4, r3
 8000922:	4613      	mov	r3, r2
 8000924:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000926:	6020      	str	r0, [r4, #0]
 8000928:	6061      	str	r1, [r4, #4]
 800092a:	60a2      	str	r2, [r4, #8]
 800092c:	881a      	ldrh	r2, [r3, #0]
 800092e:	789b      	ldrb	r3, [r3, #2]
 8000930:	81a2      	strh	r2, [r4, #12]
 8000932:	73a3      	strb	r3, [r4, #14]
	strcat(timeCapsule[4], "Les Goémons (Khrystyna Soloviy)\r\n");
 8000934:	487d      	ldr	r0, [pc, #500]	; (8000b2c <flash_write_text+0x2d0>)
 8000936:	f7ff fc47 	bl	80001c8 <strlen>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	4b7b      	ldr	r3, [pc, #492]	; (8000b2c <flash_write_text+0x2d0>)
 8000940:	4413      	add	r3, r2
 8000942:	4a7b      	ldr	r2, [pc, #492]	; (8000b30 <flash_write_text+0x2d4>)
 8000944:	4614      	mov	r4, r2
 8000946:	469c      	mov	ip, r3
 8000948:	f104 0e20 	add.w	lr, r4, #32
 800094c:	4665      	mov	r5, ip
 800094e:	4626      	mov	r6, r4
 8000950:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000952:	6028      	str	r0, [r5, #0]
 8000954:	6069      	str	r1, [r5, #4]
 8000956:	60aa      	str	r2, [r5, #8]
 8000958:	60eb      	str	r3, [r5, #12]
 800095a:	3410      	adds	r4, #16
 800095c:	f10c 0c10 	add.w	ip, ip, #16
 8000960:	4574      	cmp	r4, lr
 8000962:	d1f3      	bne.n	800094c <flash_write_text+0xf0>
 8000964:	4663      	mov	r3, ip
 8000966:	4622      	mov	r2, r4
 8000968:	8811      	ldrh	r1, [r2, #0]
 800096a:	7892      	ldrb	r2, [r2, #2]
 800096c:	8019      	strh	r1, [r3, #0]
 800096e:	709a      	strb	r2, [r3, #2]
	strcat(timeCapsule[5], "Dessous la vague bougent\r\n");
 8000970:	4870      	ldr	r0, [pc, #448]	; (8000b34 <flash_write_text+0x2d8>)
 8000972:	f7ff fc29 	bl	80001c8 <strlen>
 8000976:	4603      	mov	r3, r0
 8000978:	461a      	mov	r2, r3
 800097a:	4b6e      	ldr	r3, [pc, #440]	; (8000b34 <flash_write_text+0x2d8>)
 800097c:	4413      	add	r3, r2
 800097e:	4a6e      	ldr	r2, [pc, #440]	; (8000b38 <flash_write_text+0x2dc>)
 8000980:	461d      	mov	r5, r3
 8000982:	4614      	mov	r4, r2
 8000984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000986:	6028      	str	r0, [r5, #0]
 8000988:	6069      	str	r1, [r5, #4]
 800098a:	60aa      	str	r2, [r5, #8]
 800098c:	60eb      	str	r3, [r5, #12]
 800098e:	cc03      	ldmia	r4!, {r0, r1}
 8000990:	6128      	str	r0, [r5, #16]
 8000992:	6169      	str	r1, [r5, #20]
 8000994:	8823      	ldrh	r3, [r4, #0]
 8000996:	78a2      	ldrb	r2, [r4, #2]
 8000998:	832b      	strh	r3, [r5, #24]
 800099a:	4613      	mov	r3, r2
 800099c:	76ab      	strb	r3, [r5, #26]
	strcat(timeCapsule[6], "Les goémons\r\n");
 800099e:	4867      	ldr	r0, [pc, #412]	; (8000b3c <flash_write_text+0x2e0>)
 80009a0:	f7ff fc12 	bl	80001c8 <strlen>
 80009a4:	4603      	mov	r3, r0
 80009a6:	461a      	mov	r2, r3
 80009a8:	4b64      	ldr	r3, [pc, #400]	; (8000b3c <flash_write_text+0x2e0>)
 80009aa:	4413      	add	r3, r2
 80009ac:	4a64      	ldr	r2, [pc, #400]	; (8000b40 <flash_write_text+0x2e4>)
 80009ae:	461c      	mov	r4, r3
 80009b0:	4613      	mov	r3, r2
 80009b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80009b4:	6020      	str	r0, [r4, #0]
 80009b6:	6061      	str	r1, [r4, #4]
 80009b8:	60a2      	str	r2, [r4, #8]
 80009ba:	881a      	ldrh	r2, [r3, #0]
 80009bc:	789b      	ldrb	r3, [r3, #2]
 80009be:	81a2      	strh	r2, [r4, #12]
 80009c0:	73a3      	strb	r3, [r4, #14]
	strcat(timeCapsule[7], "Mes amours leur ressemblent\r\n");
 80009c2:	4860      	ldr	r0, [pc, #384]	; (8000b44 <flash_write_text+0x2e8>)
 80009c4:	f7ff fc00 	bl	80001c8 <strlen>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	4b5d      	ldr	r3, [pc, #372]	; (8000b44 <flash_write_text+0x2e8>)
 80009ce:	4413      	add	r3, r2
 80009d0:	4a5d      	ldr	r2, [pc, #372]	; (8000b48 <flash_write_text+0x2ec>)
 80009d2:	461d      	mov	r5, r3
 80009d4:	4614      	mov	r4, r2
 80009d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009d8:	6028      	str	r0, [r5, #0]
 80009da:	6069      	str	r1, [r5, #4]
 80009dc:	60aa      	str	r2, [r5, #8]
 80009de:	60eb      	str	r3, [r5, #12]
 80009e0:	cc07      	ldmia	r4!, {r0, r1, r2}
 80009e2:	6128      	str	r0, [r5, #16]
 80009e4:	6169      	str	r1, [r5, #20]
 80009e6:	61aa      	str	r2, [r5, #24]
 80009e8:	8823      	ldrh	r3, [r4, #0]
 80009ea:	83ab      	strh	r3, [r5, #28]
	strcat(timeCapsule[8], "Il n'en reste il me semble\r\n");
 80009ec:	4857      	ldr	r0, [pc, #348]	; (8000b4c <flash_write_text+0x2f0>)
 80009ee:	f7ff fbeb 	bl	80001c8 <strlen>
 80009f2:	4603      	mov	r3, r0
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b55      	ldr	r3, [pc, #340]	; (8000b4c <flash_write_text+0x2f0>)
 80009f8:	4413      	add	r3, r2
 80009fa:	4a55      	ldr	r2, [pc, #340]	; (8000b50 <flash_write_text+0x2f4>)
 80009fc:	461d      	mov	r5, r3
 80009fe:	4614      	mov	r4, r2
 8000a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a02:	6028      	str	r0, [r5, #0]
 8000a04:	6069      	str	r1, [r5, #4]
 8000a06:	60aa      	str	r2, [r5, #8]
 8000a08:	60eb      	str	r3, [r5, #12]
 8000a0a:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000a0c:	6128      	str	r0, [r5, #16]
 8000a0e:	6169      	str	r1, [r5, #20]
 8000a10:	61aa      	str	r2, [r5, #24]
 8000a12:	7823      	ldrb	r3, [r4, #0]
 8000a14:	772b      	strb	r3, [r5, #28]
	strcat(timeCapsule[9], "Que goémons\r\n");
 8000a16:	484f      	ldr	r0, [pc, #316]	; (8000b54 <flash_write_text+0x2f8>)
 8000a18:	f7ff fbd6 	bl	80001c8 <strlen>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b4c      	ldr	r3, [pc, #304]	; (8000b54 <flash_write_text+0x2f8>)
 8000a22:	4413      	add	r3, r2
 8000a24:	4a4c      	ldr	r2, [pc, #304]	; (8000b58 <flash_write_text+0x2fc>)
 8000a26:	461c      	mov	r4, r3
 8000a28:	4613      	mov	r3, r2
 8000a2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a2c:	6020      	str	r0, [r4, #0]
 8000a2e:	6061      	str	r1, [r4, #4]
 8000a30:	60a2      	str	r2, [r4, #8]
 8000a32:	881a      	ldrh	r2, [r3, #0]
 8000a34:	789b      	ldrb	r3, [r3, #2]
 8000a36:	81a2      	strh	r2, [r4, #12]
 8000a38:	73a3      	strb	r3, [r4, #14]
	strcat(timeCapsule[10], "Que des fleurs arrachées\r\n");
 8000a3a:	4848      	ldr	r0, [pc, #288]	; (8000b5c <flash_write_text+0x300>)
 8000a3c:	f7ff fbc4 	bl	80001c8 <strlen>
 8000a40:	4603      	mov	r3, r0
 8000a42:	461a      	mov	r2, r3
 8000a44:	4b45      	ldr	r3, [pc, #276]	; (8000b5c <flash_write_text+0x300>)
 8000a46:	4413      	add	r3, r2
 8000a48:	4a45      	ldr	r2, [pc, #276]	; (8000b60 <flash_write_text+0x304>)
 8000a4a:	461d      	mov	r5, r3
 8000a4c:	4614      	mov	r4, r2
 8000a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a50:	6028      	str	r0, [r5, #0]
 8000a52:	6069      	str	r1, [r5, #4]
 8000a54:	60aa      	str	r2, [r5, #8]
 8000a56:	60eb      	str	r3, [r5, #12]
 8000a58:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000a5a:	6128      	str	r0, [r5, #16]
 8000a5c:	6169      	str	r1, [r5, #20]
 8000a5e:	61aa      	str	r2, [r5, #24]
	strcat(timeCapsule[11], "Se mourant comme les\r\n");
 8000a60:	4840      	ldr	r0, [pc, #256]	; (8000b64 <flash_write_text+0x308>)
 8000a62:	f7ff fbb1 	bl	80001c8 <strlen>
 8000a66:	4603      	mov	r3, r0
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b3e      	ldr	r3, [pc, #248]	; (8000b64 <flash_write_text+0x308>)
 8000a6c:	4413      	add	r3, r2
 8000a6e:	4a3e      	ldr	r2, [pc, #248]	; (8000b68 <flash_write_text+0x30c>)
 8000a70:	461c      	mov	r4, r3
 8000a72:	4615      	mov	r5, r2
 8000a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a76:	6020      	str	r0, [r4, #0]
 8000a78:	6061      	str	r1, [r4, #4]
 8000a7a:	60a2      	str	r2, [r4, #8]
 8000a7c:	60e3      	str	r3, [r4, #12]
 8000a7e:	6828      	ldr	r0, [r5, #0]
 8000a80:	6120      	str	r0, [r4, #16]
 8000a82:	88ab      	ldrh	r3, [r5, #4]
 8000a84:	79aa      	ldrb	r2, [r5, #6]
 8000a86:	82a3      	strh	r3, [r4, #20]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	75a3      	strb	r3, [r4, #22]
	strcat(timeCapsule[12], "Noirs goémons\r\n");
 8000a8c:	4837      	ldr	r0, [pc, #220]	; (8000b6c <flash_write_text+0x310>)
 8000a8e:	f7ff fb9b 	bl	80001c8 <strlen>
 8000a92:	4603      	mov	r3, r0
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b35      	ldr	r3, [pc, #212]	; (8000b6c <flash_write_text+0x310>)
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a35      	ldr	r2, [pc, #212]	; (8000b70 <flash_write_text+0x314>)
 8000a9c:	461d      	mov	r5, r3
 8000a9e:	4614      	mov	r4, r2
 8000aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aa2:	6028      	str	r0, [r5, #0]
 8000aa4:	6069      	str	r1, [r5, #4]
 8000aa6:	60aa      	str	r2, [r5, #8]
 8000aa8:	60eb      	str	r3, [r5, #12]
 8000aaa:	7823      	ldrb	r3, [r4, #0]
 8000aac:	742b      	strb	r3, [r5, #16]

	memory = 0;
 8000aae:	4b31      	ldr	r3, [pc, #196]	; (8000b74 <flash_write_text+0x318>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < maxLines; i++){
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	e020      	b.n	8000afc <flash_write_text+0x2a0>
		  flash_write(memory, (uint8_t *)timeCapsule[i], strlen(timeCapsule[i]));
 8000aba:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <flash_write_text+0x318>)
 8000abc:	681c      	ldr	r4, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2264      	movs	r2, #100	; 0x64
 8000ac2:	fb02 f303 	mul.w	r3, r2, r3
 8000ac6:	4a11      	ldr	r2, [pc, #68]	; (8000b0c <flash_write_text+0x2b0>)
 8000ac8:	189d      	adds	r5, r3, r2
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2264      	movs	r2, #100	; 0x64
 8000ace:	fb02 f303 	mul.w	r3, r2, r3
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <flash_write_text+0x2b0>)
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fb76 	bl	80001c8 <strlen>
 8000adc:	4603      	mov	r3, r0
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4629      	mov	r1, r5
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	f7ff fe47 	bl	8000778 <flash_write>
		  memory += 4096;
 8000aea:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <flash_write_text+0x318>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000af2:	4a20      	ldr	r2, [pc, #128]	; (8000b74 <flash_write_text+0x318>)
 8000af4:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < maxLines; i++){
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3301      	adds	r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b13      	cmp	r3, #19
 8000b00:	dddb      	ble.n	8000aba <flash_write_text+0x25e>
	}
}
 8000b02:	bf00      	nop
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b0c:	200000fc 	.word	0x200000fc
 8000b10:	08003064 	.word	0x08003064
 8000b14:	20000160 	.word	0x20000160
 8000b18:	08003094 	.word	0x08003094
 8000b1c:	200001c4 	.word	0x200001c4
 8000b20:	080030d0 	.word	0x080030d0
 8000b24:	20000228 	.word	0x20000228
 8000b28:	080030e4 	.word	0x080030e4
 8000b2c:	2000028c 	.word	0x2000028c
 8000b30:	080030f4 	.word	0x080030f4
 8000b34:	200002f0 	.word	0x200002f0
 8000b38:	08003118 	.word	0x08003118
 8000b3c:	20000354 	.word	0x20000354
 8000b40:	08003134 	.word	0x08003134
 8000b44:	200003b8 	.word	0x200003b8
 8000b48:	08003144 	.word	0x08003144
 8000b4c:	2000041c 	.word	0x2000041c
 8000b50:	08003164 	.word	0x08003164
 8000b54:	20000480 	.word	0x20000480
 8000b58:	08003184 	.word	0x08003184
 8000b5c:	200004e4 	.word	0x200004e4
 8000b60:	08003194 	.word	0x08003194
 8000b64:	20000548 	.word	0x20000548
 8000b68:	080031b0 	.word	0x080031b0
 8000b6c:	200005ac 	.word	0x200005ac
 8000b70:	080031c8 	.word	0x080031c8
 8000b74:	200000f8 	.word	0x200000f8

08000b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b7e:	f000 fabb 	bl	80010f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b82:	f000 f867 	bl	8000c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b86:	f000 f923 	bl	8000dd0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b8a:	f000 f8c1 	bl	8000d10 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000b8e:	f000 f8f5 	bl	8000d7c <MX_USART3_UART_Init>
  while (1)
  {

   	  uint8_t rcvBuf;
  	  HAL_StatusTypeDef result;
  	  result = HAL_UART_Receive(&huart3, &rcvBuf, 1, 1000);
 8000b92:	1db9      	adds	r1, r7, #6
 8000b94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b98:	2201      	movs	r2, #1
 8000b9a:	4826      	ldr	r0, [pc, #152]	; (8000c34 <main+0xbc>)
 8000b9c:	f001 ff4f 	bl	8002a3e <HAL_UART_Receive>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	71fb      	strb	r3, [r7, #7]

  	  if(counter_for_menu){
 8000ba4:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <main+0xc0>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d012      	beq.n	8000bd2 <main+0x5a>
  	  HAL_UART_Transmit(&huart3, (uint8_t *)"\033[2J", strlen("\033[2J"),10);      //Putty screen clear
 8000bac:	230a      	movs	r3, #10
 8000bae:	2204      	movs	r2, #4
 8000bb0:	4922      	ldr	r1, [pc, #136]	; (8000c3c <main+0xc4>)
 8000bb2:	4820      	ldr	r0, [pc, #128]	; (8000c34 <main+0xbc>)
 8000bb4:	f001 feb1 	bl	800291a <HAL_UART_Transmit>
  	  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\nMenu:\r\npress 1 to read flash\r\npress 2 to write in flash\r\npress 3 to erase flash\r\n",strlen("\r\nMenu:\r\npress 1 to read flash\r\npress 2 to write in flash\r\npress 3 to erase flash\r\n"),1000);
 8000bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bbc:	2253      	movs	r2, #83	; 0x53
 8000bbe:	4920      	ldr	r1, [pc, #128]	; (8000c40 <main+0xc8>)
 8000bc0:	481c      	ldr	r0, [pc, #112]	; (8000c34 <main+0xbc>)
 8000bc2:	f001 feaa 	bl	800291a <HAL_UART_Transmit>
  	  counter_for_menu--;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <main+0xc0>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <main+0xc0>)
 8000bd0:	701a      	strb	r2, [r3, #0]
  	  }

	  	  if (result == HAL_OK){
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d12b      	bne.n	8000c30 <main+0xb8>

  		  switch(rcvBuf){
 8000bd8:	79bb      	ldrb	r3, [r7, #6]
 8000bda:	2b33      	cmp	r3, #51	; 0x33
 8000bdc:	d018      	beq.n	8000c10 <main+0x98>
 8000bde:	2b33      	cmp	r3, #51	; 0x33
 8000be0:	dc1f      	bgt.n	8000c22 <main+0xaa>
 8000be2:	2b31      	cmp	r3, #49	; 0x31
 8000be4:	d002      	beq.n	8000bec <main+0x74>
 8000be6:	2b32      	cmp	r3, #50	; 0x32
 8000be8:	d009      	beq.n	8000bfe <main+0x86>
 8000bea:	e01a      	b.n	8000c22 <main+0xaa>

  			  case '1':
  				  flash_read();
 8000bec:	f7ff fc88 	bl	8000500 <flash_read>
  				  HAL_UART_Transmit(&huart3, (uint8_t *)"Flash is read\r\n", strlen("Flash is read\r\n"),10);
 8000bf0:	230a      	movs	r3, #10
 8000bf2:	220f      	movs	r2, #15
 8000bf4:	4913      	ldr	r1, [pc, #76]	; (8000c44 <main+0xcc>)
 8000bf6:	480f      	ldr	r0, [pc, #60]	; (8000c34 <main+0xbc>)
 8000bf8:	f001 fe8f 	bl	800291a <HAL_UART_Transmit>
  			  break;
 8000bfc:	e019      	b.n	8000c32 <main+0xba>

  			  case '2':
  				 flash_write_text();
 8000bfe:	f7ff fe2d 	bl	800085c <flash_write_text>
				 HAL_UART_Transmit(&huart3, (uint8_t *)"Write info in Flash compeleted\r\n", strlen("Write info in Flash compeleted\r\n"),10);
 8000c02:	230a      	movs	r3, #10
 8000c04:	2220      	movs	r2, #32
 8000c06:	4910      	ldr	r1, [pc, #64]	; (8000c48 <main+0xd0>)
 8000c08:	480a      	ldr	r0, [pc, #40]	; (8000c34 <main+0xbc>)
 8000c0a:	f001 fe86 	bl	800291a <HAL_UART_Transmit>
			  break;
 8000c0e:	e010      	b.n	8000c32 <main+0xba>

  			  case '3':
  				 flash_clear();
 8000c10:	f7ff fd94 	bl	800073c <flash_clear>
				 HAL_UART_Transmit(&huart3, (uint8_t *)"Flash erased\r\n", strlen("Flash erased\r\n"),10);
 8000c14:	230a      	movs	r3, #10
 8000c16:	220e      	movs	r2, #14
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <main+0xd4>)
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <main+0xbc>)
 8000c1c:	f001 fe7d 	bl	800291a <HAL_UART_Transmit>
  			  break;
 8000c20:	e007      	b.n	8000c32 <main+0xba>

  			  default:
  				  HAL_UART_Transmit(&huart3, (uint8_t *)"Unexpected_command\r\n", strlen("Unexpected_command\r\n"),10);
 8000c22:	230a      	movs	r3, #10
 8000c24:	2214      	movs	r2, #20
 8000c26:	490a      	ldr	r1, [pc, #40]	; (8000c50 <main+0xd8>)
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <main+0xbc>)
 8000c2a:	f001 fe76 	bl	800291a <HAL_UART_Transmit>
  				  break;
 8000c2e:	e000      	b.n	8000c32 <main+0xba>
  		  }
  	  }
 8000c30:	bf00      	nop
  {
 8000c32:	e7ae      	b.n	8000b92 <main+0x1a>
 8000c34:	200008cc 	.word	0x200008cc
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	080031dc 	.word	0x080031dc
 8000c40:	080031e4 	.word	0x080031e4
 8000c44:	08003238 	.word	0x08003238
 8000c48:	08003248 	.word	0x08003248
 8000c4c:	0800326c 	.word	0x0800326c
 8000c50:	0800327c 	.word	0x0800327c

08000c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b094      	sub	sp, #80	; 0x50
 8000c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5a:	f107 0320 	add.w	r3, r7, #32
 8000c5e:	2230      	movs	r2, #48	; 0x30
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f002 f9e8 	bl	8003038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <SystemClock_Config+0xb4>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	4a21      	ldr	r2, [pc, #132]	; (8000d08 <SystemClock_Config+0xb4>)
 8000c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c86:	6413      	str	r3, [r2, #64]	; 0x40
 8000c88:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <SystemClock_Config+0xb4>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <SystemClock_Config+0xb8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a1b      	ldr	r2, [pc, #108]	; (8000d0c <SystemClock_Config+0xb8>)
 8000c9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <SystemClock_Config+0xb8>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb8:	2310      	movs	r3, #16
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc0:	f107 0320 	add.w	r3, r7, #32
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fd61 	bl	800178c <HAL_RCC_OscConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000cd0:	f000 f8ce 	bl	8000e70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 ffc4 	bl	8001c7c <HAL_RCC_ClockConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000cfa:	f000 f8b9 	bl	8000e70 <Error_Handler>
  }
}
 8000cfe:	bf00      	nop
 8000d00:	3750      	adds	r7, #80	; 0x50
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40007000 	.word	0x40007000

08000d10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <MX_SPI1_Init+0x64>)
 8000d16:	4a18      	ldr	r2, [pc, #96]	; (8000d78 <MX_SPI1_Init+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d1a:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <MX_SPI1_Init+0x64>)
 8000d1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d22:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <MX_SPI1_Init+0x64>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <MX_SPI1_Init+0x64>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_SPI1_Init+0x64>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_SPI1_Init+0x64>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_SPI1_Init+0x64>)
 8000d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_SPI1_Init+0x64>)
 8000d44:	2230      	movs	r2, #48	; 0x30
 8000d46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <MX_SPI1_Init+0x64>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_SPI1_Init+0x64>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <MX_SPI1_Init+0x64>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_SPI1_Init+0x64>)
 8000d5c:	220a      	movs	r2, #10
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d60:	4804      	ldr	r0, [pc, #16]	; (8000d74 <MX_SPI1_Init+0x64>)
 8000d62:	f001 f95b 	bl	800201c <HAL_SPI_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d6c:	f000 f880 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000910 	.word	0x20000910
 8000d78:	40013000 	.word	0x40013000

08000d7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_USART3_UART_Init+0x4c>)
 8000d82:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <MX_USART3_UART_Init+0x50>)
 8000d84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <MX_USART3_UART_Init+0x4c>)
 8000d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_USART3_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_USART3_UART_Init+0x4c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <MX_USART3_UART_Init+0x4c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_USART3_UART_Init+0x4c>)
 8000da2:	220c      	movs	r2, #12
 8000da4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <MX_USART3_UART_Init+0x4c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_USART3_UART_Init+0x4c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_USART3_UART_Init+0x4c>)
 8000db4:	f001 fd64 	bl	8002880 <HAL_UART_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000dbe:	f000 f857 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200008cc 	.word	0x200008cc
 8000dcc:	40004800 	.word	0x40004800

08000dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <MX_GPIO_Init+0x98>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <MX_GPIO_Init+0x98>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <MX_GPIO_Init+0x98>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <MX_GPIO_Init+0x98>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <MX_GPIO_Init+0x98>)
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <MX_GPIO_Init+0x98>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <MX_GPIO_Init+0x98>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a10      	ldr	r2, [pc, #64]	; (8000e68 <MX_GPIO_Init+0x98>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <MX_GPIO_Init+0x98>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2180      	movs	r1, #128	; 0x80
 8000e3e:	480b      	ldr	r0, [pc, #44]	; (8000e6c <MX_GPIO_Init+0x9c>)
 8000e40:	f000 fc8a 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4804      	ldr	r0, [pc, #16]	; (8000e6c <MX_GPIO_Init+0x9c>)
 8000e5c:	f000 fac8 	bl	80013f0 <HAL_GPIO_Init>

}
 8000e60:	bf00      	nop
 8000e62:	3720      	adds	r7, #32
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020c00 	.word	0x40020c00

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <Error_Handler+0x8>
	...

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800

08000ecc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a28      	ldr	r2, [pc, #160]	; (8000f8c <HAL_SPI_MspInit+0xc0>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d149      	bne.n	8000f82 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <HAL_SPI_MspInit+0xc4>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	4a26      	ldr	r2, [pc, #152]	; (8000f90 <HAL_SPI_MspInit+0xc4>)
 8000ef8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000efc:	6453      	str	r3, [r2, #68]	; 0x44
 8000efe:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <HAL_SPI_MspInit+0xc4>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <HAL_SPI_MspInit+0xc4>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a1f      	ldr	r2, [pc, #124]	; (8000f90 <HAL_SPI_MspInit+0xc4>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <HAL_SPI_MspInit+0xc4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_SPI_MspInit+0xc4>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <HAL_SPI_MspInit+0xc4>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <HAL_SPI_MspInit+0xc4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f42:	2320      	movs	r3, #32
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f52:	2305      	movs	r3, #5
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <HAL_SPI_MspInit+0xc8>)
 8000f5e:	f000 fa47 	bl	80013f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f62:	2330      	movs	r3, #48	; 0x30
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f72:	2305      	movs	r3, #5
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4806      	ldr	r0, [pc, #24]	; (8000f98 <HAL_SPI_MspInit+0xcc>)
 8000f7e:	f000 fa37 	bl	80013f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	; 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40013000 	.word	0x40013000
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40020400 	.word	0x40020400

08000f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a19      	ldr	r2, [pc, #100]	; (8001020 <HAL_UART_MspInit+0x84>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d12c      	bne.n	8001018 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a17      	ldr	r2, [pc, #92]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a10      	ldr	r2, [pc, #64]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ff6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001008:	2307      	movs	r3, #7
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <HAL_UART_MspInit+0x8c>)
 8001014:	f000 f9ec 	bl	80013f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001018:	bf00      	nop
 800101a:	3728      	adds	r7, #40	; 0x28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40004800 	.word	0x40004800
 8001024:	40023800 	.word	0x40023800
 8001028:	40020c00 	.word	0x40020c00

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <MemManage_Handler+0x4>

0800103e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <UsageFault_Handler+0x4>

0800104a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001078:	f000 f890 	bl	800119c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <SystemInit+0x20>)
 8001086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <SystemInit+0x20>)
 800108c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a8:	480d      	ldr	r0, [pc, #52]	; (80010e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010aa:	490e      	ldr	r1, [pc, #56]	; (80010e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010ac:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b0:	e002      	b.n	80010b8 <LoopCopyDataInit>

080010b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b6:	3304      	adds	r3, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010bc:	d3f9      	bcc.n	80010b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010be:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010c0:	4c0b      	ldr	r4, [pc, #44]	; (80010f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c4:	e001      	b.n	80010ca <LoopFillZerobss>

080010c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c8:	3204      	adds	r2, #4

080010ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010cc:	d3fb      	bcc.n	80010c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010ce:	f7ff ffd7 	bl	8001080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010d2:	f001 ff8d 	bl	8002ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d6:	f7ff fd4f 	bl	8000b78 <main>
  bx  lr    
 80010da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010e8:	080032c0 	.word	0x080032c0
  ldr r2, =_sbss
 80010ec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010f0:	2000096c 	.word	0x2000096c

080010f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f4:	e7fe      	b.n	80010f4 <ADC_IRQHandler>
	...

080010f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <HAL_Init+0x40>)
 8001102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001106:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <HAL_Init+0x40>)
 800110e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001112:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <HAL_Init+0x40>)
 800111a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f931 	bl	8001388 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001126:	200f      	movs	r0, #15
 8001128:	f000 f808 	bl	800113c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800112c:	f7ff fea6 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023c00 	.word	0x40023c00

0800113c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x54>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x58>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	fbb3 f3f1 	udiv	r3, r3, r1
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f93b 	bl	80013d6 <HAL_SYSTICK_Config>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e00e      	b.n	8001188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d80a      	bhi.n	8001186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f000 f911 	bl	800139e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_InitTick+0x5c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	e000      	b.n	8001188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000004 	.word	0x20000004
 8001194:	2000000c 	.word	0x2000000c
 8001198:	20000008 	.word	0x20000008

0800119c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x20>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x24>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_IncTick+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	2000000c 	.word	0x2000000c
 80011c0:	20000968 	.word	0x20000968

080011c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <HAL_GetTick+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000968 	.word	0x20000968

080011dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff ffee 	bl	80011c4 <HAL_GetTick>
 80011e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f4:	d005      	beq.n	8001202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_Delay+0x44>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001202:	bf00      	nop
 8001204:	f7ff ffde 	bl	80011c4 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8f7      	bhi.n	8001204 <HAL_Delay+0x28>
  {
  }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000000c 	.word	0x2000000c

08001224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001240:	4013      	ands	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800124c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	60d3      	str	r3, [r2, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <__NVIC_GetPriorityGrouping+0x18>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	f003 0307 	and.w	r3, r3, #7
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	; (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	; (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f1c3 0307 	rsb	r3, r3, #7
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	bf28      	it	cs
 80012fa:	2304      	movcs	r3, #4
 80012fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3304      	adds	r3, #4
 8001302:	2b06      	cmp	r3, #6
 8001304:	d902      	bls.n	800130c <NVIC_EncodePriority+0x30>
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3b03      	subs	r3, #3
 800130a:	e000      	b.n	800130e <NVIC_EncodePriority+0x32>
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 32ff 	mov.w	r2, #4294967295
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001324:	f04f 31ff 	mov.w	r1, #4294967295
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43d9      	mvns	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	4313      	orrs	r3, r2
         );
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001354:	d301      	bcc.n	800135a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001356:	2301      	movs	r3, #1
 8001358:	e00f      	b.n	800137a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135a:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <SysTick_Config+0x40>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001362:	210f      	movs	r1, #15
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f7ff ff8e 	bl	8001288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <SysTick_Config+0x40>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <SysTick_Config+0x40>)
 8001374:	2207      	movs	r2, #7
 8001376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	e000e010 	.word	0xe000e010

08001388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff47 	bl	8001224 <__NVIC_SetPriorityGrouping>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b0:	f7ff ff5c 	bl	800126c <__NVIC_GetPriorityGrouping>
 80013b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68b9      	ldr	r1, [r7, #8]
 80013ba:	6978      	ldr	r0, [r7, #20]
 80013bc:	f7ff ff8e 	bl	80012dc <NVIC_EncodePriority>
 80013c0:	4602      	mov	r2, r0
 80013c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c6:	4611      	mov	r1, r2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff5d 	bl	8001288 <__NVIC_SetPriority>
}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ffb0 	bl	8001344 <SysTick_Config>
 80013e4:	4603      	mov	r3, r0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	; 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
 800140a:	e16b      	b.n	80016e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800140c:	2201      	movs	r2, #1
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	429a      	cmp	r2, r3
 8001426:	f040 815a 	bne.w	80016de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	2b01      	cmp	r3, #1
 8001434:	d005      	beq.n	8001442 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800143e:	2b02      	cmp	r3, #2
 8001440:	d130      	bne.n	80014a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	2203      	movs	r2, #3
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001478:	2201      	movs	r2, #1
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	091b      	lsrs	r3, r3, #4
 800148e:	f003 0201 	and.w	r2, r3, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d017      	beq.n	80014e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d123      	bne.n	8001534 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	08da      	lsrs	r2, r3, #3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3208      	adds	r2, #8
 80014f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	220f      	movs	r2, #15
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	691a      	ldr	r2, [r3, #16]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	08da      	lsrs	r2, r3, #3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3208      	adds	r2, #8
 800152e:	69b9      	ldr	r1, [r7, #24]
 8001530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0203 	and.w	r2, r3, #3
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80b4 	beq.w	80016de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b60      	ldr	r3, [pc, #384]	; (80016fc <HAL_GPIO_Init+0x30c>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	4a5f      	ldr	r2, [pc, #380]	; (80016fc <HAL_GPIO_Init+0x30c>)
 8001580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001584:	6453      	str	r3, [r2, #68]	; 0x44
 8001586:	4b5d      	ldr	r3, [pc, #372]	; (80016fc <HAL_GPIO_Init+0x30c>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001592:	4a5b      	ldr	r2, [pc, #364]	; (8001700 <HAL_GPIO_Init+0x310>)
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	089b      	lsrs	r3, r3, #2
 8001598:	3302      	adds	r3, #2
 800159a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	220f      	movs	r2, #15
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a52      	ldr	r2, [pc, #328]	; (8001704 <HAL_GPIO_Init+0x314>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d02b      	beq.n	8001616 <HAL_GPIO_Init+0x226>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a51      	ldr	r2, [pc, #324]	; (8001708 <HAL_GPIO_Init+0x318>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d025      	beq.n	8001612 <HAL_GPIO_Init+0x222>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a50      	ldr	r2, [pc, #320]	; (800170c <HAL_GPIO_Init+0x31c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d01f      	beq.n	800160e <HAL_GPIO_Init+0x21e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4f      	ldr	r2, [pc, #316]	; (8001710 <HAL_GPIO_Init+0x320>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d019      	beq.n	800160a <HAL_GPIO_Init+0x21a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a4e      	ldr	r2, [pc, #312]	; (8001714 <HAL_GPIO_Init+0x324>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d013      	beq.n	8001606 <HAL_GPIO_Init+0x216>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a4d      	ldr	r2, [pc, #308]	; (8001718 <HAL_GPIO_Init+0x328>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00d      	beq.n	8001602 <HAL_GPIO_Init+0x212>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4c      	ldr	r2, [pc, #304]	; (800171c <HAL_GPIO_Init+0x32c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d007      	beq.n	80015fe <HAL_GPIO_Init+0x20e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4b      	ldr	r2, [pc, #300]	; (8001720 <HAL_GPIO_Init+0x330>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d101      	bne.n	80015fa <HAL_GPIO_Init+0x20a>
 80015f6:	2307      	movs	r3, #7
 80015f8:	e00e      	b.n	8001618 <HAL_GPIO_Init+0x228>
 80015fa:	2308      	movs	r3, #8
 80015fc:	e00c      	b.n	8001618 <HAL_GPIO_Init+0x228>
 80015fe:	2306      	movs	r3, #6
 8001600:	e00a      	b.n	8001618 <HAL_GPIO_Init+0x228>
 8001602:	2305      	movs	r3, #5
 8001604:	e008      	b.n	8001618 <HAL_GPIO_Init+0x228>
 8001606:	2304      	movs	r3, #4
 8001608:	e006      	b.n	8001618 <HAL_GPIO_Init+0x228>
 800160a:	2303      	movs	r3, #3
 800160c:	e004      	b.n	8001618 <HAL_GPIO_Init+0x228>
 800160e:	2302      	movs	r3, #2
 8001610:	e002      	b.n	8001618 <HAL_GPIO_Init+0x228>
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <HAL_GPIO_Init+0x228>
 8001616:	2300      	movs	r3, #0
 8001618:	69fa      	ldr	r2, [r7, #28]
 800161a:	f002 0203 	and.w	r2, r2, #3
 800161e:	0092      	lsls	r2, r2, #2
 8001620:	4093      	lsls	r3, r2
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001628:	4935      	ldr	r1, [pc, #212]	; (8001700 <HAL_GPIO_Init+0x310>)
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	089b      	lsrs	r3, r3, #2
 800162e:	3302      	adds	r3, #2
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001636:	4b3b      	ldr	r3, [pc, #236]	; (8001724 <HAL_GPIO_Init+0x334>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800165a:	4a32      	ldr	r2, [pc, #200]	; (8001724 <HAL_GPIO_Init+0x334>)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001660:	4b30      	ldr	r3, [pc, #192]	; (8001724 <HAL_GPIO_Init+0x334>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001684:	4a27      	ldr	r2, [pc, #156]	; (8001724 <HAL_GPIO_Init+0x334>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800168a:	4b26      	ldr	r3, [pc, #152]	; (8001724 <HAL_GPIO_Init+0x334>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ae:	4a1d      	ldr	r2, [pc, #116]	; (8001724 <HAL_GPIO_Init+0x334>)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <HAL_GPIO_Init+0x334>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016d8:	4a12      	ldr	r2, [pc, #72]	; (8001724 <HAL_GPIO_Init+0x334>)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3301      	adds	r3, #1
 80016e2:	61fb      	str	r3, [r7, #28]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	2b0f      	cmp	r3, #15
 80016e8:	f67f ae90 	bls.w	800140c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	3724      	adds	r7, #36	; 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800
 8001700:	40013800 	.word	0x40013800
 8001704:	40020000 	.word	0x40020000
 8001708:	40020400 	.word	0x40020400
 800170c:	40020800 	.word	0x40020800
 8001710:	40020c00 	.word	0x40020c00
 8001714:	40021000 	.word	0x40021000
 8001718:	40021400 	.word	0x40021400
 800171c:	40021800 	.word	0x40021800
 8001720:	40021c00 	.word	0x40021c00
 8001724:	40013c00 	.word	0x40013c00

08001728 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	887b      	ldrh	r3, [r7, #2]
 800173a:	4013      	ands	r3, r2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
 8001744:	e001      	b.n	800174a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]
 8001764:	4613      	mov	r3, r2
 8001766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001768:	787b      	ldrb	r3, [r7, #1]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800176e:	887a      	ldrh	r2, [r7, #2]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001774:	e003      	b.n	800177e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	041a      	lsls	r2, r3, #16
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	619a      	str	r2, [r3, #24]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e264      	b.n	8001c68 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d075      	beq.n	8001896 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017aa:	4ba3      	ldr	r3, [pc, #652]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d00c      	beq.n	80017d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017b6:	4ba0      	ldr	r3, [pc, #640]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017be:	2b08      	cmp	r3, #8
 80017c0:	d112      	bne.n	80017e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017c2:	4b9d      	ldr	r3, [pc, #628]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017ce:	d10b      	bne.n	80017e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d0:	4b99      	ldr	r3, [pc, #612]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d05b      	beq.n	8001894 <HAL_RCC_OscConfig+0x108>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d157      	bne.n	8001894 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e23f      	b.n	8001c68 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f0:	d106      	bne.n	8001800 <HAL_RCC_OscConfig+0x74>
 80017f2:	4b91      	ldr	r3, [pc, #580]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a90      	ldr	r2, [pc, #576]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e01d      	b.n	800183c <HAL_RCC_OscConfig+0xb0>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x98>
 800180a:	4b8b      	ldr	r3, [pc, #556]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a8a      	ldr	r2, [pc, #552]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 8001810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	4b88      	ldr	r3, [pc, #544]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a87      	ldr	r2, [pc, #540]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 800181c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e00b      	b.n	800183c <HAL_RCC_OscConfig+0xb0>
 8001824:	4b84      	ldr	r3, [pc, #528]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a83      	ldr	r2, [pc, #524]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 800182a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4b81      	ldr	r3, [pc, #516]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a80      	ldr	r2, [pc, #512]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 8001836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d013      	beq.n	800186c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff fcbe 	bl	80011c4 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff fcba 	bl	80011c4 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	; 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e204      	b.n	8001c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	4b76      	ldr	r3, [pc, #472]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0xc0>
 800186a:	e014      	b.n	8001896 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fcaa 	bl	80011c4 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001874:	f7ff fca6 	bl	80011c4 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	; 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e1f0      	b.n	8001c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001886:	4b6c      	ldr	r3, [pc, #432]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0xe8>
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d063      	beq.n	800196a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018a2:	4b65      	ldr	r3, [pc, #404]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00b      	beq.n	80018c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ae:	4b62      	ldr	r3, [pc, #392]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d11c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ba:	4b5f      	ldr	r3, [pc, #380]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d116      	bne.n	80018f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c6:	4b5c      	ldr	r3, [pc, #368]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <HAL_RCC_OscConfig+0x152>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d001      	beq.n	80018de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e1c4      	b.n	8001c68 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018de:	4b56      	ldr	r3, [pc, #344]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4952      	ldr	r1, [pc, #328]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f2:	e03a      	b.n	800196a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d020      	beq.n	800193e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018fc:	4b4f      	ldr	r3, [pc, #316]	; (8001a3c <HAL_RCC_OscConfig+0x2b0>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001902:	f7ff fc5f 	bl	80011c4 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800190a:	f7ff fc5b 	bl	80011c4 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e1a5      	b.n	8001c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191c:	4b46      	ldr	r3, [pc, #280]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	4b43      	ldr	r3, [pc, #268]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4940      	ldr	r1, [pc, #256]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
 800193c:	e015      	b.n	800196a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193e:	4b3f      	ldr	r3, [pc, #252]	; (8001a3c <HAL_RCC_OscConfig+0x2b0>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff fc3e 	bl	80011c4 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800194c:	f7ff fc3a 	bl	80011c4 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e184      	b.n	8001c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195e:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d030      	beq.n	80019d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d016      	beq.n	80019ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197e:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <HAL_RCC_OscConfig+0x2b4>)
 8001980:	2201      	movs	r2, #1
 8001982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001984:	f7ff fc1e 	bl	80011c4 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800198c:	f7ff fc1a 	bl	80011c4 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e164      	b.n	8001c68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199e:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x200>
 80019aa:	e015      	b.n	80019d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ac:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <HAL_RCC_OscConfig+0x2b4>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b2:	f7ff fc07 	bl	80011c4 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ba:	f7ff fc03 	bl	80011c4 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e14d      	b.n	8001c68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 80019ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f0      	bne.n	80019ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 80a0 	beq.w	8001b26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e6:	2300      	movs	r3, #0
 80019e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ea:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10f      	bne.n	8001a16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	4a0e      	ldr	r2, [pc, #56]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	6413      	str	r3, [r2, #64]	; 0x40
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <HAL_RCC_OscConfig+0x2ac>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a12:	2301      	movs	r3, #1
 8001a14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCC_OscConfig+0x2b8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d121      	bne.n	8001a66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_RCC_OscConfig+0x2b8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <HAL_RCC_OscConfig+0x2b8>)
 8001a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff fbc9 	bl	80011c4 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a34:	e011      	b.n	8001a5a <HAL_RCC_OscConfig+0x2ce>
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	42470000 	.word	0x42470000
 8001a40:	42470e80 	.word	0x42470e80
 8001a44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a48:	f7ff fbbc 	bl	80011c4 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e106      	b.n	8001c68 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5a:	4b85      	ldr	r3, [pc, #532]	; (8001c70 <HAL_RCC_OscConfig+0x4e4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d106      	bne.n	8001a7c <HAL_RCC_OscConfig+0x2f0>
 8001a6e:	4b81      	ldr	r3, [pc, #516]	; (8001c74 <HAL_RCC_OscConfig+0x4e8>)
 8001a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a72:	4a80      	ldr	r2, [pc, #512]	; (8001c74 <HAL_RCC_OscConfig+0x4e8>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7a:	e01c      	b.n	8001ab6 <HAL_RCC_OscConfig+0x32a>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b05      	cmp	r3, #5
 8001a82:	d10c      	bne.n	8001a9e <HAL_RCC_OscConfig+0x312>
 8001a84:	4b7b      	ldr	r3, [pc, #492]	; (8001c74 <HAL_RCC_OscConfig+0x4e8>)
 8001a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a88:	4a7a      	ldr	r2, [pc, #488]	; (8001c74 <HAL_RCC_OscConfig+0x4e8>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a90:	4b78      	ldr	r3, [pc, #480]	; (8001c74 <HAL_RCC_OscConfig+0x4e8>)
 8001a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a94:	4a77      	ldr	r2, [pc, #476]	; (8001c74 <HAL_RCC_OscConfig+0x4e8>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a9c:	e00b      	b.n	8001ab6 <HAL_RCC_OscConfig+0x32a>
 8001a9e:	4b75      	ldr	r3, [pc, #468]	; (8001c74 <HAL_RCC_OscConfig+0x4e8>)
 8001aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa2:	4a74      	ldr	r2, [pc, #464]	; (8001c74 <HAL_RCC_OscConfig+0x4e8>)
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aaa:	4b72      	ldr	r3, [pc, #456]	; (8001c74 <HAL_RCC_OscConfig+0x4e8>)
 8001aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aae:	4a71      	ldr	r2, [pc, #452]	; (8001c74 <HAL_RCC_OscConfig+0x4e8>)
 8001ab0:	f023 0304 	bic.w	r3, r3, #4
 8001ab4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d015      	beq.n	8001aea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001abe:	f7ff fb81 	bl	80011c4 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac4:	e00a      	b.n	8001adc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac6:	f7ff fb7d 	bl	80011c4 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e0c5      	b.n	8001c68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001adc:	4b65      	ldr	r3, [pc, #404]	; (8001c74 <HAL_RCC_OscConfig+0x4e8>)
 8001ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0ee      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x33a>
 8001ae8:	e014      	b.n	8001b14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aea:	f7ff fb6b 	bl	80011c4 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af0:	e00a      	b.n	8001b08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af2:	f7ff fb67 	bl	80011c4 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e0af      	b.n	8001c68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b08:	4b5a      	ldr	r3, [pc, #360]	; (8001c74 <HAL_RCC_OscConfig+0x4e8>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1ee      	bne.n	8001af2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b14:	7dfb      	ldrb	r3, [r7, #23]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d105      	bne.n	8001b26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b1a:	4b56      	ldr	r3, [pc, #344]	; (8001c74 <HAL_RCC_OscConfig+0x4e8>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a55      	ldr	r2, [pc, #340]	; (8001c74 <HAL_RCC_OscConfig+0x4e8>)
 8001b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 809b 	beq.w	8001c66 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b30:	4b50      	ldr	r3, [pc, #320]	; (8001c74 <HAL_RCC_OscConfig+0x4e8>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d05c      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d141      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b44:	4b4c      	ldr	r3, [pc, #304]	; (8001c78 <HAL_RCC_OscConfig+0x4ec>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fb3b 	bl	80011c4 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b52:	f7ff fb37 	bl	80011c4 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e081      	b.n	8001c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b64:	4b43      	ldr	r3, [pc, #268]	; (8001c74 <HAL_RCC_OscConfig+0x4e8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f0      	bne.n	8001b52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69da      	ldr	r2, [r3, #28]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	019b      	lsls	r3, r3, #6
 8001b80:	431a      	orrs	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	085b      	lsrs	r3, r3, #1
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	041b      	lsls	r3, r3, #16
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b92:	061b      	lsls	r3, r3, #24
 8001b94:	4937      	ldr	r1, [pc, #220]	; (8001c74 <HAL_RCC_OscConfig+0x4e8>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b9a:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <HAL_RCC_OscConfig+0x4ec>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fb10 	bl	80011c4 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7ff fb0c 	bl	80011c4 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e056      	b.n	8001c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bba:	4b2e      	ldr	r3, [pc, #184]	; (8001c74 <HAL_RCC_OscConfig+0x4e8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x41c>
 8001bc6:	e04e      	b.n	8001c66 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc8:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <HAL_RCC_OscConfig+0x4ec>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7ff faf9 	bl	80011c4 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd6:	f7ff faf5 	bl	80011c4 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e03f      	b.n	8001c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be8:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <HAL_RCC_OscConfig+0x4e8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1f0      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x44a>
 8001bf4:	e037      	b.n	8001c66 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e032      	b.n	8001c68 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c02:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <HAL_RCC_OscConfig+0x4e8>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d028      	beq.n	8001c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d121      	bne.n	8001c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d11a      	bne.n	8001c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c32:	4013      	ands	r3, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d111      	bne.n	8001c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	085b      	lsrs	r3, r3, #1
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40007000 	.word	0x40007000
 8001c74:	40023800 	.word	0x40023800
 8001c78:	42470060 	.word	0x42470060

08001c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0cc      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c90:	4b68      	ldr	r3, [pc, #416]	; (8001e34 <HAL_RCC_ClockConfig+0x1b8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d90c      	bls.n	8001cb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9e:	4b65      	ldr	r3, [pc, #404]	; (8001e34 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	4b63      	ldr	r3, [pc, #396]	; (8001e34 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0b8      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d020      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cd0:	4b59      	ldr	r3, [pc, #356]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	4a58      	ldr	r2, [pc, #352]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce8:	4b53      	ldr	r3, [pc, #332]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4a52      	ldr	r2, [pc, #328]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf4:	4b50      	ldr	r3, [pc, #320]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	494d      	ldr	r1, [pc, #308]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d044      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d107      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	4b47      	ldr	r3, [pc, #284]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d119      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e07f      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d003      	beq.n	8001d3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d107      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3a:	4b3f      	ldr	r3, [pc, #252]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d109      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e06f      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4a:	4b3b      	ldr	r3, [pc, #236]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e067      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d5a:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f023 0203 	bic.w	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4934      	ldr	r1, [pc, #208]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d6c:	f7ff fa2a 	bl	80011c4 <HAL_GetTick>
 8001d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d72:	e00a      	b.n	8001d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d74:	f7ff fa26 	bl	80011c4 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e04f      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8a:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 020c 	and.w	r2, r3, #12
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d1eb      	bne.n	8001d74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d20c      	bcs.n	8001dc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b22      	ldr	r3, [pc, #136]	; (8001e34 <HAL_RCC_ClockConfig+0x1b8>)
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_RCC_ClockConfig+0x1b8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e032      	b.n	8001e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd0:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4916      	ldr	r1, [pc, #88]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d009      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	490e      	ldr	r1, [pc, #56]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e02:	f000 f821 	bl	8001e48 <HAL_RCC_GetSysClockFreq>
 8001e06:	4602      	mov	r2, r0
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	091b      	lsrs	r3, r3, #4
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	490a      	ldr	r1, [pc, #40]	; (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001e14:	5ccb      	ldrb	r3, [r1, r3]
 8001e16:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1a:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_RCC_ClockConfig+0x1c8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff f98a 	bl	800113c <HAL_InitTick>

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40023c00 	.word	0x40023c00
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	08003298 	.word	0x08003298
 8001e40:	20000004 	.word	0x20000004
 8001e44:	20000008 	.word	0x20000008

08001e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e48:	b5b0      	push	{r4, r5, r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e4e:	2100      	movs	r1, #0
 8001e50:	6079      	str	r1, [r7, #4]
 8001e52:	2100      	movs	r1, #0
 8001e54:	60f9      	str	r1, [r7, #12]
 8001e56:	2100      	movs	r1, #0
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e5e:	4952      	ldr	r1, [pc, #328]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e60:	6889      	ldr	r1, [r1, #8]
 8001e62:	f001 010c 	and.w	r1, r1, #12
 8001e66:	2908      	cmp	r1, #8
 8001e68:	d00d      	beq.n	8001e86 <HAL_RCC_GetSysClockFreq+0x3e>
 8001e6a:	2908      	cmp	r1, #8
 8001e6c:	f200 8094 	bhi.w	8001f98 <HAL_RCC_GetSysClockFreq+0x150>
 8001e70:	2900      	cmp	r1, #0
 8001e72:	d002      	beq.n	8001e7a <HAL_RCC_GetSysClockFreq+0x32>
 8001e74:	2904      	cmp	r1, #4
 8001e76:	d003      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0x38>
 8001e78:	e08e      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e7a:	4b4c      	ldr	r3, [pc, #304]	; (8001fac <HAL_RCC_GetSysClockFreq+0x164>)
 8001e7c:	60bb      	str	r3, [r7, #8]
       break;
 8001e7e:	e08e      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e80:	4b4b      	ldr	r3, [pc, #300]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001e82:	60bb      	str	r3, [r7, #8]
      break;
 8001e84:	e08b      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e86:	4948      	ldr	r1, [pc, #288]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e88:	6849      	ldr	r1, [r1, #4]
 8001e8a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001e8e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e90:	4945      	ldr	r1, [pc, #276]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e92:	6849      	ldr	r1, [r1, #4]
 8001e94:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001e98:	2900      	cmp	r1, #0
 8001e9a:	d024      	beq.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e9c:	4942      	ldr	r1, [pc, #264]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e9e:	6849      	ldr	r1, [r1, #4]
 8001ea0:	0989      	lsrs	r1, r1, #6
 8001ea2:	4608      	mov	r0, r1
 8001ea4:	f04f 0100 	mov.w	r1, #0
 8001ea8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001eac:	f04f 0500 	mov.w	r5, #0
 8001eb0:	ea00 0204 	and.w	r2, r0, r4
 8001eb4:	ea01 0305 	and.w	r3, r1, r5
 8001eb8:	493d      	ldr	r1, [pc, #244]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001eba:	fb01 f003 	mul.w	r0, r1, r3
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	fb01 f102 	mul.w	r1, r1, r2
 8001ec4:	1844      	adds	r4, r0, r1
 8001ec6:	493a      	ldr	r1, [pc, #232]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ec8:	fba2 0101 	umull	r0, r1, r2, r1
 8001ecc:	1863      	adds	r3, r4, r1
 8001ece:	4619      	mov	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	f04f 0300 	mov.w	r3, #0
 8001ed8:	f7fe f97e 	bl	80001d8 <__aeabi_uldivmod>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	e04a      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee6:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	099b      	lsrs	r3, r3, #6
 8001eec:	461a      	mov	r2, r3
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ef6:	f04f 0100 	mov.w	r1, #0
 8001efa:	ea02 0400 	and.w	r4, r2, r0
 8001efe:	ea03 0501 	and.w	r5, r3, r1
 8001f02:	4620      	mov	r0, r4
 8001f04:	4629      	mov	r1, r5
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	014b      	lsls	r3, r1, #5
 8001f10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f14:	0142      	lsls	r2, r0, #5
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	1b00      	subs	r0, r0, r4
 8001f1c:	eb61 0105 	sbc.w	r1, r1, r5
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	f04f 0300 	mov.w	r3, #0
 8001f28:	018b      	lsls	r3, r1, #6
 8001f2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f2e:	0182      	lsls	r2, r0, #6
 8001f30:	1a12      	subs	r2, r2, r0
 8001f32:	eb63 0301 	sbc.w	r3, r3, r1
 8001f36:	f04f 0000 	mov.w	r0, #0
 8001f3a:	f04f 0100 	mov.w	r1, #0
 8001f3e:	00d9      	lsls	r1, r3, #3
 8001f40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f44:	00d0      	lsls	r0, r2, #3
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	1912      	adds	r2, r2, r4
 8001f4c:	eb45 0303 	adc.w	r3, r5, r3
 8001f50:	f04f 0000 	mov.w	r0, #0
 8001f54:	f04f 0100 	mov.w	r1, #0
 8001f58:	0299      	lsls	r1, r3, #10
 8001f5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f5e:	0290      	lsls	r0, r2, #10
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	f7fe f932 	bl	80001d8 <__aeabi_uldivmod>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4613      	mov	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	0c1b      	lsrs	r3, r3, #16
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	3301      	adds	r3, #1
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f94:	60bb      	str	r3, [r7, #8]
      break;
 8001f96:	e002      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <HAL_RCC_GetSysClockFreq+0x164>)
 8001f9a:	60bb      	str	r3, [r7, #8]
      break;
 8001f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	00f42400 	.word	0x00f42400
 8001fb0:	017d7840 	.word	0x017d7840

08001fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb8:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000004 	.word	0x20000004

08001fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fd0:	f7ff fff0 	bl	8001fb4 <HAL_RCC_GetHCLKFreq>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	0a9b      	lsrs	r3, r3, #10
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	4903      	ldr	r1, [pc, #12]	; (8001ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fe2:	5ccb      	ldrb	r3, [r1, r3]
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	080032a8 	.word	0x080032a8

08001ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ff8:	f7ff ffdc 	bl	8001fb4 <HAL_RCC_GetHCLKFreq>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	0b5b      	lsrs	r3, r3, #13
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	4903      	ldr	r1, [pc, #12]	; (8002018 <HAL_RCC_GetPCLK2Freq+0x24>)
 800200a:	5ccb      	ldrb	r3, [r1, r3]
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40023800 	.word	0x40023800
 8002018:	080032a8 	.word	0x080032a8

0800201c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e07b      	b.n	8002126 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	2b00      	cmp	r3, #0
 8002034:	d108      	bne.n	8002048 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800203e:	d009      	beq.n	8002054 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	61da      	str	r2, [r3, #28]
 8002046:	e005      	b.n	8002054 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe ff2c 	bl	8000ecc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2202      	movs	r2, #2
 8002078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800208a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d8:	ea42 0103 	orr.w	r1, r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	0c1b      	lsrs	r3, r3, #16
 80020f2:	f003 0104 	and.w	r1, r3, #4
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	f003 0210 	and.w	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	69da      	ldr	r2, [r3, #28]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002114:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b088      	sub	sp, #32
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	4613      	mov	r3, r2
 800213c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_SPI_Transmit+0x22>
 800214c:	2302      	movs	r3, #2
 800214e:	e126      	b.n	800239e <HAL_SPI_Transmit+0x270>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002158:	f7ff f834 	bl	80011c4 <HAL_GetTick>
 800215c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b01      	cmp	r3, #1
 800216c:	d002      	beq.n	8002174 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800216e:	2302      	movs	r3, #2
 8002170:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002172:	e10b      	b.n	800238c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <HAL_SPI_Transmit+0x52>
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d102      	bne.n	8002186 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002184:	e102      	b.n	800238c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2203      	movs	r2, #3
 800218a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	88fa      	ldrh	r2, [r7, #6]
 800219e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	88fa      	ldrh	r2, [r7, #6]
 80021a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021cc:	d10f      	bne.n	80021ee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f8:	2b40      	cmp	r3, #64	; 0x40
 80021fa:	d007      	beq.n	800220c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800220a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002214:	d14b      	bne.n	80022ae <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <HAL_SPI_Transmit+0xf6>
 800221e:	8afb      	ldrh	r3, [r7, #22]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d13e      	bne.n	80022a2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	881a      	ldrh	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002234:	1c9a      	adds	r2, r3, #2
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800223e:	b29b      	uxth	r3, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002248:	e02b      	b.n	80022a2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b02      	cmp	r3, #2
 8002256:	d112      	bne.n	800227e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225c:	881a      	ldrh	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	1c9a      	adds	r2, r3, #2
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	86da      	strh	r2, [r3, #54]	; 0x36
 800227c:	e011      	b.n	80022a2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800227e:	f7fe ffa1 	bl	80011c4 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d803      	bhi.n	8002296 <HAL_SPI_Transmit+0x168>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d102      	bne.n	800229c <HAL_SPI_Transmit+0x16e>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022a0:	e074      	b.n	800238c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1ce      	bne.n	800224a <HAL_SPI_Transmit+0x11c>
 80022ac:	e04c      	b.n	8002348 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_SPI_Transmit+0x18e>
 80022b6:	8afb      	ldrh	r3, [r7, #22]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d140      	bne.n	800233e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	330c      	adds	r3, #12
 80022c6:	7812      	ldrb	r2, [r2, #0]
 80022c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022d8:	b29b      	uxth	r3, r3
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022e2:	e02c      	b.n	800233e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d113      	bne.n	800231a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	330c      	adds	r3, #12
 80022fc:	7812      	ldrb	r2, [r2, #0]
 80022fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	86da      	strh	r2, [r3, #54]	; 0x36
 8002318:	e011      	b.n	800233e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800231a:	f7fe ff53 	bl	80011c4 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d803      	bhi.n	8002332 <HAL_SPI_Transmit+0x204>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002330:	d102      	bne.n	8002338 <HAL_SPI_Transmit+0x20a>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800233c:	e026      	b.n	800238c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1cd      	bne.n	80022e4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	6839      	ldr	r1, [r7, #0]
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 fa55 	bl	80027fc <SPI_EndRxTxTransaction>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10a      	bne.n	800237c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	77fb      	strb	r3, [r7, #31]
 8002388:	e000      	b.n	800238c <HAL_SPI_Transmit+0x25e>
  }

error:
 800238a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800239c:	7ffb      	ldrb	r3, [r7, #31]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b08c      	sub	sp, #48	; 0x30
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80023b4:	2301      	movs	r3, #1
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_SPI_TransmitReceive+0x26>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e18a      	b.n	80026e2 <HAL_SPI_TransmitReceive+0x33c>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023d4:	f7fe fef6 	bl	80011c4 <HAL_GetTick>
 80023d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80023ea:	887b      	ldrh	r3, [r7, #2]
 80023ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d00f      	beq.n	8002416 <HAL_SPI_TransmitReceive+0x70>
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023fc:	d107      	bne.n	800240e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d103      	bne.n	800240e <HAL_SPI_TransmitReceive+0x68>
 8002406:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800240a:	2b04      	cmp	r3, #4
 800240c:	d003      	beq.n	8002416 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800240e:	2302      	movs	r3, #2
 8002410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002414:	e15b      	b.n	80026ce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_SPI_TransmitReceive+0x82>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <HAL_SPI_TransmitReceive+0x82>
 8002422:	887b      	ldrh	r3, [r7, #2]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d103      	bne.n	8002430 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800242e:	e14e      	b.n	80026ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b04      	cmp	r3, #4
 800243a:	d003      	beq.n	8002444 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2205      	movs	r2, #5
 8002440:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	887a      	ldrh	r2, [r7, #2]
 8002454:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	887a      	ldrh	r2, [r7, #2]
 800245a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	887a      	ldrh	r2, [r7, #2]
 8002466:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	887a      	ldrh	r2, [r7, #2]
 800246c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002484:	2b40      	cmp	r3, #64	; 0x40
 8002486:	d007      	beq.n	8002498 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002496:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024a0:	d178      	bne.n	8002594 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <HAL_SPI_TransmitReceive+0x10a>
 80024aa:	8b7b      	ldrh	r3, [r7, #26]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d166      	bne.n	800257e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	881a      	ldrh	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	1c9a      	adds	r2, r3, #2
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024d4:	e053      	b.n	800257e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d11b      	bne.n	800251c <HAL_SPI_TransmitReceive+0x176>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d016      	beq.n	800251c <HAL_SPI_TransmitReceive+0x176>
 80024ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d113      	bne.n	800251c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	881a      	ldrh	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	1c9a      	adds	r2, r3, #2
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800250e:	b29b      	uxth	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b01      	cmp	r3, #1
 8002528:	d119      	bne.n	800255e <HAL_SPI_TransmitReceive+0x1b8>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800252e:	b29b      	uxth	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d014      	beq.n	800255e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	b292      	uxth	r2, r2
 8002540:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002546:	1c9a      	adds	r2, r3, #2
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800255a:	2301      	movs	r3, #1
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800255e:	f7fe fe31 	bl	80011c4 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800256a:	429a      	cmp	r2, r3
 800256c:	d807      	bhi.n	800257e <HAL_SPI_TransmitReceive+0x1d8>
 800256e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002574:	d003      	beq.n	800257e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800257c:	e0a7      	b.n	80026ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002582:	b29b      	uxth	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1a6      	bne.n	80024d6 <HAL_SPI_TransmitReceive+0x130>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1a1      	bne.n	80024d6 <HAL_SPI_TransmitReceive+0x130>
 8002592:	e07c      	b.n	800268e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <HAL_SPI_TransmitReceive+0x1fc>
 800259c:	8b7b      	ldrh	r3, [r7, #26]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d16b      	bne.n	800267a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	330c      	adds	r3, #12
 80025ac:	7812      	ldrb	r2, [r2, #0]
 80025ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025c8:	e057      	b.n	800267a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d11c      	bne.n	8002612 <HAL_SPI_TransmitReceive+0x26c>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d017      	beq.n	8002612 <HAL_SPI_TransmitReceive+0x26c>
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d114      	bne.n	8002612 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	330c      	adds	r3, #12
 80025f2:	7812      	ldrb	r2, [r2, #0]
 80025f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	d119      	bne.n	8002654 <HAL_SPI_TransmitReceive+0x2ae>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002624:	b29b      	uxth	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d014      	beq.n	8002654 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002646:	b29b      	uxth	r3, r3
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002650:	2301      	movs	r3, #1
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002654:	f7fe fdb6 	bl	80011c4 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002660:	429a      	cmp	r2, r3
 8002662:	d803      	bhi.n	800266c <HAL_SPI_TransmitReceive+0x2c6>
 8002664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266a:	d102      	bne.n	8002672 <HAL_SPI_TransmitReceive+0x2cc>
 800266c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266e:	2b00      	cmp	r3, #0
 8002670:	d103      	bne.n	800267a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002678:	e029      	b.n	80026ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1a2      	bne.n	80025ca <HAL_SPI_TransmitReceive+0x224>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d19d      	bne.n	80025ca <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800268e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002690:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 f8b2 	bl	80027fc <SPI_EndRxTxTransaction>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d006      	beq.n	80026ac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2220      	movs	r2, #32
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80026aa:	e010      	b.n	80026ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10b      	bne.n	80026cc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	e000      	b.n	80026ce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80026cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3730      	adds	r7, #48	; 0x30
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	4613      	mov	r3, r2
 80026fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026fc:	f7fe fd62 	bl	80011c4 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	4413      	add	r3, r2
 800270a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800270c:	f7fe fd5a 	bl	80011c4 <HAL_GetTick>
 8002710:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002712:	4b39      	ldr	r3, [pc, #228]	; (80027f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	015b      	lsls	r3, r3, #5
 8002718:	0d1b      	lsrs	r3, r3, #20
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	fb02 f303 	mul.w	r3, r2, r3
 8002720:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002722:	e054      	b.n	80027ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272a:	d050      	beq.n	80027ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800272c:	f7fe fd4a 	bl	80011c4 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	429a      	cmp	r2, r3
 800273a:	d902      	bls.n	8002742 <SPI_WaitFlagStateUntilTimeout+0x56>
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d13d      	bne.n	80027be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002750:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800275a:	d111      	bne.n	8002780 <SPI_WaitFlagStateUntilTimeout+0x94>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002764:	d004      	beq.n	8002770 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276e:	d107      	bne.n	8002780 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800277e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002788:	d10f      	bne.n	80027aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e017      	b.n	80027ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	4013      	ands	r3, r2
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	429a      	cmp	r2, r3
 80027dc:	bf0c      	ite	eq
 80027de:	2301      	moveq	r3, #1
 80027e0:	2300      	movne	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	461a      	mov	r2, r3
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d19b      	bne.n	8002724 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3720      	adds	r7, #32
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000004 	.word	0x20000004

080027fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af02      	add	r7, sp, #8
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002808:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <SPI_EndRxTxTransaction+0x7c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a1b      	ldr	r2, [pc, #108]	; (800287c <SPI_EndRxTxTransaction+0x80>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0d5b      	lsrs	r3, r3, #21
 8002814:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002818:	fb02 f303 	mul.w	r3, r2, r3
 800281c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002826:	d112      	bne.n	800284e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2200      	movs	r2, #0
 8002830:	2180      	movs	r1, #128	; 0x80
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f7ff ff5a 	bl	80026ec <SPI_WaitFlagStateUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d016      	beq.n	800286c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002842:	f043 0220 	orr.w	r2, r3, #32
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e00f      	b.n	800286e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	3b01      	subs	r3, #1
 8002858:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002864:	2b80      	cmp	r3, #128	; 0x80
 8002866:	d0f2      	beq.n	800284e <SPI_EndRxTxTransaction+0x52>
 8002868:	e000      	b.n	800286c <SPI_EndRxTxTransaction+0x70>
        break;
 800286a:	bf00      	nop
  }

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000004 	.word	0x20000004
 800287c:	165e9f81 	.word	0x165e9f81

08002880 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e03f      	b.n	8002912 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fe fb78 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2224      	movs	r2, #36	; 0x24
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f9cb 	bl	8002c60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695a      	ldr	r2, [r3, #20]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b08a      	sub	sp, #40	; 0x28
 800291e:	af02      	add	r7, sp, #8
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	603b      	str	r3, [r7, #0]
 8002926:	4613      	mov	r3, r2
 8002928:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b20      	cmp	r3, #32
 8002938:	d17c      	bne.n	8002a34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_UART_Transmit+0x2c>
 8002940:	88fb      	ldrh	r3, [r7, #6]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e075      	b.n	8002a36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_UART_Transmit+0x3e>
 8002954:	2302      	movs	r3, #2
 8002956:	e06e      	b.n	8002a36 <HAL_UART_Transmit+0x11c>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2221      	movs	r2, #33	; 0x21
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800296e:	f7fe fc29 	bl	80011c4 <HAL_GetTick>
 8002972:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	88fa      	ldrh	r2, [r7, #6]
 8002978:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	88fa      	ldrh	r2, [r7, #6]
 800297e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002988:	d108      	bne.n	800299c <HAL_UART_Transmit+0x82>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d104      	bne.n	800299c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	e003      	b.n	80029a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029ac:	e02a      	b.n	8002a04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2200      	movs	r2, #0
 80029b6:	2180      	movs	r1, #128	; 0x80
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 f8e2 	bl	8002b82 <UART_WaitOnFlagUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e036      	b.n	8002a36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10b      	bne.n	80029e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	3302      	adds	r3, #2
 80029e2:	61bb      	str	r3, [r7, #24]
 80029e4:	e007      	b.n	80029f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	781a      	ldrb	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	3301      	adds	r3, #1
 80029f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1cf      	bne.n	80029ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2200      	movs	r2, #0
 8002a16:	2140      	movs	r1, #64	; 0x40
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f8b2 	bl	8002b82 <UART_WaitOnFlagUntilTimeout>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e006      	b.n	8002a36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e000      	b.n	8002a36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
  }
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3720      	adds	r7, #32
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b08a      	sub	sp, #40	; 0x28
 8002a42:	af02      	add	r7, sp, #8
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	603b      	str	r3, [r7, #0]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b20      	cmp	r3, #32
 8002a5c:	f040 808c 	bne.w	8002b78 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_UART_Receive+0x2e>
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e084      	b.n	8002b7a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <HAL_UART_Receive+0x40>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e07d      	b.n	8002b7a <HAL_UART_Receive+0x13c>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2222      	movs	r2, #34	; 0x22
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a9a:	f7fe fb93 	bl	80011c4 <HAL_GetTick>
 8002a9e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	88fa      	ldrh	r2, [r7, #6]
 8002aa4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	88fa      	ldrh	r2, [r7, #6]
 8002aaa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab4:	d108      	bne.n	8002ac8 <HAL_UART_Receive+0x8a>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d104      	bne.n	8002ac8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	e003      	b.n	8002ad0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002ad8:	e043      	b.n	8002b62 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2120      	movs	r1, #32
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f84c 	bl	8002b82 <UART_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e042      	b.n	8002b7a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10c      	bne.n	8002b14 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	3302      	adds	r3, #2
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	e01f      	b.n	8002b54 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b1c:	d007      	beq.n	8002b2e <HAL_UART_Receive+0xf0>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10a      	bne.n	8002b3c <HAL_UART_Receive+0xfe>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d106      	bne.n	8002b3c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	e008      	b.n	8002b4e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3301      	adds	r3, #1
 8002b52:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1b6      	bne.n	8002ada <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	e000      	b.n	8002b7a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002b78:	2302      	movs	r3, #2
  }
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3720      	adds	r7, #32
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b090      	sub	sp, #64	; 0x40
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	603b      	str	r3, [r7, #0]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b92:	e050      	b.n	8002c36 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9a:	d04c      	beq.n	8002c36 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ba2:	f7fe fb0f 	bl	80011c4 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d241      	bcs.n	8002c36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	330c      	adds	r3, #12
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	e853 3f00 	ldrex	r3, [r3]
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	330c      	adds	r3, #12
 8002bd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bd2:	637a      	str	r2, [r7, #52]	; 0x34
 8002bd4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bda:	e841 2300 	strex	r3, r2, [r1]
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1e5      	bne.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	3314      	adds	r3, #20
 8002bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	e853 3f00 	ldrex	r3, [r3]
 8002bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3314      	adds	r3, #20
 8002c04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c06:	623a      	str	r2, [r7, #32]
 8002c08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0a:	69f9      	ldr	r1, [r7, #28]
 8002c0c:	6a3a      	ldr	r2, [r7, #32]
 8002c0e:	e841 2300 	strex	r3, r2, [r1]
 8002c12:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1e5      	bne.n	8002be6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e00f      	b.n	8002c56 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	bf0c      	ite	eq
 8002c46:	2301      	moveq	r3, #1
 8002c48:	2300      	movne	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d09f      	beq.n	8002b94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3740      	adds	r7, #64	; 0x40
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c64:	b09f      	sub	sp, #124	; 0x7c
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c76:	68d9      	ldr	r1, [r3, #12]
 8002c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	ea40 0301 	orr.w	r3, r0, r1
 8002c80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ca4:	f021 010c 	bic.w	r1, r1, #12
 8002ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cbe:	6999      	ldr	r1, [r3, #24]
 8002cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	ea40 0301 	orr.w	r3, r0, r1
 8002cc8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	4bc5      	ldr	r3, [pc, #788]	; (8002fe4 <UART_SetConfig+0x384>)
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d004      	beq.n	8002cde <UART_SetConfig+0x7e>
 8002cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4bc3      	ldr	r3, [pc, #780]	; (8002fe8 <UART_SetConfig+0x388>)
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d103      	bne.n	8002ce6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cde:	f7ff f989 	bl	8001ff4 <HAL_RCC_GetPCLK2Freq>
 8002ce2:	6778      	str	r0, [r7, #116]	; 0x74
 8002ce4:	e002      	b.n	8002cec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ce6:	f7ff f971 	bl	8001fcc <HAL_RCC_GetPCLK1Freq>
 8002cea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cf4:	f040 80b6 	bne.w	8002e64 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cfa:	461c      	mov	r4, r3
 8002cfc:	f04f 0500 	mov.w	r5, #0
 8002d00:	4622      	mov	r2, r4
 8002d02:	462b      	mov	r3, r5
 8002d04:	1891      	adds	r1, r2, r2
 8002d06:	6439      	str	r1, [r7, #64]	; 0x40
 8002d08:	415b      	adcs	r3, r3
 8002d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d0c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d10:	1912      	adds	r2, r2, r4
 8002d12:	eb45 0303 	adc.w	r3, r5, r3
 8002d16:	f04f 0000 	mov.w	r0, #0
 8002d1a:	f04f 0100 	mov.w	r1, #0
 8002d1e:	00d9      	lsls	r1, r3, #3
 8002d20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d24:	00d0      	lsls	r0, r2, #3
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	1911      	adds	r1, r2, r4
 8002d2c:	6639      	str	r1, [r7, #96]	; 0x60
 8002d2e:	416b      	adcs	r3, r5
 8002d30:	667b      	str	r3, [r7, #100]	; 0x64
 8002d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	461a      	mov	r2, r3
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	1891      	adds	r1, r2, r2
 8002d3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d40:	415b      	adcs	r3, r3
 8002d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d48:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002d4c:	f7fd fa44 	bl	80001d8 <__aeabi_uldivmod>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4ba5      	ldr	r3, [pc, #660]	; (8002fec <UART_SetConfig+0x38c>)
 8002d56:	fba3 2302 	umull	r2, r3, r3, r2
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	011e      	lsls	r6, r3, #4
 8002d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d60:	461c      	mov	r4, r3
 8002d62:	f04f 0500 	mov.w	r5, #0
 8002d66:	4622      	mov	r2, r4
 8002d68:	462b      	mov	r3, r5
 8002d6a:	1891      	adds	r1, r2, r2
 8002d6c:	6339      	str	r1, [r7, #48]	; 0x30
 8002d6e:	415b      	adcs	r3, r3
 8002d70:	637b      	str	r3, [r7, #52]	; 0x34
 8002d72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d76:	1912      	adds	r2, r2, r4
 8002d78:	eb45 0303 	adc.w	r3, r5, r3
 8002d7c:	f04f 0000 	mov.w	r0, #0
 8002d80:	f04f 0100 	mov.w	r1, #0
 8002d84:	00d9      	lsls	r1, r3, #3
 8002d86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d8a:	00d0      	lsls	r0, r2, #3
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	1911      	adds	r1, r2, r4
 8002d92:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d94:	416b      	adcs	r3, r5
 8002d96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	1891      	adds	r1, r2, r2
 8002da4:	62b9      	str	r1, [r7, #40]	; 0x28
 8002da6:	415b      	adcs	r3, r3
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002daa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002db2:	f7fd fa11 	bl	80001d8 <__aeabi_uldivmod>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4b8c      	ldr	r3, [pc, #560]	; (8002fec <UART_SetConfig+0x38c>)
 8002dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002dc0:	095b      	lsrs	r3, r3, #5
 8002dc2:	2164      	movs	r1, #100	; 0x64
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	3332      	adds	r3, #50	; 0x32
 8002dce:	4a87      	ldr	r2, [pc, #540]	; (8002fec <UART_SetConfig+0x38c>)
 8002dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ddc:	441e      	add	r6, r3
 8002dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002de0:	4618      	mov	r0, r3
 8002de2:	f04f 0100 	mov.w	r1, #0
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	1894      	adds	r4, r2, r2
 8002dec:	623c      	str	r4, [r7, #32]
 8002dee:	415b      	adcs	r3, r3
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
 8002df2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002df6:	1812      	adds	r2, r2, r0
 8002df8:	eb41 0303 	adc.w	r3, r1, r3
 8002dfc:	f04f 0400 	mov.w	r4, #0
 8002e00:	f04f 0500 	mov.w	r5, #0
 8002e04:	00dd      	lsls	r5, r3, #3
 8002e06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e0a:	00d4      	lsls	r4, r2, #3
 8002e0c:	4622      	mov	r2, r4
 8002e0e:	462b      	mov	r3, r5
 8002e10:	1814      	adds	r4, r2, r0
 8002e12:	653c      	str	r4, [r7, #80]	; 0x50
 8002e14:	414b      	adcs	r3, r1
 8002e16:	657b      	str	r3, [r7, #84]	; 0x54
 8002e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	1891      	adds	r1, r2, r2
 8002e24:	61b9      	str	r1, [r7, #24]
 8002e26:	415b      	adcs	r3, r3
 8002e28:	61fb      	str	r3, [r7, #28]
 8002e2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e2e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002e32:	f7fd f9d1 	bl	80001d8 <__aeabi_uldivmod>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4b6c      	ldr	r3, [pc, #432]	; (8002fec <UART_SetConfig+0x38c>)
 8002e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e40:	095b      	lsrs	r3, r3, #5
 8002e42:	2164      	movs	r1, #100	; 0x64
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	3332      	adds	r3, #50	; 0x32
 8002e4e:	4a67      	ldr	r2, [pc, #412]	; (8002fec <UART_SetConfig+0x38c>)
 8002e50:	fba2 2303 	umull	r2, r3, r2, r3
 8002e54:	095b      	lsrs	r3, r3, #5
 8002e56:	f003 0207 	and.w	r2, r3, #7
 8002e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4432      	add	r2, r6
 8002e60:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e62:	e0b9      	b.n	8002fd8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e66:	461c      	mov	r4, r3
 8002e68:	f04f 0500 	mov.w	r5, #0
 8002e6c:	4622      	mov	r2, r4
 8002e6e:	462b      	mov	r3, r5
 8002e70:	1891      	adds	r1, r2, r2
 8002e72:	6139      	str	r1, [r7, #16]
 8002e74:	415b      	adcs	r3, r3
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e7c:	1912      	adds	r2, r2, r4
 8002e7e:	eb45 0303 	adc.w	r3, r5, r3
 8002e82:	f04f 0000 	mov.w	r0, #0
 8002e86:	f04f 0100 	mov.w	r1, #0
 8002e8a:	00d9      	lsls	r1, r3, #3
 8002e8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e90:	00d0      	lsls	r0, r2, #3
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	eb12 0804 	adds.w	r8, r2, r4
 8002e9a:	eb43 0905 	adc.w	r9, r3, r5
 8002e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f04f 0100 	mov.w	r1, #0
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	008b      	lsls	r3, r1, #2
 8002eb2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002eb6:	0082      	lsls	r2, r0, #2
 8002eb8:	4640      	mov	r0, r8
 8002eba:	4649      	mov	r1, r9
 8002ebc:	f7fd f98c 	bl	80001d8 <__aeabi_uldivmod>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4b49      	ldr	r3, [pc, #292]	; (8002fec <UART_SetConfig+0x38c>)
 8002ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	011e      	lsls	r6, r3, #4
 8002ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f04f 0100 	mov.w	r1, #0
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	1894      	adds	r4, r2, r2
 8002edc:	60bc      	str	r4, [r7, #8]
 8002ede:	415b      	adcs	r3, r3
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ee6:	1812      	adds	r2, r2, r0
 8002ee8:	eb41 0303 	adc.w	r3, r1, r3
 8002eec:	f04f 0400 	mov.w	r4, #0
 8002ef0:	f04f 0500 	mov.w	r5, #0
 8002ef4:	00dd      	lsls	r5, r3, #3
 8002ef6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002efa:	00d4      	lsls	r4, r2, #3
 8002efc:	4622      	mov	r2, r4
 8002efe:	462b      	mov	r3, r5
 8002f00:	1814      	adds	r4, r2, r0
 8002f02:	64bc      	str	r4, [r7, #72]	; 0x48
 8002f04:	414b      	adcs	r3, r1
 8002f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f04f 0100 	mov.w	r1, #0
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	008b      	lsls	r3, r1, #2
 8002f1c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f20:	0082      	lsls	r2, r0, #2
 8002f22:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002f26:	f7fd f957 	bl	80001d8 <__aeabi_uldivmod>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <UART_SetConfig+0x38c>)
 8002f30:	fba3 1302 	umull	r1, r3, r3, r2
 8002f34:	095b      	lsrs	r3, r3, #5
 8002f36:	2164      	movs	r1, #100	; 0x64
 8002f38:	fb01 f303 	mul.w	r3, r1, r3
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	3332      	adds	r3, #50	; 0x32
 8002f42:	4a2a      	ldr	r2, [pc, #168]	; (8002fec <UART_SetConfig+0x38c>)
 8002f44:	fba2 2303 	umull	r2, r3, r2, r3
 8002f48:	095b      	lsrs	r3, r3, #5
 8002f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f4e:	441e      	add	r6, r3
 8002f50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f52:	4618      	mov	r0, r3
 8002f54:	f04f 0100 	mov.w	r1, #0
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	1894      	adds	r4, r2, r2
 8002f5e:	603c      	str	r4, [r7, #0]
 8002f60:	415b      	adcs	r3, r3
 8002f62:	607b      	str	r3, [r7, #4]
 8002f64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f68:	1812      	adds	r2, r2, r0
 8002f6a:	eb41 0303 	adc.w	r3, r1, r3
 8002f6e:	f04f 0400 	mov.w	r4, #0
 8002f72:	f04f 0500 	mov.w	r5, #0
 8002f76:	00dd      	lsls	r5, r3, #3
 8002f78:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f7c:	00d4      	lsls	r4, r2, #3
 8002f7e:	4622      	mov	r2, r4
 8002f80:	462b      	mov	r3, r5
 8002f82:	eb12 0a00 	adds.w	sl, r2, r0
 8002f86:	eb43 0b01 	adc.w	fp, r3, r1
 8002f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f04f 0100 	mov.w	r1, #0
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	008b      	lsls	r3, r1, #2
 8002f9e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002fa2:	0082      	lsls	r2, r0, #2
 8002fa4:	4650      	mov	r0, sl
 8002fa6:	4659      	mov	r1, fp
 8002fa8:	f7fd f916 	bl	80001d8 <__aeabi_uldivmod>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <UART_SetConfig+0x38c>)
 8002fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	2164      	movs	r1, #100	; 0x64
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	3332      	adds	r3, #50	; 0x32
 8002fc4:	4a09      	ldr	r2, [pc, #36]	; (8002fec <UART_SetConfig+0x38c>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	f003 020f 	and.w	r2, r3, #15
 8002fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4432      	add	r2, r6
 8002fd6:	609a      	str	r2, [r3, #8]
}
 8002fd8:	bf00      	nop
 8002fda:	377c      	adds	r7, #124	; 0x7c
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40011000 	.word	0x40011000
 8002fe8:	40011400 	.word	0x40011400
 8002fec:	51eb851f 	.word	0x51eb851f

08002ff0 <__libc_init_array>:
 8002ff0:	b570      	push	{r4, r5, r6, lr}
 8002ff2:	4d0d      	ldr	r5, [pc, #52]	; (8003028 <__libc_init_array+0x38>)
 8002ff4:	4c0d      	ldr	r4, [pc, #52]	; (800302c <__libc_init_array+0x3c>)
 8002ff6:	1b64      	subs	r4, r4, r5
 8002ff8:	10a4      	asrs	r4, r4, #2
 8002ffa:	2600      	movs	r6, #0
 8002ffc:	42a6      	cmp	r6, r4
 8002ffe:	d109      	bne.n	8003014 <__libc_init_array+0x24>
 8003000:	4d0b      	ldr	r5, [pc, #44]	; (8003030 <__libc_init_array+0x40>)
 8003002:	4c0c      	ldr	r4, [pc, #48]	; (8003034 <__libc_init_array+0x44>)
 8003004:	f000 f820 	bl	8003048 <_init>
 8003008:	1b64      	subs	r4, r4, r5
 800300a:	10a4      	asrs	r4, r4, #2
 800300c:	2600      	movs	r6, #0
 800300e:	42a6      	cmp	r6, r4
 8003010:	d105      	bne.n	800301e <__libc_init_array+0x2e>
 8003012:	bd70      	pop	{r4, r5, r6, pc}
 8003014:	f855 3b04 	ldr.w	r3, [r5], #4
 8003018:	4798      	blx	r3
 800301a:	3601      	adds	r6, #1
 800301c:	e7ee      	b.n	8002ffc <__libc_init_array+0xc>
 800301e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003022:	4798      	blx	r3
 8003024:	3601      	adds	r6, #1
 8003026:	e7f2      	b.n	800300e <__libc_init_array+0x1e>
 8003028:	080032b8 	.word	0x080032b8
 800302c:	080032b8 	.word	0x080032b8
 8003030:	080032b8 	.word	0x080032b8
 8003034:	080032bc 	.word	0x080032bc

08003038 <memset>:
 8003038:	4402      	add	r2, r0
 800303a:	4603      	mov	r3, r0
 800303c:	4293      	cmp	r3, r2
 800303e:	d100      	bne.n	8003042 <memset+0xa>
 8003040:	4770      	bx	lr
 8003042:	f803 1b01 	strb.w	r1, [r3], #1
 8003046:	e7f9      	b.n	800303c <memset+0x4>

08003048 <_init>:
 8003048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304a:	bf00      	nop
 800304c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304e:	bc08      	pop	{r3}
 8003050:	469e      	mov	lr, r3
 8003052:	4770      	bx	lr

08003054 <_fini>:
 8003054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003056:	bf00      	nop
 8003058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305a:	bc08      	pop	{r3}
 800305c:	469e      	mov	lr, r3
 800305e:	4770      	bx	lr
